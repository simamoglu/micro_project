
micro_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005288  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08005458  08005458  00006458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800555c  0800555c  0000706c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800555c  0800555c  0000655c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005564  08005564  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005564  08005564  00006564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005568  08005568  00006568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800556c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000abc  2000006c  080055d8  0000706c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b28  080055d8  00007b28  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e60c  00000000  00000000  0000709c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022a1  00000000  00000000  000156a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d68  00000000  00000000  00017950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a70  00000000  00000000  000186b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022408  00000000  00000000  00019128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010e74  00000000  00000000  0003b530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd9bd  00000000  00000000  0004c3a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00119d61  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cb4  00000000  00000000  00119da4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0011da58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005440 	.word	0x08005440

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	08005440 	.word	0x08005440

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <RC522_SPI_Transfer>:
 * Description: A common function used by Write_MFRC522 and Read_MFRC522
 * Input Parameters: data - the value to be written
 * Returns: a byte of data read from the module
 */
uint8_t RC522_SPI_Transfer(uchar data)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b086      	sub	sp, #24
 80005e0:	af02      	add	r7, sp, #8
 80005e2:	4603      	mov	r3, r0
 80005e4:	71fb      	strb	r3, [r7, #7]
	uchar rx_data;
	HAL_SPI_TransmitReceive(HSPI_INSTANCE,&data,&rx_data,1,100);
 80005e6:	f107 020f 	add.w	r2, r7, #15
 80005ea:	1df9      	adds	r1, r7, #7
 80005ec:	2364      	movs	r3, #100	@ 0x64
 80005ee:	9300      	str	r3, [sp, #0]
 80005f0:	2301      	movs	r3, #1
 80005f2:	4804      	ldr	r0, [pc, #16]	@ (8000604 <RC522_SPI_Transfer+0x28>)
 80005f4:	f003 fd13 	bl	800401e <HAL_SPI_TransmitReceive>

	return rx_data;
 80005f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	3710      	adds	r7, #16
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	200000e4 	.word	0x200000e4

08000608 <Write_MFRC522>:
 * Function Description: To a certain MFRC522 register to write a byte of data
 * Input Parameters: addr - register address; val - the value to be written
 * Return value: None
 */
void Write_MFRC522(uchar addr, uchar val)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	4603      	mov	r3, r0
 8000610:	460a      	mov	r2, r1
 8000612:	71fb      	strb	r3, [r7, #7]
 8000614:	4613      	mov	r3, r2
 8000616:	71bb      	strb	r3, [r7, #6]
	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 8000618:	2200      	movs	r2, #0
 800061a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800061e:	480d      	ldr	r0, [pc, #52]	@ (8000654 <Write_MFRC522+0x4c>)
 8000620:	f001 fd4a 	bl	80020b8 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and clear the MSb to indicate a write
	  // - bottom 8 bits are the data bits being sent for that address, we send them
	RC522_SPI_Transfer((addr<<1)&0x7E);	
 8000624:	79fb      	ldrb	r3, [r7, #7]
 8000626:	005b      	lsls	r3, r3, #1
 8000628:	b2db      	uxtb	r3, r3
 800062a:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 800062e:	b2db      	uxtb	r3, r3
 8000630:	4618      	mov	r0, r3
 8000632:	f7ff ffd3 	bl	80005dc <RC522_SPI_Transfer>
	RC522_SPI_Transfer(val);
 8000636:	79bb      	ldrb	r3, [r7, #6]
 8000638:	4618      	mov	r0, r3
 800063a:	f7ff ffcf 	bl	80005dc <RC522_SPI_Transfer>
	
	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 800063e:	2201      	movs	r2, #1
 8000640:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000644:	4803      	ldr	r0, [pc, #12]	@ (8000654 <Write_MFRC522+0x4c>)
 8000646:	f001 fd37 	bl	80020b8 <HAL_GPIO_WritePin>
}
 800064a:	bf00      	nop
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	40020400 	.word	0x40020400

08000658 <Read_MFRC522>:
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the module
 */
uchar Read_MFRC522(uchar addr)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	71fb      	strb	r3, [r7, #7]
	uchar val;

	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 8000662:	2200      	movs	r2, #0
 8000664:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000668:	4810      	ldr	r0, [pc, #64]	@ (80006ac <Read_MFRC522+0x54>)
 800066a:	f001 fd25 	bl	80020b8 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and set the MSb to indicate a read
	  // - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
	RC522_SPI_Transfer(((addr<<1)&0x7E) | 0x80);	
 800066e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000672:	005b      	lsls	r3, r3, #1
 8000674:	b25b      	sxtb	r3, r3
 8000676:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 800067a:	b25b      	sxtb	r3, r3
 800067c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000680:	b25b      	sxtb	r3, r3
 8000682:	b2db      	uxtb	r3, r3
 8000684:	4618      	mov	r0, r3
 8000686:	f7ff ffa9 	bl	80005dc <RC522_SPI_Transfer>
	val = RC522_SPI_Transfer(0x00);
 800068a:	2000      	movs	r0, #0
 800068c:	f7ff ffa6 	bl	80005dc <RC522_SPI_Transfer>
 8000690:	4603      	mov	r3, r0
 8000692:	73fb      	strb	r3, [r7, #15]
	
	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8000694:	2201      	movs	r2, #1
 8000696:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800069a:	4804      	ldr	r0, [pc, #16]	@ (80006ac <Read_MFRC522+0x54>)
 800069c:	f001 fd0c 	bl	80020b8 <HAL_GPIO_WritePin>
	
	return val;	
 80006a0:	7bfb      	ldrb	r3, [r7, #15]
	
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	3710      	adds	r7, #16
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40020400 	.word	0x40020400

080006b0 <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(uchar reg, uchar mask)  
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	4603      	mov	r3, r0
 80006b8:	460a      	mov	r2, r1
 80006ba:	71fb      	strb	r3, [r7, #7]
 80006bc:	4613      	mov	r3, r2
 80006be:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	4618      	mov	r0, r3
 80006c4:	f7ff ffc8 	bl	8000658 <Read_MFRC522>
 80006c8:	4603      	mov	r3, r0
 80006ca:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 80006cc:	7bfa      	ldrb	r2, [r7, #15]
 80006ce:	79bb      	ldrb	r3, [r7, #6]
 80006d0:	4313      	orrs	r3, r2
 80006d2:	b2da      	uxtb	r2, r3
 80006d4:	79fb      	ldrb	r3, [r7, #7]
 80006d6:	4611      	mov	r1, r2
 80006d8:	4618      	mov	r0, r3
 80006da:	f7ff ff95 	bl	8000608 <Write_MFRC522>
}
 80006de:	bf00      	nop
 80006e0:	3710      	adds	r7, #16
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}

080006e6 <ClearBitMask>:
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask(uchar reg, uchar mask)  
{
 80006e6:	b580      	push	{r7, lr}
 80006e8:	b084      	sub	sp, #16
 80006ea:	af00      	add	r7, sp, #0
 80006ec:	4603      	mov	r3, r0
 80006ee:	460a      	mov	r2, r1
 80006f0:	71fb      	strb	r3, [r7, #7]
 80006f2:	4613      	mov	r3, r2
 80006f4:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	4618      	mov	r0, r3
 80006fa:	f7ff ffad 	bl	8000658 <Read_MFRC522>
 80006fe:	4603      	mov	r3, r0
 8000700:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 8000702:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000706:	43db      	mvns	r3, r3
 8000708:	b25a      	sxtb	r2, r3
 800070a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800070e:	4013      	ands	r3, r2
 8000710:	b25b      	sxtb	r3, r3
 8000712:	b2da      	uxtb	r2, r3
 8000714:	79fb      	ldrb	r3, [r7, #7]
 8000716:	4611      	mov	r1, r2
 8000718:	4618      	mov	r0, r3
 800071a:	f7ff ff75 	bl	8000608 <Write_MFRC522>
} 
 800071e:	bf00      	nop
 8000720:	3710      	adds	r7, #16
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}

08000726 <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 8000726:	b580      	push	{r7, lr}
 8000728:	af00      	add	r7, sp, #0

	Read_MFRC522(TxControlReg);
 800072a:	2014      	movs	r0, #20
 800072c:	f7ff ff94 	bl	8000658 <Read_MFRC522>
	SetBitMask(TxControlReg, 0x03);
 8000730:	2103      	movs	r1, #3
 8000732:	2014      	movs	r0, #20
 8000734:	f7ff ffbc 	bl	80006b0 <SetBitMask>
}
 8000738:	bf00      	nop
 800073a:	bd80      	pop	{r7, pc}

0800073c <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
    Write_MFRC522(CommandReg, PCD_RESETPHASE);
 8000740:	210f      	movs	r1, #15
 8000742:	2001      	movs	r0, #1
 8000744:	f7ff ff60 	bl	8000608 <Write_MFRC522>
}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}

0800074c <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8000750:	2201      	movs	r2, #1
 8000752:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000756:	4813      	ldr	r0, [pc, #76]	@ (80007a4 <MFRC522_Init+0x58>)
 8000758:	f001 fcae 	bl	80020b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MFRC522_RST_PORT,MFRC522_RST_PIN,GPIO_PIN_SET);
 800075c:	2201      	movs	r2, #1
 800075e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000762:	4811      	ldr	r0, [pc, #68]	@ (80007a8 <MFRC522_Init+0x5c>)
 8000764:	f001 fca8 	bl	80020b8 <HAL_GPIO_WritePin>
	MFRC522_Reset();
 8000768:	f7ff ffe8 	bl	800073c <MFRC522_Reset>
	 	
	//Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
	Write_MFRC522(TModeReg, 0x8D);		//Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 800076c:	218d      	movs	r1, #141	@ 0x8d
 800076e:	202a      	movs	r0, #42	@ 0x2a
 8000770:	f7ff ff4a 	bl	8000608 <Write_MFRC522>
	Write_MFRC522(TPrescalerReg, 0x3E);	//TModeReg[3..0] + TPrescalerReg
 8000774:	213e      	movs	r1, #62	@ 0x3e
 8000776:	202b      	movs	r0, #43	@ 0x2b
 8000778:	f7ff ff46 	bl	8000608 <Write_MFRC522>
	Write_MFRC522(TReloadRegL, 30);           
 800077c:	211e      	movs	r1, #30
 800077e:	202d      	movs	r0, #45	@ 0x2d
 8000780:	f7ff ff42 	bl	8000608 <Write_MFRC522>
	Write_MFRC522(TReloadRegH, 0);
 8000784:	2100      	movs	r1, #0
 8000786:	202c      	movs	r0, #44	@ 0x2c
 8000788:	f7ff ff3e 	bl	8000608 <Write_MFRC522>
	
	Write_MFRC522(TxAutoReg, 0x40);		// force 100% ASK modulation
 800078c:	2140      	movs	r1, #64	@ 0x40
 800078e:	2015      	movs	r0, #21
 8000790:	f7ff ff3a 	bl	8000608 <Write_MFRC522>
	Write_MFRC522(ModeReg, 0x3D);		// CRC Initial value 0x6363
 8000794:	213d      	movs	r1, #61	@ 0x3d
 8000796:	2011      	movs	r0, #17
 8000798:	f7ff ff36 	bl	8000608 <Write_MFRC522>

	AntennaOn();
 800079c:	f7ff ffc3 	bl	8000726 <AntennaOn>
}
 80007a0:	bf00      	nop
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40020400 	.word	0x40020400
 80007a8:	40020000 	.word	0x40020000

080007ac <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
uchar MFRC522_ToCard(uchar command, uchar *sendData, uchar sendLen, uchar *backData, uint *backLen)
{
 80007ac:	b590      	push	{r4, r7, lr}
 80007ae:	b089      	sub	sp, #36	@ 0x24
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	60b9      	str	r1, [r7, #8]
 80007b4:	607b      	str	r3, [r7, #4]
 80007b6:	4603      	mov	r3, r0
 80007b8:	73fb      	strb	r3, [r7, #15]
 80007ba:	4613      	mov	r3, r2
 80007bc:	73bb      	strb	r3, [r7, #14]
    uchar status = MI_ERR;
 80007be:	2302      	movs	r3, #2
 80007c0:	77fb      	strb	r3, [r7, #31]
    uchar irqEn = 0x00;
 80007c2:	2300      	movs	r3, #0
 80007c4:	77bb      	strb	r3, [r7, #30]
    uchar waitIRq = 0x00;
 80007c6:	2300      	movs	r3, #0
 80007c8:	777b      	strb	r3, [r7, #29]
    uchar lastBits;
    uchar n;
    uint i;

    switch (command)
 80007ca:	7bfb      	ldrb	r3, [r7, #15]
 80007cc:	2b0c      	cmp	r3, #12
 80007ce:	d006      	beq.n	80007de <MFRC522_ToCard+0x32>
 80007d0:	2b0e      	cmp	r3, #14
 80007d2:	d109      	bne.n	80007e8 <MFRC522_ToCard+0x3c>
    {
        case PCD_AUTHENT:		// Certification cards close
		{
			irqEn = 0x12;
 80007d4:	2312      	movs	r3, #18
 80007d6:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x10;
 80007d8:	2310      	movs	r3, #16
 80007da:	777b      	strb	r3, [r7, #29]
			break;
 80007dc:	e005      	b.n	80007ea <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE:	// Transmit FIFO data
		{
			irqEn = 0x77;
 80007de:	2377      	movs	r3, #119	@ 0x77
 80007e0:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x30;
 80007e2:	2330      	movs	r3, #48	@ 0x30
 80007e4:	777b      	strb	r3, [r7, #29]
			break;
 80007e6:	e000      	b.n	80007ea <MFRC522_ToCard+0x3e>
		}
		default:
			break;
 80007e8:	bf00      	nop
    }
   
    Write_MFRC522(CommIEnReg, irqEn|0x80);	// Interrupt request
 80007ea:	7fbb      	ldrb	r3, [r7, #30]
 80007ec:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	4619      	mov	r1, r3
 80007f4:	2002      	movs	r0, #2
 80007f6:	f7ff ff07 	bl	8000608 <Write_MFRC522>
    ClearBitMask(CommIrqReg, 0x80);			// Clear all interrupt request bit
 80007fa:	2180      	movs	r1, #128	@ 0x80
 80007fc:	2004      	movs	r0, #4
 80007fe:	f7ff ff72 	bl	80006e6 <ClearBitMask>
    SetBitMask(FIFOLevelReg, 0x80);			// FlushBuffer=1, FIFO Initialization
 8000802:	2180      	movs	r1, #128	@ 0x80
 8000804:	200a      	movs	r0, #10
 8000806:	f7ff ff53 	bl	80006b0 <SetBitMask>
    
	Write_MFRC522(CommandReg, PCD_IDLE);	// NO action; Cancel the current command
 800080a:	2100      	movs	r1, #0
 800080c:	2001      	movs	r0, #1
 800080e:	f7ff fefb 	bl	8000608 <Write_MFRC522>

	// Writing data to the FIFO
    for (i=0; i<sendLen; i++)
 8000812:	2300      	movs	r3, #0
 8000814:	61bb      	str	r3, [r7, #24]
 8000816:	e00a      	b.n	800082e <MFRC522_ToCard+0x82>
    {   
		Write_MFRC522(FIFODataReg, sendData[i]);    
 8000818:	68ba      	ldr	r2, [r7, #8]
 800081a:	69bb      	ldr	r3, [r7, #24]
 800081c:	4413      	add	r3, r2
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	4619      	mov	r1, r3
 8000822:	2009      	movs	r0, #9
 8000824:	f7ff fef0 	bl	8000608 <Write_MFRC522>
    for (i=0; i<sendLen; i++)
 8000828:	69bb      	ldr	r3, [r7, #24]
 800082a:	3301      	adds	r3, #1
 800082c:	61bb      	str	r3, [r7, #24]
 800082e:	7bbb      	ldrb	r3, [r7, #14]
 8000830:	69ba      	ldr	r2, [r7, #24]
 8000832:	429a      	cmp	r2, r3
 8000834:	d3f0      	bcc.n	8000818 <MFRC522_ToCard+0x6c>
	}

    // Execute the command
	Write_MFRC522(CommandReg, command);
 8000836:	7bfb      	ldrb	r3, [r7, #15]
 8000838:	4619      	mov	r1, r3
 800083a:	2001      	movs	r0, #1
 800083c:	f7ff fee4 	bl	8000608 <Write_MFRC522>
    if (command == PCD_TRANSCEIVE)
 8000840:	7bfb      	ldrb	r3, [r7, #15]
 8000842:	2b0c      	cmp	r3, #12
 8000844:	d103      	bne.n	800084e <MFRC522_ToCard+0xa2>
    {    
		SetBitMask(BitFramingReg, 0x80);		// StartSend=1,transmission of data starts
 8000846:	2180      	movs	r1, #128	@ 0x80
 8000848:	200d      	movs	r0, #13
 800084a:	f7ff ff31 	bl	80006b0 <SetBitMask>
	}   
    
    // Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 800084e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000852:	61bb      	str	r3, [r7, #24]
    do 
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = Read_MFRC522(CommIrqReg);
 8000854:	2004      	movs	r0, #4
 8000856:	f7ff feff 	bl	8000658 <Read_MFRC522>
 800085a:	4603      	mov	r3, r0
 800085c:	773b      	strb	r3, [r7, #28]
        i--;
 800085e:	69bb      	ldr	r3, [r7, #24]
 8000860:	3b01      	subs	r3, #1
 8000862:	61bb      	str	r3, [r7, #24]
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8000864:	69bb      	ldr	r3, [r7, #24]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d00a      	beq.n	8000880 <MFRC522_ToCard+0xd4>
 800086a:	7f3b      	ldrb	r3, [r7, #28]
 800086c:	f003 0301 	and.w	r3, r3, #1
 8000870:	2b00      	cmp	r3, #0
 8000872:	d105      	bne.n	8000880 <MFRC522_ToCard+0xd4>
 8000874:	7f3a      	ldrb	r2, [r7, #28]
 8000876:	7f7b      	ldrb	r3, [r7, #29]
 8000878:	4013      	ands	r3, r2
 800087a:	b2db      	uxtb	r3, r3
 800087c:	2b00      	cmp	r3, #0
 800087e:	d0e9      	beq.n	8000854 <MFRC522_ToCard+0xa8>

    ClearBitMask(BitFramingReg, 0x80);			//StartSend=0
 8000880:	2180      	movs	r1, #128	@ 0x80
 8000882:	200d      	movs	r0, #13
 8000884:	f7ff ff2f 	bl	80006e6 <ClearBitMask>
	
    if (i != 0)
 8000888:	69bb      	ldr	r3, [r7, #24]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d052      	beq.n	8000934 <MFRC522_ToCard+0x188>
    {    
        if(!(Read_MFRC522(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 800088e:	2006      	movs	r0, #6
 8000890:	f7ff fee2 	bl	8000658 <Read_MFRC522>
 8000894:	4603      	mov	r3, r0
 8000896:	f003 031b 	and.w	r3, r3, #27
 800089a:	2b00      	cmp	r3, #0
 800089c:	d148      	bne.n	8000930 <MFRC522_ToCard+0x184>
        {
            status = MI_OK;
 800089e:	2300      	movs	r3, #0
 80008a0:	77fb      	strb	r3, [r7, #31]
            if (n & irqEn & 0x01)
 80008a2:	7f3a      	ldrb	r2, [r7, #28]
 80008a4:	7fbb      	ldrb	r3, [r7, #30]
 80008a6:	4013      	ands	r3, r2
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	f003 0301 	and.w	r3, r3, #1
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MFRC522_ToCard+0x10a>
            {   
				status = MI_NOTAGERR;
 80008b2:	2301      	movs	r3, #1
 80008b4:	77fb      	strb	r3, [r7, #31]
			}

            if (command == PCD_TRANSCEIVE)
 80008b6:	7bfb      	ldrb	r3, [r7, #15]
 80008b8:	2b0c      	cmp	r3, #12
 80008ba:	d13b      	bne.n	8000934 <MFRC522_ToCard+0x188>
            {
               	n = Read_MFRC522(FIFOLevelReg);
 80008bc:	200a      	movs	r0, #10
 80008be:	f7ff fecb 	bl	8000658 <Read_MFRC522>
 80008c2:	4603      	mov	r3, r0
 80008c4:	773b      	strb	r3, [r7, #28]
              	lastBits = Read_MFRC522(ControlReg) & 0x07;
 80008c6:	200c      	movs	r0, #12
 80008c8:	f7ff fec6 	bl	8000658 <Read_MFRC522>
 80008cc:	4603      	mov	r3, r0
 80008ce:	f003 0307 	and.w	r3, r3, #7
 80008d2:	75fb      	strb	r3, [r7, #23]
                if (lastBits)
 80008d4:	7dfb      	ldrb	r3, [r7, #23]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d008      	beq.n	80008ec <MFRC522_ToCard+0x140>
                {   
					*backLen = (n-1)*8 + lastBits;   
 80008da:	7f3b      	ldrb	r3, [r7, #28]
 80008dc:	3b01      	subs	r3, #1
 80008de:	00da      	lsls	r2, r3, #3
 80008e0:	7dfb      	ldrb	r3, [r7, #23]
 80008e2:	4413      	add	r3, r2
 80008e4:	461a      	mov	r2, r3
 80008e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	e004      	b.n	80008f6 <MFRC522_ToCard+0x14a>
				}
                else
                {   
					*backLen = n*8;   
 80008ec:	7f3b      	ldrb	r3, [r7, #28]
 80008ee:	00db      	lsls	r3, r3, #3
 80008f0:	461a      	mov	r2, r3
 80008f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80008f4:	601a      	str	r2, [r3, #0]
				}

                if (n == 0)
 80008f6:	7f3b      	ldrb	r3, [r7, #28]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d101      	bne.n	8000900 <MFRC522_ToCard+0x154>
                {   
					n = 1;    
 80008fc:	2301      	movs	r3, #1
 80008fe:	773b      	strb	r3, [r7, #28]
				}
                if (n > MAX_LEN)
 8000900:	7f3b      	ldrb	r3, [r7, #28]
 8000902:	2b10      	cmp	r3, #16
 8000904:	d901      	bls.n	800090a <MFRC522_ToCard+0x15e>
                {   
					n = MAX_LEN;   
 8000906:	2310      	movs	r3, #16
 8000908:	773b      	strb	r3, [r7, #28]
				}
				
                // Reading the received data in FIFO
                for (i=0; i<n; i++)
 800090a:	2300      	movs	r3, #0
 800090c:	61bb      	str	r3, [r7, #24]
 800090e:	e00a      	b.n	8000926 <MFRC522_ToCard+0x17a>
                {   
					backData[i] = Read_MFRC522(FIFODataReg);    
 8000910:	687a      	ldr	r2, [r7, #4]
 8000912:	69bb      	ldr	r3, [r7, #24]
 8000914:	18d4      	adds	r4, r2, r3
 8000916:	2009      	movs	r0, #9
 8000918:	f7ff fe9e 	bl	8000658 <Read_MFRC522>
 800091c:	4603      	mov	r3, r0
 800091e:	7023      	strb	r3, [r4, #0]
                for (i=0; i<n; i++)
 8000920:	69bb      	ldr	r3, [r7, #24]
 8000922:	3301      	adds	r3, #1
 8000924:	61bb      	str	r3, [r7, #24]
 8000926:	7f3b      	ldrb	r3, [r7, #28]
 8000928:	69ba      	ldr	r2, [r7, #24]
 800092a:	429a      	cmp	r2, r3
 800092c:	d3f0      	bcc.n	8000910 <MFRC522_ToCard+0x164>
 800092e:	e001      	b.n	8000934 <MFRC522_ToCard+0x188>
				}
            }
        }
        else
        {   
			status = MI_ERR;  
 8000930:	2302      	movs	r3, #2
 8000932:	77fb      	strb	r3, [r7, #31]
    }
	
    //SetBitMask(ControlReg,0x80);           //timer stops
    //Write_MFRC522(CommandReg, PCD_IDLE); 

    return status;
 8000934:	7ffb      	ldrb	r3, [r7, #31]
}
 8000936:	4618      	mov	r0, r3
 8000938:	3724      	adds	r7, #36	@ 0x24
 800093a:	46bd      	mov	sp, r7
 800093c:	bd90      	pop	{r4, r7, pc}

0800093e <MFRC522_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Request(uchar reqMode, uchar *TagType)
{
 800093e:	b580      	push	{r7, lr}
 8000940:	b086      	sub	sp, #24
 8000942:	af02      	add	r7, sp, #8
 8000944:	4603      	mov	r3, r0
 8000946:	6039      	str	r1, [r7, #0]
 8000948:	71fb      	strb	r3, [r7, #7]
	uchar status;  
	uint backBits;			 // The received data bits

	Write_MFRC522(BitFramingReg, 0x07);		//TxLastBists = BitFramingReg[2..0]
 800094a:	2107      	movs	r1, #7
 800094c:	200d      	movs	r0, #13
 800094e:	f7ff fe5b 	bl	8000608 <Write_MFRC522>
	
	TagType[0] = reqMode;
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	79fa      	ldrb	r2, [r7, #7]
 8000956:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8000958:	f107 0308 	add.w	r3, r7, #8
 800095c:	9300      	str	r3, [sp, #0]
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	2201      	movs	r2, #1
 8000962:	6839      	ldr	r1, [r7, #0]
 8000964:	200c      	movs	r0, #12
 8000966:	f7ff ff21 	bl	80007ac <MFRC522_ToCard>
 800096a:	4603      	mov	r3, r0
 800096c:	73fb      	strb	r3, [r7, #15]

	if ((status != MI_OK) || (backBits != 0x10))
 800096e:	7bfb      	ldrb	r3, [r7, #15]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d102      	bne.n	800097a <MFRC522_Request+0x3c>
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	2b10      	cmp	r3, #16
 8000978:	d001      	beq.n	800097e <MFRC522_Request+0x40>
	{    
		status = MI_ERR;
 800097a:	2302      	movs	r3, #2
 800097c:	73fb      	strb	r3, [r7, #15]
	}
   
	return status;
 800097e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000980:	4618      	mov	r0, r3
 8000982:	3710      	adds	r7, #16
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}

08000988 <MFRC522_Anticoll>:
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Anticoll(uchar *serNum)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b086      	sub	sp, #24
 800098c:	af02      	add	r7, sp, #8
 800098e:	6078      	str	r0, [r7, #4]
    uchar status;
    uchar i;
	uchar serNumCheck=0;
 8000990:	2300      	movs	r3, #0
 8000992:	737b      	strb	r3, [r7, #13]
    uint unLen;
    
	Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 8000994:	2100      	movs	r1, #0
 8000996:	200d      	movs	r0, #13
 8000998:	f7ff fe36 	bl	8000608 <Write_MFRC522>
 
    serNum[0] = PICC_ANTICOLL;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	2293      	movs	r2, #147	@ 0x93
 80009a0:	701a      	strb	r2, [r3, #0]
    serNum[1] = 0x20;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	3301      	adds	r3, #1
 80009a6:	2220      	movs	r2, #32
 80009a8:	701a      	strb	r2, [r3, #0]
    status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 80009aa:	f107 0308 	add.w	r3, r7, #8
 80009ae:	9300      	str	r3, [sp, #0]
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	2202      	movs	r2, #2
 80009b4:	6879      	ldr	r1, [r7, #4]
 80009b6:	200c      	movs	r0, #12
 80009b8:	f7ff fef8 	bl	80007ac <MFRC522_ToCard>
 80009bc:	4603      	mov	r3, r0
 80009be:	73fb      	strb	r3, [r7, #15]

    if (status == MI_OK)
 80009c0:	7bfb      	ldrb	r3, [r7, #15]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d118      	bne.n	80009f8 <MFRC522_Anticoll+0x70>
	{
    	 //Check card serial number
		for (i=0; i<4; i++)
 80009c6:	2300      	movs	r3, #0
 80009c8:	73bb      	strb	r3, [r7, #14]
 80009ca:	e009      	b.n	80009e0 <MFRC522_Anticoll+0x58>
		{   
		 	serNumCheck ^= serNum[i];
 80009cc:	7bbb      	ldrb	r3, [r7, #14]
 80009ce:	687a      	ldr	r2, [r7, #4]
 80009d0:	4413      	add	r3, r2
 80009d2:	781a      	ldrb	r2, [r3, #0]
 80009d4:	7b7b      	ldrb	r3, [r7, #13]
 80009d6:	4053      	eors	r3, r2
 80009d8:	737b      	strb	r3, [r7, #13]
		for (i=0; i<4; i++)
 80009da:	7bbb      	ldrb	r3, [r7, #14]
 80009dc:	3301      	adds	r3, #1
 80009de:	73bb      	strb	r3, [r7, #14]
 80009e0:	7bbb      	ldrb	r3, [r7, #14]
 80009e2:	2b03      	cmp	r3, #3
 80009e4:	d9f2      	bls.n	80009cc <MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i])
 80009e6:	7bbb      	ldrb	r3, [r7, #14]
 80009e8:	687a      	ldr	r2, [r7, #4]
 80009ea:	4413      	add	r3, r2
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	7b7a      	ldrb	r2, [r7, #13]
 80009f0:	429a      	cmp	r2, r3
 80009f2:	d001      	beq.n	80009f8 <MFRC522_Anticoll+0x70>
		{   
			status = MI_ERR;    
 80009f4:	2302      	movs	r3, #2
 80009f6:	73fb      	strb	r3, [r7, #15]
		}
    }

    return status;
 80009f8:	7bfb      	ldrb	r3, [r7, #15]
} 
 80009fa:	4618      	mov	r0, r3
 80009fc:	3710      	adds	r7, #16
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}

08000a02 <bcd2dec>:
#include "ds1307.h"

#define DS1307_ADDRESS 0x68 << 1

uint8_t bcd2dec(uint8_t val) {
 8000a02:	b480      	push	{r7}
 8000a04:	b083      	sub	sp, #12
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	4603      	mov	r3, r0
 8000a0a:	71fb      	strb	r3, [r7, #7]
    return ((val / 16 * 10) + (val % 16));
 8000a0c:	79fb      	ldrb	r3, [r7, #7]
 8000a0e:	091b      	lsrs	r3, r3, #4
 8000a10:	b2db      	uxtb	r3, r3
 8000a12:	461a      	mov	r2, r3
 8000a14:	0092      	lsls	r2, r2, #2
 8000a16:	4413      	add	r3, r2
 8000a18:	005b      	lsls	r3, r3, #1
 8000a1a:	b2da      	uxtb	r2, r3
 8000a1c:	79fb      	ldrb	r3, [r7, #7]
 8000a1e:	f003 030f 	and.w	r3, r3, #15
 8000a22:	b2db      	uxtb	r3, r3
 8000a24:	4413      	add	r3, r2
 8000a26:	b2db      	uxtb	r3, r3
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr

08000a34 <DS1307_Init>:

uint8_t dec2bcd(uint8_t val) {
    return ((val / 10 * 16) + (val % 10));
}

bool DS1307_Init(I2C_HandleTypeDef *hi2c) {
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
    uint8_t check;
    return (HAL_I2C_IsDeviceReady(hi2c, DS1307_ADDRESS, 1, 100) == HAL_OK);
 8000a3c:	2364      	movs	r3, #100	@ 0x64
 8000a3e:	2201      	movs	r2, #1
 8000a40:	21d0      	movs	r1, #208	@ 0xd0
 8000a42:	6878      	ldr	r0, [r7, #4]
 8000a44:	f001 ffc6 	bl	80029d4 <HAL_I2C_IsDeviceReady>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	bf0c      	ite	eq
 8000a4e:	2301      	moveq	r3, #1
 8000a50:	2300      	movne	r3, #0
 8000a52:	b2db      	uxtb	r3, r3
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	3708      	adds	r7, #8
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <DS1307_GetTime>:

bool DS1307_GetTime(I2C_HandleTypeDef *hi2c, RTC_Time *time) {
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b088      	sub	sp, #32
 8000a60:	af02      	add	r7, sp, #8
 8000a62:	6078      	str	r0, [r7, #4]
 8000a64:	6039      	str	r1, [r7, #0]
    uint8_t data[7];
    uint8_t reg = 0x00;
 8000a66:	2300      	movs	r3, #0
 8000a68:	73fb      	strb	r3, [r7, #15]

    if (HAL_I2C_Master_Transmit(hi2c, DS1307_ADDRESS, &reg, 1, 100) != HAL_OK)
 8000a6a:	f107 020f 	add.w	r2, r7, #15
 8000a6e:	2364      	movs	r3, #100	@ 0x64
 8000a70:	9300      	str	r3, [sp, #0]
 8000a72:	2301      	movs	r3, #1
 8000a74:	21d0      	movs	r1, #208	@ 0xd0
 8000a76:	6878      	ldr	r0, [r7, #4]
 8000a78:	f001 fc7c 	bl	8002374 <HAL_I2C_Master_Transmit>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <DS1307_GetTime+0x2a>
        return false;
 8000a82:	2300      	movs	r3, #0
 8000a84:	e04c      	b.n	8000b20 <DS1307_GetTime+0xc4>

    if (HAL_I2C_Master_Receive(hi2c, DS1307_ADDRESS, data, 7, 100) != HAL_OK)
 8000a86:	f107 0210 	add.w	r2, r7, #16
 8000a8a:	2364      	movs	r3, #100	@ 0x64
 8000a8c:	9300      	str	r3, [sp, #0]
 8000a8e:	2307      	movs	r3, #7
 8000a90:	21d0      	movs	r1, #208	@ 0xd0
 8000a92:	6878      	ldr	r0, [r7, #4]
 8000a94:	f001 fd6c 	bl	8002570 <HAL_I2C_Master_Receive>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <DS1307_GetTime+0x46>
        return false;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	e03e      	b.n	8000b20 <DS1307_GetTime+0xc4>

    time->seconds     = bcd2dec(data[0] & 0x7F);
 8000aa2:	7c3b      	ldrb	r3, [r7, #16]
 8000aa4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f7ff ffa9 	bl	8000a02 <bcd2dec>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	701a      	strb	r2, [r3, #0]
    time->minutes     = bcd2dec(data[1]);
 8000ab8:	7c7b      	ldrb	r3, [r7, #17]
 8000aba:	4618      	mov	r0, r3
 8000abc:	f7ff ffa1 	bl	8000a02 <bcd2dec>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	461a      	mov	r2, r3
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	705a      	strb	r2, [r3, #1]
    time->hours       = bcd2dec(data[2] & 0x3F);
 8000ac8:	7cbb      	ldrb	r3, [r7, #18]
 8000aca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f7ff ff96 	bl	8000a02 <bcd2dec>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	461a      	mov	r2, r3
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	709a      	strb	r2, [r3, #2]
    time->day_of_week = bcd2dec(data[3]);
 8000ade:	7cfb      	ldrb	r3, [r7, #19]
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff ff8e 	bl	8000a02 <bcd2dec>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	461a      	mov	r2, r3
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	70da      	strb	r2, [r3, #3]
    time->date        = bcd2dec(data[4]);
 8000aee:	7d3b      	ldrb	r3, [r7, #20]
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff ff86 	bl	8000a02 <bcd2dec>
 8000af6:	4603      	mov	r3, r0
 8000af8:	461a      	mov	r2, r3
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	711a      	strb	r2, [r3, #4]
    time->month       = bcd2dec(data[5]);
 8000afe:	7d7b      	ldrb	r3, [r7, #21]
 8000b00:	4618      	mov	r0, r3
 8000b02:	f7ff ff7e 	bl	8000a02 <bcd2dec>
 8000b06:	4603      	mov	r3, r0
 8000b08:	461a      	mov	r2, r3
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	715a      	strb	r2, [r3, #5]
    time->year        = bcd2dec(data[6]);
 8000b0e:	7dbb      	ldrb	r3, [r7, #22]
 8000b10:	4618      	mov	r0, r3
 8000b12:	f7ff ff76 	bl	8000a02 <bcd2dec>
 8000b16:	4603      	mov	r3, r0
 8000b18:	461a      	mov	r2, r3
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	719a      	strb	r2, [r3, #6]

    return true;
 8000b1e:	2301      	movs	r3, #1
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	3718      	adds	r7, #24
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8000b32:	4a38      	ldr	r2, [pc, #224]	@ (8000c14 <HD44780_Init+0xec>)
 8000b34:	79fb      	ldrb	r3, [r7, #7]
 8000b36:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000b38:	4b37      	ldr	r3, [pc, #220]	@ (8000c18 <HD44780_Init+0xf0>)
 8000b3a:	2208      	movs	r2, #8
 8000b3c:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000b3e:	4b37      	ldr	r3, [pc, #220]	@ (8000c1c <HD44780_Init+0xf4>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8000b44:	4b33      	ldr	r3, [pc, #204]	@ (8000c14 <HD44780_Init+0xec>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d907      	bls.n	8000b5c <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000b4c:	4b33      	ldr	r3, [pc, #204]	@ (8000c1c <HD44780_Init+0xf4>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	f043 0308 	orr.w	r3, r3, #8
 8000b54:	b2da      	uxtb	r2, r3
 8000b56:	4b31      	ldr	r3, [pc, #196]	@ (8000c1c <HD44780_Init+0xf4>)
 8000b58:	701a      	strb	r2, [r3, #0]
 8000b5a:	e006      	b.n	8000b6a <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000b5c:	4b2f      	ldr	r3, [pc, #188]	@ (8000c1c <HD44780_Init+0xf4>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	f043 0304 	orr.w	r3, r3, #4
 8000b64:	b2da      	uxtb	r2, r3
 8000b66:	4b2d      	ldr	r3, [pc, #180]	@ (8000c1c <HD44780_Init+0xf4>)
 8000b68:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8000b6a:	f000 f987 	bl	8000e7c <DelayInit>
  HAL_Delay(50);
 8000b6e:	2032      	movs	r0, #50	@ 0x32
 8000b70:	f000 ffec 	bl	8001b4c <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8000b74:	4b28      	ldr	r3, [pc, #160]	@ (8000c18 <HD44780_Init+0xf0>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f000 f945 	bl	8000e08 <ExpanderWrite>
  HAL_Delay(1000);
 8000b7e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b82:	f000 ffe3 	bl	8001b4c <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8000b86:	2030      	movs	r0, #48	@ 0x30
 8000b88:	f000 f92c 	bl	8000de4 <Write4Bits>
  DelayUS(4500);
 8000b8c:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000b90:	f000 f99e 	bl	8000ed0 <DelayUS>

  Write4Bits(0x03 << 4);
 8000b94:	2030      	movs	r0, #48	@ 0x30
 8000b96:	f000 f925 	bl	8000de4 <Write4Bits>
  DelayUS(4500);
 8000b9a:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000b9e:	f000 f997 	bl	8000ed0 <DelayUS>

  Write4Bits(0x03 << 4);
 8000ba2:	2030      	movs	r0, #48	@ 0x30
 8000ba4:	f000 f91e 	bl	8000de4 <Write4Bits>
  DelayUS(4500);
 8000ba8:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000bac:	f000 f990 	bl	8000ed0 <DelayUS>

  Write4Bits(0x02 << 4);
 8000bb0:	2020      	movs	r0, #32
 8000bb2:	f000 f917 	bl	8000de4 <Write4Bits>
  DelayUS(100);
 8000bb6:	2064      	movs	r0, #100	@ 0x64
 8000bb8:	f000 f98a 	bl	8000ed0 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8000bbc:	4b17      	ldr	r3, [pc, #92]	@ (8000c1c <HD44780_Init+0xf4>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	f043 0320 	orr.w	r3, r3, #32
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f000 f8cf 	bl	8000d6a <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000bcc:	4b14      	ldr	r3, [pc, #80]	@ (8000c20 <HD44780_Init+0xf8>)
 8000bce:	2204      	movs	r2, #4
 8000bd0:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8000bd2:	f000 f875 	bl	8000cc0 <HD44780_Display>
  HD44780_Clear();
 8000bd6:	f000 f82b 	bl	8000c30 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000bda:	4b12      	ldr	r3, [pc, #72]	@ (8000c24 <HD44780_Init+0xfc>)
 8000bdc:	2202      	movs	r2, #2
 8000bde:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000be0:	4b10      	ldr	r3, [pc, #64]	@ (8000c24 <HD44780_Init+0xfc>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	f043 0304 	orr.w	r3, r3, #4
 8000be8:	b2db      	uxtb	r3, r3
 8000bea:	4618      	mov	r0, r3
 8000bec:	f000 f8bd 	bl	8000d6a <SendCommand>
  DelayUS(4500);
 8000bf0:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000bf4:	f000 f96c 	bl	8000ed0 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8000bf8:	490b      	ldr	r1, [pc, #44]	@ (8000c28 <HD44780_Init+0x100>)
 8000bfa:	2000      	movs	r0, #0
 8000bfc:	f000 f876 	bl	8000cec <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8000c00:	490a      	ldr	r1, [pc, #40]	@ (8000c2c <HD44780_Init+0x104>)
 8000c02:	2001      	movs	r0, #1
 8000c04:	f000 f872 	bl	8000cec <HD44780_CreateSpecialChar>

  HD44780_Home();
 8000c08:	f000 f81d 	bl	8000c46 <HD44780_Home>
}
 8000c0c:	bf00      	nop
 8000c0e:	3708      	adds	r7, #8
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	2000008b 	.word	0x2000008b
 8000c18:	2000008c 	.word	0x2000008c
 8000c1c:	20000088 	.word	0x20000088
 8000c20:	20000089 	.word	0x20000089
 8000c24:	2000008a 	.word	0x2000008a
 8000c28:	20000000 	.word	0x20000000
 8000c2c:	20000008 	.word	0x20000008

08000c30 <HD44780_Clear>:

void HD44780_Clear()
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8000c34:	2001      	movs	r0, #1
 8000c36:	f000 f898 	bl	8000d6a <SendCommand>
  DelayUS(2000);
 8000c3a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000c3e:	f000 f947 	bl	8000ed0 <DelayUS>
}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <HD44780_Home>:

void HD44780_Home()
{
 8000c46:	b580      	push	{r7, lr}
 8000c48:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8000c4a:	2002      	movs	r0, #2
 8000c4c:	f000 f88d 	bl	8000d6a <SendCommand>
  DelayUS(2000);
 8000c50:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000c54:	f000 f93c 	bl	8000ed0 <DelayUS>
}
 8000c58:	bf00      	nop
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8000c5c:	b590      	push	{r4, r7, lr}
 8000c5e:	b087      	sub	sp, #28
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	460a      	mov	r2, r1
 8000c66:	71fb      	strb	r3, [r7, #7]
 8000c68:	4613      	mov	r3, r2
 8000c6a:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000c6c:	4b12      	ldr	r3, [pc, #72]	@ (8000cb8 <HD44780_SetCursor+0x5c>)
 8000c6e:	f107 0408 	add.w	r4, r7, #8
 8000c72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8000c78:	4b10      	ldr	r3, [pc, #64]	@ (8000cbc <HD44780_SetCursor+0x60>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	79ba      	ldrb	r2, [r7, #6]
 8000c7e:	429a      	cmp	r2, r3
 8000c80:	d303      	bcc.n	8000c8a <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 8000c82:	4b0e      	ldr	r3, [pc, #56]	@ (8000cbc <HD44780_SetCursor+0x60>)
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	3b01      	subs	r3, #1
 8000c88:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8000c8a:	79bb      	ldrb	r3, [r7, #6]
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	3318      	adds	r3, #24
 8000c90:	443b      	add	r3, r7
 8000c92:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000c96:	b2da      	uxtb	r2, r3
 8000c98:	79fb      	ldrb	r3, [r7, #7]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	b25b      	sxtb	r3, r3
 8000ca0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000ca4:	b25b      	sxtb	r3, r3
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f000 f85e 	bl	8000d6a <SendCommand>
}
 8000cae:	bf00      	nop
 8000cb0:	371c      	adds	r7, #28
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd90      	pop	{r4, r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	08005458 	.word	0x08005458
 8000cbc:	2000008b 	.word	0x2000008b

08000cc0 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8000cc4:	4b08      	ldr	r3, [pc, #32]	@ (8000ce8 <HD44780_Display+0x28>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	f043 0304 	orr.w	r3, r3, #4
 8000ccc:	b2da      	uxtb	r2, r3
 8000cce:	4b06      	ldr	r3, [pc, #24]	@ (8000ce8 <HD44780_Display+0x28>)
 8000cd0:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000cd2:	4b05      	ldr	r3, [pc, #20]	@ (8000ce8 <HD44780_Display+0x28>)
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	f043 0308 	orr.w	r3, r3, #8
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f000 f844 	bl	8000d6a <SendCommand>
}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20000089 	.word	0x20000089

08000cec <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	6039      	str	r1, [r7, #0]
 8000cf6:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	f003 0307 	and.w	r3, r3, #7
 8000cfe:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8000d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d04:	00db      	lsls	r3, r3, #3
 8000d06:	b25b      	sxtb	r3, r3
 8000d08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d0c:	b25b      	sxtb	r3, r3
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	4618      	mov	r0, r3
 8000d12:	f000 f82a 	bl	8000d6a <SendCommand>
  for (int i=0; i<8; i++)
 8000d16:	2300      	movs	r3, #0
 8000d18:	60fb      	str	r3, [r7, #12]
 8000d1a:	e009      	b.n	8000d30 <HD44780_CreateSpecialChar+0x44>
  {
    SendChar(charmap[i]);
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	683a      	ldr	r2, [r7, #0]
 8000d20:	4413      	add	r3, r2
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	4618      	mov	r0, r3
 8000d26:	f000 f82e 	bl	8000d86 <SendChar>
  for (int i=0; i<8; i++)
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	2b07      	cmp	r3, #7
 8000d34:	ddf2      	ble.n	8000d1c <HD44780_CreateSpecialChar+0x30>
  }
}
 8000d36:	bf00      	nop
 8000d38:	bf00      	nop
 8000d3a:	3710      	adds	r7, #16
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 8000d48:	e006      	b.n	8000d58 <HD44780_PrintStr+0x18>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	1c5a      	adds	r2, r3, #1
 8000d4e:	607a      	str	r2, [r7, #4]
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	4618      	mov	r0, r3
 8000d54:	f000 f817 	bl	8000d86 <SendChar>
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d1f4      	bne.n	8000d4a <HD44780_PrintStr+0xa>
}
 8000d60:	bf00      	nop
 8000d62:	bf00      	nop
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b082      	sub	sp, #8
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	4603      	mov	r3, r0
 8000d72:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8000d74:	79fb      	ldrb	r3, [r7, #7]
 8000d76:	2100      	movs	r1, #0
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f000 f812 	bl	8000da2 <Send>
}
 8000d7e:	bf00      	nop
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <SendChar>:

static void SendChar(uint8_t ch)
{
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b082      	sub	sp, #8
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8000d90:	79fb      	ldrb	r3, [r7, #7]
 8000d92:	2101      	movs	r1, #1
 8000d94:	4618      	mov	r0, r3
 8000d96:	f000 f804 	bl	8000da2 <Send>
}
 8000d9a:	bf00      	nop
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}

08000da2 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8000da2:	b580      	push	{r7, lr}
 8000da4:	b084      	sub	sp, #16
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	4603      	mov	r3, r0
 8000daa:	460a      	mov	r2, r1
 8000dac:	71fb      	strb	r3, [r7, #7]
 8000dae:	4613      	mov	r3, r2
 8000db0:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8000db2:	79fb      	ldrb	r3, [r7, #7]
 8000db4:	f023 030f 	bic.w	r3, r3, #15
 8000db8:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8000dba:	79fb      	ldrb	r3, [r7, #7]
 8000dbc:	011b      	lsls	r3, r3, #4
 8000dbe:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8000dc0:	7bfa      	ldrb	r2, [r7, #15]
 8000dc2:	79bb      	ldrb	r3, [r7, #6]
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f000 f80b 	bl	8000de4 <Write4Bits>
  Write4Bits((lownib)|mode);
 8000dce:	7bba      	ldrb	r2, [r7, #14]
 8000dd0:	79bb      	ldrb	r3, [r7, #6]
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f000 f804 	bl	8000de4 <Write4Bits>
}
 8000ddc:	bf00      	nop
 8000dde:	3710      	adds	r7, #16
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8000dee:	79fb      	ldrb	r3, [r7, #7]
 8000df0:	4618      	mov	r0, r3
 8000df2:	f000 f809 	bl	8000e08 <ExpanderWrite>
  PulseEnable(value);
 8000df6:	79fb      	ldrb	r3, [r7, #7]
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f000 f821 	bl	8000e40 <PulseEnable>
}
 8000dfe:	bf00      	nop
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
	...

08000e08 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b086      	sub	sp, #24
 8000e0c:	af02      	add	r7, sp, #8
 8000e0e:	4603      	mov	r3, r0
 8000e10:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8000e12:	4b09      	ldr	r3, [pc, #36]	@ (8000e38 <ExpanderWrite+0x30>)
 8000e14:	781a      	ldrb	r2, [r3, #0]
 8000e16:	79fb      	ldrb	r3, [r7, #7]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8000e1e:	f107 020f 	add.w	r2, r7, #15
 8000e22:	230a      	movs	r3, #10
 8000e24:	9300      	str	r3, [sp, #0]
 8000e26:	2301      	movs	r3, #1
 8000e28:	214e      	movs	r1, #78	@ 0x4e
 8000e2a:	4804      	ldr	r0, [pc, #16]	@ (8000e3c <ExpanderWrite+0x34>)
 8000e2c:	f001 faa2 	bl	8002374 <HAL_I2C_Master_Transmit>
}
 8000e30:	bf00      	nop
 8000e32:	3710      	adds	r7, #16
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	2000008c 	.word	0x2000008c
 8000e3c:	20000090 	.word	0x20000090

08000e40 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 8000e4a:	79fb      	ldrb	r3, [r7, #7]
 8000e4c:	f043 0304 	orr.w	r3, r3, #4
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	4618      	mov	r0, r3
 8000e54:	f7ff ffd8 	bl	8000e08 <ExpanderWrite>
  DelayUS(20);
 8000e58:	2014      	movs	r0, #20
 8000e5a:	f000 f839 	bl	8000ed0 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8000e5e:	79fb      	ldrb	r3, [r7, #7]
 8000e60:	f023 0304 	bic.w	r3, r3, #4
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff ffce 	bl	8000e08 <ExpanderWrite>
  DelayUS(20);
 8000e6c:	2014      	movs	r0, #20
 8000e6e:	f000 f82f 	bl	8000ed0 <DelayUS>
}
 8000e72:	bf00      	nop
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
	...

08000e7c <DelayInit>:

static void DelayInit(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8000e80:	4b11      	ldr	r3, [pc, #68]	@ (8000ec8 <DelayInit+0x4c>)
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	4a10      	ldr	r2, [pc, #64]	@ (8000ec8 <DelayInit+0x4c>)
 8000e86:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000e8a:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8000e8c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec8 <DelayInit+0x4c>)
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	4a0d      	ldr	r2, [pc, #52]	@ (8000ec8 <DelayInit+0x4c>)
 8000e92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000e96:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000e98:	4b0c      	ldr	r3, [pc, #48]	@ (8000ecc <DelayInit+0x50>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a0b      	ldr	r2, [pc, #44]	@ (8000ecc <DelayInit+0x50>)
 8000e9e:	f023 0301 	bic.w	r3, r3, #1
 8000ea2:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000ea4:	4b09      	ldr	r3, [pc, #36]	@ (8000ecc <DelayInit+0x50>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a08      	ldr	r2, [pc, #32]	@ (8000ecc <DelayInit+0x50>)
 8000eaa:	f043 0301 	orr.w	r3, r3, #1
 8000eae:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8000eb0:	4b06      	ldr	r3, [pc, #24]	@ (8000ecc <DelayInit+0x50>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8000eb6:	bf00      	nop
  __ASM volatile ("NOP");
 8000eb8:	bf00      	nop
  __ASM volatile ("NOP");
 8000eba:	bf00      	nop
}
 8000ebc:	bf00      	nop
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	e000edf0 	.word	0xe000edf0
 8000ecc:	e0001000 	.word	0xe0001000

08000ed0 <DelayUS>:

static void DelayUS(uint32_t us) {
 8000ed0:	b480      	push	{r7}
 8000ed2:	b087      	sub	sp, #28
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8000ed8:	4b0e      	ldr	r3, [pc, #56]	@ (8000f14 <DelayUS+0x44>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a0e      	ldr	r2, [pc, #56]	@ (8000f18 <DelayUS+0x48>)
 8000ede:	fba2 2303 	umull	r2, r3, r2, r3
 8000ee2:	0c9a      	lsrs	r2, r3, #18
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	fb02 f303 	mul.w	r3, r2, r3
 8000eea:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8000eec:	4b0b      	ldr	r3, [pc, #44]	@ (8000f1c <DelayUS+0x4c>)
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8000ef2:	4b0a      	ldr	r3, [pc, #40]	@ (8000f1c <DelayUS+0x4c>)
 8000ef4:	685a      	ldr	r2, [r3, #4]
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	1ad3      	subs	r3, r2, r3
 8000efa:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	697a      	ldr	r2, [r7, #20]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	d8f6      	bhi.n	8000ef2 <DelayUS+0x22>
}
 8000f04:	bf00      	nop
 8000f06:	bf00      	nop
 8000f08:	371c      	adds	r7, #28
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	20000010 	.word	0x20000010
 8000f18:	431bde83 	.word	0x431bde83
 8000f1c:	e0001000 	.word	0xe0001000

08000f20 <SaveLog>:
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_I2C1_Init(void);
static void MX_SPI1_Init(void);
/* USER CODE BEGIN PFP */
void SaveLog(const char* name, RTC_Time* rtc_time) {
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	6039      	str	r1, [r7, #0]
    if (entryCount < MAX_ENTRIES) {
 8000f2a:	4b3a      	ldr	r3, [pc, #232]	@ (8001014 <SaveLog+0xf4>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	2b63      	cmp	r3, #99	@ 0x63
 8000f30:	d86c      	bhi.n	800100c <SaveLog+0xec>
        // Copy the name (ensure it's null-terminated)
        strncpy(flashEntries[entryCount].name, name, NAME_LENGTH - 1);
 8000f32:	4b38      	ldr	r3, [pc, #224]	@ (8001014 <SaveLog+0xf4>)
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	461a      	mov	r2, r3
 8000f38:	4613      	mov	r3, r2
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	4413      	add	r3, r2
 8000f3e:	00da      	lsls	r2, r3, #3
 8000f40:	1ad2      	subs	r2, r2, r3
 8000f42:	4b35      	ldr	r3, [pc, #212]	@ (8001018 <SaveLog+0xf8>)
 8000f44:	4413      	add	r3, r2
 8000f46:	220f      	movs	r2, #15
 8000f48:	6879      	ldr	r1, [r7, #4]
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f003 fdee 	bl	8004b2c <strncpy>
        flashEntries[entryCount].name[NAME_LENGTH - 1] = '\0';
 8000f50:	4b30      	ldr	r3, [pc, #192]	@ (8001014 <SaveLog+0xf4>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	461a      	mov	r2, r3
 8000f56:	4930      	ldr	r1, [pc, #192]	@ (8001018 <SaveLog+0xf8>)
 8000f58:	4613      	mov	r3, r2
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	4413      	add	r3, r2
 8000f5e:	00da      	lsls	r2, r3, #3
 8000f60:	1ad2      	subs	r2, r2, r3
 8000f62:	188b      	adds	r3, r1, r2
 8000f64:	330f      	adds	r3, #15
 8000f66:	2200      	movs	r2, #0
 8000f68:	701a      	strb	r2, [r3, #0]

        // Save time fields
        flashEntries[entryCount].time.hours = rtc_time->hours;
 8000f6a:	4b2a      	ldr	r3, [pc, #168]	@ (8001014 <SaveLog+0xf4>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	461a      	mov	r2, r3
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	7898      	ldrb	r0, [r3, #2]
 8000f74:	4928      	ldr	r1, [pc, #160]	@ (8001018 <SaveLog+0xf8>)
 8000f76:	4613      	mov	r3, r2
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	4413      	add	r3, r2
 8000f7c:	00da      	lsls	r2, r3, #3
 8000f7e:	1ad2      	subs	r2, r2, r3
 8000f80:	188b      	adds	r3, r1, r2
 8000f82:	3310      	adds	r3, #16
 8000f84:	4602      	mov	r2, r0
 8000f86:	701a      	strb	r2, [r3, #0]
        flashEntries[entryCount].time.minutes = rtc_time->minutes;
 8000f88:	4b22      	ldr	r3, [pc, #136]	@ (8001014 <SaveLog+0xf4>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	7858      	ldrb	r0, [r3, #1]
 8000f92:	4921      	ldr	r1, [pc, #132]	@ (8001018 <SaveLog+0xf8>)
 8000f94:	4613      	mov	r3, r2
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	4413      	add	r3, r2
 8000f9a:	00da      	lsls	r2, r3, #3
 8000f9c:	1ad2      	subs	r2, r2, r3
 8000f9e:	188b      	adds	r3, r1, r2
 8000fa0:	3311      	adds	r3, #17
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	701a      	strb	r2, [r3, #0]
        flashEntries[entryCount].time.seconds = rtc_time->seconds;
 8000fa6:	4b1b      	ldr	r3, [pc, #108]	@ (8001014 <SaveLog+0xf4>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	461a      	mov	r2, r3
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	7818      	ldrb	r0, [r3, #0]
 8000fb0:	4919      	ldr	r1, [pc, #100]	@ (8001018 <SaveLog+0xf8>)
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	4413      	add	r3, r2
 8000fb8:	00da      	lsls	r2, r3, #3
 8000fba:	1ad2      	subs	r2, r2, r3
 8000fbc:	188b      	adds	r3, r1, r2
 8000fbe:	3312      	adds	r3, #18
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	701a      	strb	r2, [r3, #0]
        flashEntries[entryCount].time.date = rtc_time->date;
 8000fc4:	4b13      	ldr	r3, [pc, #76]	@ (8001014 <SaveLog+0xf4>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	461a      	mov	r2, r3
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	7918      	ldrb	r0, [r3, #4]
 8000fce:	4912      	ldr	r1, [pc, #72]	@ (8001018 <SaveLog+0xf8>)
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	4413      	add	r3, r2
 8000fd6:	00da      	lsls	r2, r3, #3
 8000fd8:	1ad2      	subs	r2, r2, r3
 8000fda:	188b      	adds	r3, r1, r2
 8000fdc:	3313      	adds	r3, #19
 8000fde:	4602      	mov	r2, r0
 8000fe0:	701a      	strb	r2, [r3, #0]
        flashEntries[entryCount].time.month = rtc_time->month;
 8000fe2:	4b0c      	ldr	r3, [pc, #48]	@ (8001014 <SaveLog+0xf4>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	7958      	ldrb	r0, [r3, #5]
 8000fec:	490a      	ldr	r1, [pc, #40]	@ (8001018 <SaveLog+0xf8>)
 8000fee:	4613      	mov	r3, r2
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	4413      	add	r3, r2
 8000ff4:	00da      	lsls	r2, r3, #3
 8000ff6:	1ad2      	subs	r2, r2, r3
 8000ff8:	188b      	adds	r3, r1, r2
 8000ffa:	3314      	adds	r3, #20
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	701a      	strb	r2, [r3, #0]

        entryCount++;
 8001000:	4b04      	ldr	r3, [pc, #16]	@ (8001014 <SaveLog+0xf4>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	3301      	adds	r3, #1
 8001006:	b2da      	uxtb	r2, r3
 8001008:	4b02      	ldr	r3, [pc, #8]	@ (8001014 <SaveLog+0xf4>)
 800100a:	701a      	strb	r2, [r3, #0]
    }
}
 800100c:	bf00      	nop
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	200009d4 	.word	0x200009d4
 8001018:	200001a0 	.word	0x200001a0

0800101c <ShowEntry>:

void ShowEntry(void)
{
 800101c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800101e:	b08d      	sub	sp, #52	@ 0x34
 8001020:	af04      	add	r7, sp, #16
	HD44780_Clear();
 8001022:	f7ff fe05 	bl	8000c30 <HD44780_Clear>
	HD44780_SetCursor(0,0);
 8001026:	2100      	movs	r1, #0
 8001028:	2000      	movs	r0, #0
 800102a:	f7ff fe17 	bl	8000c5c <HD44780_SetCursor>
	HD44780_PrintStr("Showing entries");
 800102e:	485e      	ldr	r0, [pc, #376]	@ (80011a8 <ShowEntry+0x18c>)
 8001030:	f7ff fe86 	bl	8000d40 <HD44780_PrintStr>
	HAL_Delay(2000);
 8001034:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001038:	f000 fd88 	bl	8001b4c <HAL_Delay>
    if (entryCount == 0) {
 800103c:	4b5b      	ldr	r3, [pc, #364]	@ (80011ac <ShowEntry+0x190>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d109      	bne.n	8001058 <ShowEntry+0x3c>
        HD44780_Clear();
 8001044:	f7ff fdf4 	bl	8000c30 <HD44780_Clear>
        HD44780_PrintStr("No entries yet");
 8001048:	4859      	ldr	r0, [pc, #356]	@ (80011b0 <ShowEntry+0x194>)
 800104a:	f7ff fe79 	bl	8000d40 <HD44780_PrintStr>
        HAL_Delay(2000);
 800104e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001052:	f000 fd7b 	bl	8001b4c <HAL_Delay>
        return;
 8001056:	e0a3      	b.n	80011a0 <ShowEntry+0x184>
    }

    uint8_t index = 0;
 8001058:	2300      	movs	r3, #0
 800105a:	77fb      	strb	r3, [r7, #31]

    while (1) {
        // Show entry
        HD44780_Clear();
 800105c:	f7ff fde8 	bl	8000c30 <HD44780_Clear>
        HD44780_SetCursor(0, 0);
 8001060:	2100      	movs	r1, #0
 8001062:	2000      	movs	r0, #0
 8001064:	f7ff fdfa 	bl	8000c5c <HD44780_SetCursor>
        HD44780_PrintStr(flashEntries[index].name);
 8001068:	7ffa      	ldrb	r2, [r7, #31]
 800106a:	4613      	mov	r3, r2
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	4413      	add	r3, r2
 8001070:	00da      	lsls	r2, r3, #3
 8001072:	1ad2      	subs	r2, r2, r3
 8001074:	4b4f      	ldr	r3, [pc, #316]	@ (80011b4 <ShowEntry+0x198>)
 8001076:	4413      	add	r3, r2
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff fe61 	bl	8000d40 <HD44780_PrintStr>

        HD44780_SetCursor(0, 1);
 800107e:	2101      	movs	r1, #1
 8001080:	2000      	movs	r0, #0
 8001082:	f7ff fdeb 	bl	8000c5c <HD44780_SetCursor>
        char timeBuf[17];
        snprintf(timeBuf, sizeof(timeBuf), "%02d:%02d:%02d %02d/%02d",
                 flashEntries[index].time.hours,
 8001086:	7ffa      	ldrb	r2, [r7, #31]
 8001088:	494a      	ldr	r1, [pc, #296]	@ (80011b4 <ShowEntry+0x198>)
 800108a:	4613      	mov	r3, r2
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	4413      	add	r3, r2
 8001090:	00da      	lsls	r2, r3, #3
 8001092:	1ad2      	subs	r2, r2, r3
 8001094:	188b      	adds	r3, r1, r2
 8001096:	3310      	adds	r3, #16
 8001098:	781b      	ldrb	r3, [r3, #0]
        snprintf(timeBuf, sizeof(timeBuf), "%02d:%02d:%02d %02d/%02d",
 800109a:	469c      	mov	ip, r3
                 flashEntries[index].time.minutes,
 800109c:	7ffa      	ldrb	r2, [r7, #31]
 800109e:	4945      	ldr	r1, [pc, #276]	@ (80011b4 <ShowEntry+0x198>)
 80010a0:	4613      	mov	r3, r2
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	4413      	add	r3, r2
 80010a6:	00da      	lsls	r2, r3, #3
 80010a8:	1ad2      	subs	r2, r2, r3
 80010aa:	188b      	adds	r3, r1, r2
 80010ac:	3311      	adds	r3, #17
 80010ae:	781b      	ldrb	r3, [r3, #0]
        snprintf(timeBuf, sizeof(timeBuf), "%02d:%02d:%02d %02d/%02d",
 80010b0:	461c      	mov	r4, r3
                 flashEntries[index].time.seconds,
 80010b2:	7ffa      	ldrb	r2, [r7, #31]
 80010b4:	493f      	ldr	r1, [pc, #252]	@ (80011b4 <ShowEntry+0x198>)
 80010b6:	4613      	mov	r3, r2
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	4413      	add	r3, r2
 80010bc:	00da      	lsls	r2, r3, #3
 80010be:	1ad2      	subs	r2, r2, r3
 80010c0:	188b      	adds	r3, r1, r2
 80010c2:	3312      	adds	r3, #18
 80010c4:	781b      	ldrb	r3, [r3, #0]
        snprintf(timeBuf, sizeof(timeBuf), "%02d:%02d:%02d %02d/%02d",
 80010c6:	461d      	mov	r5, r3
                 flashEntries[index].time.date,
 80010c8:	7ffa      	ldrb	r2, [r7, #31]
 80010ca:	493a      	ldr	r1, [pc, #232]	@ (80011b4 <ShowEntry+0x198>)
 80010cc:	4613      	mov	r3, r2
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	4413      	add	r3, r2
 80010d2:	00da      	lsls	r2, r3, #3
 80010d4:	1ad2      	subs	r2, r2, r3
 80010d6:	188b      	adds	r3, r1, r2
 80010d8:	3313      	adds	r3, #19
 80010da:	781b      	ldrb	r3, [r3, #0]
        snprintf(timeBuf, sizeof(timeBuf), "%02d:%02d:%02d %02d/%02d",
 80010dc:	461e      	mov	r6, r3
                 flashEntries[index].time.month);
 80010de:	7ffa      	ldrb	r2, [r7, #31]
 80010e0:	4934      	ldr	r1, [pc, #208]	@ (80011b4 <ShowEntry+0x198>)
 80010e2:	4613      	mov	r3, r2
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	4413      	add	r3, r2
 80010e8:	00da      	lsls	r2, r3, #3
 80010ea:	1ad2      	subs	r2, r2, r3
 80010ec:	188b      	adds	r3, r1, r2
 80010ee:	3314      	adds	r3, #20
 80010f0:	781b      	ldrb	r3, [r3, #0]
        snprintf(timeBuf, sizeof(timeBuf), "%02d:%02d:%02d %02d/%02d",
 80010f2:	1d38      	adds	r0, r7, #4
 80010f4:	9303      	str	r3, [sp, #12]
 80010f6:	9602      	str	r6, [sp, #8]
 80010f8:	9501      	str	r5, [sp, #4]
 80010fa:	9400      	str	r4, [sp, #0]
 80010fc:	4663      	mov	r3, ip
 80010fe:	4a2e      	ldr	r2, [pc, #184]	@ (80011b8 <ShowEntry+0x19c>)
 8001100:	2111      	movs	r1, #17
 8001102:	f003 fcd5 	bl	8004ab0 <sniprintf>
        HD44780_PrintStr(timeBuf);
 8001106:	1d3b      	adds	r3, r7, #4
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff fe19 	bl	8000d40 <HD44780_PrintStr>

        // Wait for button press
        uint32_t timeout = HAL_GetTick() + 5000; // 5 seconds timeout
 800110e:	f000 fd11 	bl	8001b34 <HAL_GetTick>
 8001112:	4603      	mov	r3, r0
 8001114:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 8001118:	3308      	adds	r3, #8
 800111a:	61bb      	str	r3, [r7, #24]
        while (HAL_GetTick() < timeout) {
 800111c:	e02a      	b.n	8001174 <ShowEntry+0x158>
            if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET) { // Next
 800111e:	2101      	movs	r1, #1
 8001120:	4826      	ldr	r0, [pc, #152]	@ (80011bc <ShowEntry+0x1a0>)
 8001122:	f000 ffb1 	bl	8002088 <HAL_GPIO_ReadPin>
 8001126:	4603      	mov	r3, r0
 8001128:	2b01      	cmp	r3, #1
 800112a:	d10d      	bne.n	8001148 <ShowEntry+0x12c>
                HAL_Delay(200);  // Debounce
 800112c:	20c8      	movs	r0, #200	@ 0xc8
 800112e:	f000 fd0d 	bl	8001b4c <HAL_Delay>
                index = (index + 1) % entryCount;
 8001132:	7ffb      	ldrb	r3, [r7, #31]
 8001134:	3301      	adds	r3, #1
 8001136:	4a1d      	ldr	r2, [pc, #116]	@ (80011ac <ShowEntry+0x190>)
 8001138:	7812      	ldrb	r2, [r2, #0]
 800113a:	fb93 f1f2 	sdiv	r1, r3, r2
 800113e:	fb01 f202 	mul.w	r2, r1, r2
 8001142:	1a9b      	subs	r3, r3, r2
 8001144:	77fb      	strb	r3, [r7, #31]
                break;
 8001146:	e01b      	b.n	8001180 <ShowEntry+0x164>
            }

            if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_SET) { // Back
 8001148:	2102      	movs	r1, #2
 800114a:	481c      	ldr	r0, [pc, #112]	@ (80011bc <ShowEntry+0x1a0>)
 800114c:	f000 ff9c 	bl	8002088 <HAL_GPIO_ReadPin>
 8001150:	4603      	mov	r3, r0
 8001152:	2b01      	cmp	r3, #1
 8001154:	d10e      	bne.n	8001174 <ShowEntry+0x158>
                HAL_Delay(200);  // Debounce
 8001156:	20c8      	movs	r0, #200	@ 0xc8
 8001158:	f000 fcf8 	bl	8001b4c <HAL_Delay>
                if (index == 0) {
 800115c:	7ffb      	ldrb	r3, [r7, #31]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d104      	bne.n	800116c <ShowEntry+0x150>
                    index = entryCount - 1;
 8001162:	4b12      	ldr	r3, [pc, #72]	@ (80011ac <ShowEntry+0x190>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	3b01      	subs	r3, #1
 8001168:	77fb      	strb	r3, [r7, #31]
                } else {
                    index--;
                }
                break;
 800116a:	e009      	b.n	8001180 <ShowEntry+0x164>
                    index--;
 800116c:	7ffb      	ldrb	r3, [r7, #31]
 800116e:	3b01      	subs	r3, #1
 8001170:	77fb      	strb	r3, [r7, #31]
                break;
 8001172:	e005      	b.n	8001180 <ShowEntry+0x164>
        while (HAL_GetTick() < timeout) {
 8001174:	f000 fcde 	bl	8001b34 <HAL_GetTick>
 8001178:	4602      	mov	r2, r0
 800117a:	69bb      	ldr	r3, [r7, #24]
 800117c:	4293      	cmp	r3, r2
 800117e:	d8ce      	bhi.n	800111e <ShowEntry+0x102>
            }
        }

        // Exit loop if no buttons pressed for 10 seconds
        if (HAL_GetTick() >= timeout) {
 8001180:	f000 fcd8 	bl	8001b34 <HAL_GetTick>
 8001184:	4602      	mov	r2, r0
 8001186:	69bb      	ldr	r3, [r7, #24]
 8001188:	4293      	cmp	r3, r2
 800118a:	f63f af67 	bhi.w	800105c <ShowEntry+0x40>
            HD44780_Clear();
 800118e:	f7ff fd4f 	bl	8000c30 <HD44780_Clear>
            HD44780_PrintStr("Exiting...");
 8001192:	480b      	ldr	r0, [pc, #44]	@ (80011c0 <ShowEntry+0x1a4>)
 8001194:	f7ff fdd4 	bl	8000d40 <HD44780_PrintStr>
            HAL_Delay(1000);
 8001198:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800119c:	f000 fcd6 	bl	8001b4c <HAL_Delay>
            break;
        }
    }
}
 80011a0:	3724      	adds	r7, #36	@ 0x24
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011a6:	bf00      	nop
 80011a8:	08005468 	.word	0x08005468
 80011ac:	200009d4 	.word	0x200009d4
 80011b0:	08005478 	.word	0x08005478
 80011b4:	200001a0 	.word	0x200001a0
 80011b8:	08005488 	.word	0x08005488
 80011bc:	40020000 	.word	0x40020000
 80011c0:	080054a4 	.word	0x080054a4

080011c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b08a      	sub	sp, #40	@ 0x28
 80011c8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011ca:	f000 fc4d 	bl	8001a68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011ce:	f000 f931 	bl	8001434 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011d2:	f000 fa2b 	bl	800162c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80011d6:	f000 f9ff 	bl	80015d8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80011da:	f000 f999 	bl	8001510 <MX_I2C1_Init>
  MX_SPI1_Init();
 80011de:	f000 f9c5 	bl	800156c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  MFRC522_Init();
 80011e2:	f7ff fab3 	bl	800074c <MFRC522_Init>
  HD44780_Init(2);
 80011e6:	2002      	movs	r0, #2
 80011e8:	f7ff fc9e 	bl	8000b28 <HD44780_Init>

  RTC_Time rtc_time;
  char timeStr[17];

  if (!DS1307_Init(&hi2c1)) {
 80011ec:	4886      	ldr	r0, [pc, #536]	@ (8001408 <main+0x244>)
 80011ee:	f7ff fc21 	bl	8000a34 <DS1307_Init>
 80011f2:	4603      	mov	r3, r0
 80011f4:	f083 0301 	eor.w	r3, r3, #1
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d008      	beq.n	8001210 <main+0x4c>
      HD44780_Clear();
 80011fe:	f7ff fd17 	bl	8000c30 <HD44780_Clear>
      HD44780_PrintStr("RTC Not Found");
 8001202:	4882      	ldr	r0, [pc, #520]	@ (800140c <main+0x248>)
 8001204:	f7ff fd9c 	bl	8000d40 <HD44780_PrintStr>
      HAL_Delay(2000);
 8001208:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800120c:	f000 fc9e 	bl	8001b4c <HAL_Delay>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //Scan for the card ID
	  status = MFRC522_Request(PICC_REQIDL, str);
 8001210:	497f      	ldr	r1, [pc, #508]	@ (8001410 <main+0x24c>)
 8001212:	2026      	movs	r0, #38	@ 0x26
 8001214:	f7ff fb93 	bl	800093e <MFRC522_Request>
 8001218:	4603      	mov	r3, r0
 800121a:	461a      	mov	r2, r3
 800121c:	4b7d      	ldr	r3, [pc, #500]	@ (8001414 <main+0x250>)
 800121e:	701a      	strb	r2, [r3, #0]
	  status = MFRC522_Anticoll(str);
 8001220:	487b      	ldr	r0, [pc, #492]	@ (8001410 <main+0x24c>)
 8001222:	f7ff fbb1 	bl	8000988 <MFRC522_Anticoll>
 8001226:	4603      	mov	r3, r0
 8001228:	461a      	mov	r2, r3
 800122a:	4b7a      	ldr	r3, [pc, #488]	@ (8001414 <main+0x250>)
 800122c:	701a      	strb	r2, [r3, #0]
	  memcpy(sNum, str, 5);
 800122e:	4b7a      	ldr	r3, [pc, #488]	@ (8001418 <main+0x254>)
 8001230:	4a77      	ldr	r2, [pc, #476]	@ (8001410 <main+0x24c>)
 8001232:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001236:	6018      	str	r0, [r3, #0]
 8001238:	3304      	adds	r3, #4
 800123a:	7019      	strb	r1, [r3, #0]
	  HAL_Delay(200);
 800123c:	20c8      	movs	r0, #200	@ 0xc8
 800123e:	f000 fc85 	bl	8001b4c <HAL_Delay>

	  if (DS1307_GetTime(&hi2c1, &rtc_time)) {
 8001242:	f107 0318 	add.w	r3, r7, #24
 8001246:	4619      	mov	r1, r3
 8001248:	486f      	ldr	r0, [pc, #444]	@ (8001408 <main+0x244>)
 800124a:	f7ff fc07 	bl	8000a5c <DS1307_GetTime>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d01a      	beq.n	800128a <main+0xc6>
	      snprintf(timeStr, sizeof(timeStr), "%02d:%02d", rtc_time.hours, rtc_time.minutes);
 8001254:	7ebb      	ldrb	r3, [r7, #26]
 8001256:	461a      	mov	r2, r3
 8001258:	7e7b      	ldrb	r3, [r7, #25]
 800125a:	1d38      	adds	r0, r7, #4
 800125c:	9300      	str	r3, [sp, #0]
 800125e:	4613      	mov	r3, r2
 8001260:	4a6e      	ldr	r2, [pc, #440]	@ (800141c <main+0x258>)
 8001262:	2111      	movs	r1, #17
 8001264:	f003 fc24 	bl	8004ab0 <sniprintf>
	      HD44780_Clear();
 8001268:	f7ff fce2 	bl	8000c30 <HD44780_Clear>
	      HD44780_SetCursor(11, 0);
 800126c:	2100      	movs	r1, #0
 800126e:	200b      	movs	r0, #11
 8001270:	f7ff fcf4 	bl	8000c5c <HD44780_SetCursor>
	      HD44780_PrintStr(timeStr);
 8001274:	1d3b      	adds	r3, r7, #4
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff fd62 	bl	8000d40 <HD44780_PrintStr>
	      HD44780_SetCursor(0, 1);
 800127c:	2101      	movs	r1, #1
 800127e:	2000      	movs	r0, #0
 8001280:	f7ff fcec 	bl	8000c5c <HD44780_SetCursor>
	      HD44780_PrintStr("Please show card");
 8001284:	4866      	ldr	r0, [pc, #408]	@ (8001420 <main+0x25c>)
 8001286:	f7ff fd5b 	bl	8000d40 <HD44780_PrintStr>
	  }
	  if ((str[0] == 147) && (str[1] == 32) && (str[2] == 93) && (str[3] == 89) && (str[4] == 93)) {
 800128a:	4b61      	ldr	r3, [pc, #388]	@ (8001410 <main+0x24c>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	2b93      	cmp	r3, #147	@ 0x93
 8001290:	d11a      	bne.n	80012c8 <main+0x104>
 8001292:	4b5f      	ldr	r3, [pc, #380]	@ (8001410 <main+0x24c>)
 8001294:	785b      	ldrb	r3, [r3, #1]
 8001296:	2b20      	cmp	r3, #32
 8001298:	d116      	bne.n	80012c8 <main+0x104>
 800129a:	4b5d      	ldr	r3, [pc, #372]	@ (8001410 <main+0x24c>)
 800129c:	789b      	ldrb	r3, [r3, #2]
 800129e:	2b5d      	cmp	r3, #93	@ 0x5d
 80012a0:	d112      	bne.n	80012c8 <main+0x104>
 80012a2:	4b5b      	ldr	r3, [pc, #364]	@ (8001410 <main+0x24c>)
 80012a4:	78db      	ldrb	r3, [r3, #3]
 80012a6:	2b59      	cmp	r3, #89	@ 0x59
 80012a8:	d10e      	bne.n	80012c8 <main+0x104>
 80012aa:	4b59      	ldr	r3, [pc, #356]	@ (8001410 <main+0x24c>)
 80012ac:	791b      	ldrb	r3, [r3, #4]
 80012ae:	2b5d      	cmp	r3, #93	@ 0x5d
 80012b0:	d10a      	bne.n	80012c8 <main+0x104>
		  ShowEntry();
 80012b2:	f7ff feb3 	bl	800101c <ShowEntry>
		  HAL_Delay(10000);
 80012b6:	f242 7010 	movw	r0, #10000	@ 0x2710
 80012ba:	f000 fc47 	bl	8001b4c <HAL_Delay>
		  memset(str, 0, sizeof(str));
 80012be:	2210      	movs	r2, #16
 80012c0:	2100      	movs	r1, #0
 80012c2:	4853      	ldr	r0, [pc, #332]	@ (8001410 <main+0x24c>)
 80012c4:	f003 fc2a 	bl	8004b1c <memset>
	  }
	  if ((str[0] == 147) && (str[1] == 32) && (str[2] == 17) && (str[3] == 16) && (str[4] == 43)) {
 80012c8:	4b51      	ldr	r3, [pc, #324]	@ (8001410 <main+0x24c>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	2b93      	cmp	r3, #147	@ 0x93
 80012ce:	d12e      	bne.n	800132e <main+0x16a>
 80012d0:	4b4f      	ldr	r3, [pc, #316]	@ (8001410 <main+0x24c>)
 80012d2:	785b      	ldrb	r3, [r3, #1]
 80012d4:	2b20      	cmp	r3, #32
 80012d6:	d12a      	bne.n	800132e <main+0x16a>
 80012d8:	4b4d      	ldr	r3, [pc, #308]	@ (8001410 <main+0x24c>)
 80012da:	789b      	ldrb	r3, [r3, #2]
 80012dc:	2b11      	cmp	r3, #17
 80012de:	d126      	bne.n	800132e <main+0x16a>
 80012e0:	4b4b      	ldr	r3, [pc, #300]	@ (8001410 <main+0x24c>)
 80012e2:	78db      	ldrb	r3, [r3, #3]
 80012e4:	2b10      	cmp	r3, #16
 80012e6:	d122      	bne.n	800132e <main+0x16a>
 80012e8:	4b49      	ldr	r3, [pc, #292]	@ (8001410 <main+0x24c>)
 80012ea:	791b      	ldrb	r3, [r3, #4]
 80012ec:	2b2b      	cmp	r3, #43	@ 0x2b
 80012ee:	d11e      	bne.n	800132e <main+0x16a>
		  HD44780_Clear();
 80012f0:	f7ff fc9e 	bl	8000c30 <HD44780_Clear>
		  HD44780_SetCursor(0,0);
 80012f4:	2100      	movs	r1, #0
 80012f6:	2000      	movs	r0, #0
 80012f8:	f7ff fcb0 	bl	8000c5c <HD44780_SetCursor>
		  HD44780_PrintStr("Welcome");
 80012fc:	4849      	ldr	r0, [pc, #292]	@ (8001424 <main+0x260>)
 80012fe:	f7ff fd1f 	bl	8000d40 <HD44780_PrintStr>
		  HD44780_SetCursor(0,1);
 8001302:	2101      	movs	r1, #1
 8001304:	2000      	movs	r0, #0
 8001306:	f7ff fca9 	bl	8000c5c <HD44780_SetCursor>
		  HD44780_PrintStr("Fazli Kemal");
 800130a:	4847      	ldr	r0, [pc, #284]	@ (8001428 <main+0x264>)
 800130c:	f7ff fd18 	bl	8000d40 <HD44780_PrintStr>
		  SaveLog("Fazli Kemal", &rtc_time);
 8001310:	f107 0318 	add.w	r3, r7, #24
 8001314:	4619      	mov	r1, r3
 8001316:	4844      	ldr	r0, [pc, #272]	@ (8001428 <main+0x264>)
 8001318:	f7ff fe02 	bl	8000f20 <SaveLog>
		  HAL_Delay(2000);
 800131c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001320:	f000 fc14 	bl	8001b4c <HAL_Delay>
		  memset(str, 0, sizeof(str));
 8001324:	2210      	movs	r2, #16
 8001326:	2100      	movs	r1, #0
 8001328:	4839      	ldr	r0, [pc, #228]	@ (8001410 <main+0x24c>)
 800132a:	f003 fbf7 	bl	8004b1c <memset>
	  }
	  if ((str[0] == 147) && (str[1] == 32) && (str[2] == 143) && (str[3] == 204) && (str[4] == 61)) {
 800132e:	4b38      	ldr	r3, [pc, #224]	@ (8001410 <main+0x24c>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	2b93      	cmp	r3, #147	@ 0x93
 8001334:	d12e      	bne.n	8001394 <main+0x1d0>
 8001336:	4b36      	ldr	r3, [pc, #216]	@ (8001410 <main+0x24c>)
 8001338:	785b      	ldrb	r3, [r3, #1]
 800133a:	2b20      	cmp	r3, #32
 800133c:	d12a      	bne.n	8001394 <main+0x1d0>
 800133e:	4b34      	ldr	r3, [pc, #208]	@ (8001410 <main+0x24c>)
 8001340:	789b      	ldrb	r3, [r3, #2]
 8001342:	2b8f      	cmp	r3, #143	@ 0x8f
 8001344:	d126      	bne.n	8001394 <main+0x1d0>
 8001346:	4b32      	ldr	r3, [pc, #200]	@ (8001410 <main+0x24c>)
 8001348:	78db      	ldrb	r3, [r3, #3]
 800134a:	2bcc      	cmp	r3, #204	@ 0xcc
 800134c:	d122      	bne.n	8001394 <main+0x1d0>
 800134e:	4b30      	ldr	r3, [pc, #192]	@ (8001410 <main+0x24c>)
 8001350:	791b      	ldrb	r3, [r3, #4]
 8001352:	2b3d      	cmp	r3, #61	@ 0x3d
 8001354:	d11e      	bne.n	8001394 <main+0x1d0>
		  HD44780_Clear();
 8001356:	f7ff fc6b 	bl	8000c30 <HD44780_Clear>
		  HD44780_SetCursor(0,0);
 800135a:	2100      	movs	r1, #0
 800135c:	2000      	movs	r0, #0
 800135e:	f7ff fc7d 	bl	8000c5c <HD44780_SetCursor>
		  HD44780_PrintStr("Welcome");
 8001362:	4830      	ldr	r0, [pc, #192]	@ (8001424 <main+0x260>)
 8001364:	f7ff fcec 	bl	8000d40 <HD44780_PrintStr>
		  HD44780_SetCursor(0,1);
 8001368:	2101      	movs	r1, #1
 800136a:	2000      	movs	r0, #0
 800136c:	f7ff fc76 	bl	8000c5c <HD44780_SetCursor>
		  HD44780_PrintStr("Mevlut Akhan");
 8001370:	482e      	ldr	r0, [pc, #184]	@ (800142c <main+0x268>)
 8001372:	f7ff fce5 	bl	8000d40 <HD44780_PrintStr>
		  SaveLog("Mevlut Akhan", &rtc_time);
 8001376:	f107 0318 	add.w	r3, r7, #24
 800137a:	4619      	mov	r1, r3
 800137c:	482b      	ldr	r0, [pc, #172]	@ (800142c <main+0x268>)
 800137e:	f7ff fdcf 	bl	8000f20 <SaveLog>
		  HAL_Delay(2000);
 8001382:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001386:	f000 fbe1 	bl	8001b4c <HAL_Delay>
		  memset(str, 0, sizeof(str));
 800138a:	2210      	movs	r2, #16
 800138c:	2100      	movs	r1, #0
 800138e:	4820      	ldr	r0, [pc, #128]	@ (8001410 <main+0x24c>)
 8001390:	f003 fbc4 	bl	8004b1c <memset>
	  }
	  if ((str[0] == 147) && (str[1] == 32) && (str[2] == 106) && (str[3] == 204) && (str[4] == 4)) {
 8001394:	4b1e      	ldr	r3, [pc, #120]	@ (8001410 <main+0x24c>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	2b93      	cmp	r3, #147	@ 0x93
 800139a:	f47f af39 	bne.w	8001210 <main+0x4c>
 800139e:	4b1c      	ldr	r3, [pc, #112]	@ (8001410 <main+0x24c>)
 80013a0:	785b      	ldrb	r3, [r3, #1]
 80013a2:	2b20      	cmp	r3, #32
 80013a4:	f47f af34 	bne.w	8001210 <main+0x4c>
 80013a8:	4b19      	ldr	r3, [pc, #100]	@ (8001410 <main+0x24c>)
 80013aa:	789b      	ldrb	r3, [r3, #2]
 80013ac:	2b6a      	cmp	r3, #106	@ 0x6a
 80013ae:	f47f af2f 	bne.w	8001210 <main+0x4c>
 80013b2:	4b17      	ldr	r3, [pc, #92]	@ (8001410 <main+0x24c>)
 80013b4:	78db      	ldrb	r3, [r3, #3]
 80013b6:	2bcc      	cmp	r3, #204	@ 0xcc
 80013b8:	f47f af2a 	bne.w	8001210 <main+0x4c>
 80013bc:	4b14      	ldr	r3, [pc, #80]	@ (8001410 <main+0x24c>)
 80013be:	791b      	ldrb	r3, [r3, #4]
 80013c0:	2b04      	cmp	r3, #4
 80013c2:	f47f af25 	bne.w	8001210 <main+0x4c>
		  HD44780_Clear();
 80013c6:	f7ff fc33 	bl	8000c30 <HD44780_Clear>
		  HD44780_SetCursor(0,0);
 80013ca:	2100      	movs	r1, #0
 80013cc:	2000      	movs	r0, #0
 80013ce:	f7ff fc45 	bl	8000c5c <HD44780_SetCursor>
		  HD44780_PrintStr("Welcome");
 80013d2:	4814      	ldr	r0, [pc, #80]	@ (8001424 <main+0x260>)
 80013d4:	f7ff fcb4 	bl	8000d40 <HD44780_PrintStr>
		  HD44780_SetCursor(0,1);
 80013d8:	2101      	movs	r1, #1
 80013da:	2000      	movs	r0, #0
 80013dc:	f7ff fc3e 	bl	8000c5c <HD44780_SetCursor>
		  HD44780_PrintStr("Seren Hazal");
 80013e0:	4813      	ldr	r0, [pc, #76]	@ (8001430 <main+0x26c>)
 80013e2:	f7ff fcad 	bl	8000d40 <HD44780_PrintStr>
		  SaveLog("Seren Hazal", &rtc_time);
 80013e6:	f107 0318 	add.w	r3, r7, #24
 80013ea:	4619      	mov	r1, r3
 80013ec:	4810      	ldr	r0, [pc, #64]	@ (8001430 <main+0x26c>)
 80013ee:	f7ff fd97 	bl	8000f20 <SaveLog>
		  HAL_Delay(2000);
 80013f2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80013f6:	f000 fba9 	bl	8001b4c <HAL_Delay>
		  memset(str, 0, sizeof(str));
 80013fa:	2210      	movs	r2, #16
 80013fc:	2100      	movs	r1, #0
 80013fe:	4804      	ldr	r0, [pc, #16]	@ (8001410 <main+0x24c>)
 8001400:	f003 fb8c 	bl	8004b1c <memset>
	  status = MFRC522_Request(PICC_REQIDL, str);
 8001404:	e704      	b.n	8001210 <main+0x4c>
 8001406:	bf00      	nop
 8001408:	20000090 	.word	0x20000090
 800140c:	080054b0 	.word	0x080054b0
 8001410:	20000188 	.word	0x20000188
 8001414:	20000184 	.word	0x20000184
 8001418:	20000198 	.word	0x20000198
 800141c:	080054c0 	.word	0x080054c0
 8001420:	080054cc 	.word	0x080054cc
 8001424:	080054e0 	.word	0x080054e0
 8001428:	080054e8 	.word	0x080054e8
 800142c:	080054f4 	.word	0x080054f4
 8001430:	08005504 	.word	0x08005504

08001434 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b094      	sub	sp, #80	@ 0x50
 8001438:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800143a:	f107 031c 	add.w	r3, r7, #28
 800143e:	2234      	movs	r2, #52	@ 0x34
 8001440:	2100      	movs	r1, #0
 8001442:	4618      	mov	r0, r3
 8001444:	f003 fb6a 	bl	8004b1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001448:	f107 0308 	add.w	r3, r7, #8
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	605a      	str	r2, [r3, #4]
 8001452:	609a      	str	r2, [r3, #8]
 8001454:	60da      	str	r2, [r3, #12]
 8001456:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001458:	2300      	movs	r3, #0
 800145a:	607b      	str	r3, [r7, #4]
 800145c:	4b2a      	ldr	r3, [pc, #168]	@ (8001508 <SystemClock_Config+0xd4>)
 800145e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001460:	4a29      	ldr	r2, [pc, #164]	@ (8001508 <SystemClock_Config+0xd4>)
 8001462:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001466:	6413      	str	r3, [r2, #64]	@ 0x40
 8001468:	4b27      	ldr	r3, [pc, #156]	@ (8001508 <SystemClock_Config+0xd4>)
 800146a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800146c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001470:	607b      	str	r3, [r7, #4]
 8001472:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001474:	2300      	movs	r3, #0
 8001476:	603b      	str	r3, [r7, #0]
 8001478:	4b24      	ldr	r3, [pc, #144]	@ (800150c <SystemClock_Config+0xd8>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001480:	4a22      	ldr	r2, [pc, #136]	@ (800150c <SystemClock_Config+0xd8>)
 8001482:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001486:	6013      	str	r3, [r2, #0]
 8001488:	4b20      	ldr	r3, [pc, #128]	@ (800150c <SystemClock_Config+0xd8>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001490:	603b      	str	r3, [r7, #0]
 8001492:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001494:	2302      	movs	r3, #2
 8001496:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001498:	2301      	movs	r3, #1
 800149a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800149c:	2310      	movs	r3, #16
 800149e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014a0:	2302      	movs	r3, #2
 80014a2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014a4:	2300      	movs	r3, #0
 80014a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80014a8:	2310      	movs	r3, #16
 80014aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80014ac:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80014b0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80014b2:	2304      	movs	r3, #4
 80014b4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80014b6:	2302      	movs	r3, #2
 80014b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80014ba:	2302      	movs	r3, #2
 80014bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014be:	f107 031c 	add.w	r3, r7, #28
 80014c2:	4618      	mov	r0, r3
 80014c4:	f002 fa84 	bl	80039d0 <HAL_RCC_OscConfig>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80014ce:	f000 f923 	bl	8001718 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014d2:	230f      	movs	r3, #15
 80014d4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014d6:	2302      	movs	r3, #2
 80014d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014da:	2300      	movs	r3, #0
 80014dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014e4:	2300      	movs	r3, #0
 80014e6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014e8:	f107 0308 	add.w	r3, r7, #8
 80014ec:	2102      	movs	r1, #2
 80014ee:	4618      	mov	r0, r3
 80014f0:	f001 ff24 	bl	800333c <HAL_RCC_ClockConfig>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <SystemClock_Config+0xca>
  {
    Error_Handler();
 80014fa:	f000 f90d 	bl	8001718 <Error_Handler>
  }
}
 80014fe:	bf00      	nop
 8001500:	3750      	adds	r7, #80	@ 0x50
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40023800 	.word	0x40023800
 800150c:	40007000 	.word	0x40007000

08001510 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001514:	4b12      	ldr	r3, [pc, #72]	@ (8001560 <MX_I2C1_Init+0x50>)
 8001516:	4a13      	ldr	r2, [pc, #76]	@ (8001564 <MX_I2C1_Init+0x54>)
 8001518:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800151a:	4b11      	ldr	r3, [pc, #68]	@ (8001560 <MX_I2C1_Init+0x50>)
 800151c:	4a12      	ldr	r2, [pc, #72]	@ (8001568 <MX_I2C1_Init+0x58>)
 800151e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001520:	4b0f      	ldr	r3, [pc, #60]	@ (8001560 <MX_I2C1_Init+0x50>)
 8001522:	2200      	movs	r2, #0
 8001524:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001526:	4b0e      	ldr	r3, [pc, #56]	@ (8001560 <MX_I2C1_Init+0x50>)
 8001528:	2200      	movs	r2, #0
 800152a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800152c:	4b0c      	ldr	r3, [pc, #48]	@ (8001560 <MX_I2C1_Init+0x50>)
 800152e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001532:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001534:	4b0a      	ldr	r3, [pc, #40]	@ (8001560 <MX_I2C1_Init+0x50>)
 8001536:	2200      	movs	r2, #0
 8001538:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800153a:	4b09      	ldr	r3, [pc, #36]	@ (8001560 <MX_I2C1_Init+0x50>)
 800153c:	2200      	movs	r2, #0
 800153e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001540:	4b07      	ldr	r3, [pc, #28]	@ (8001560 <MX_I2C1_Init+0x50>)
 8001542:	2200      	movs	r2, #0
 8001544:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001546:	4b06      	ldr	r3, [pc, #24]	@ (8001560 <MX_I2C1_Init+0x50>)
 8001548:	2200      	movs	r2, #0
 800154a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800154c:	4804      	ldr	r0, [pc, #16]	@ (8001560 <MX_I2C1_Init+0x50>)
 800154e:	f000 fdcd 	bl	80020ec <HAL_I2C_Init>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001558:	f000 f8de 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800155c:	bf00      	nop
 800155e:	bd80      	pop	{r7, pc}
 8001560:	20000090 	.word	0x20000090
 8001564:	40005400 	.word	0x40005400
 8001568:	000186a0 	.word	0x000186a0

0800156c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001570:	4b17      	ldr	r3, [pc, #92]	@ (80015d0 <MX_SPI1_Init+0x64>)
 8001572:	4a18      	ldr	r2, [pc, #96]	@ (80015d4 <MX_SPI1_Init+0x68>)
 8001574:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001576:	4b16      	ldr	r3, [pc, #88]	@ (80015d0 <MX_SPI1_Init+0x64>)
 8001578:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800157c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800157e:	4b14      	ldr	r3, [pc, #80]	@ (80015d0 <MX_SPI1_Init+0x64>)
 8001580:	2200      	movs	r2, #0
 8001582:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001584:	4b12      	ldr	r3, [pc, #72]	@ (80015d0 <MX_SPI1_Init+0x64>)
 8001586:	2200      	movs	r2, #0
 8001588:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800158a:	4b11      	ldr	r3, [pc, #68]	@ (80015d0 <MX_SPI1_Init+0x64>)
 800158c:	2200      	movs	r2, #0
 800158e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001590:	4b0f      	ldr	r3, [pc, #60]	@ (80015d0 <MX_SPI1_Init+0x64>)
 8001592:	2200      	movs	r2, #0
 8001594:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001596:	4b0e      	ldr	r3, [pc, #56]	@ (80015d0 <MX_SPI1_Init+0x64>)
 8001598:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800159c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800159e:	4b0c      	ldr	r3, [pc, #48]	@ (80015d0 <MX_SPI1_Init+0x64>)
 80015a0:	2210      	movs	r2, #16
 80015a2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015a4:	4b0a      	ldr	r3, [pc, #40]	@ (80015d0 <MX_SPI1_Init+0x64>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015aa:	4b09      	ldr	r3, [pc, #36]	@ (80015d0 <MX_SPI1_Init+0x64>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015b0:	4b07      	ldr	r3, [pc, #28]	@ (80015d0 <MX_SPI1_Init+0x64>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80015b6:	4b06      	ldr	r3, [pc, #24]	@ (80015d0 <MX_SPI1_Init+0x64>)
 80015b8:	220a      	movs	r2, #10
 80015ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015bc:	4804      	ldr	r0, [pc, #16]	@ (80015d0 <MX_SPI1_Init+0x64>)
 80015be:	f002 fca5 	bl	8003f0c <HAL_SPI_Init>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80015c8:	f000 f8a6 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015cc:	bf00      	nop
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	200000e4 	.word	0x200000e4
 80015d4:	40013000 	.word	0x40013000

080015d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015dc:	4b11      	ldr	r3, [pc, #68]	@ (8001624 <MX_USART2_UART_Init+0x4c>)
 80015de:	4a12      	ldr	r2, [pc, #72]	@ (8001628 <MX_USART2_UART_Init+0x50>)
 80015e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015e2:	4b10      	ldr	r3, [pc, #64]	@ (8001624 <MX_USART2_UART_Init+0x4c>)
 80015e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001624 <MX_USART2_UART_Init+0x4c>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001624 <MX_USART2_UART_Init+0x4c>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001624 <MX_USART2_UART_Init+0x4c>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015fc:	4b09      	ldr	r3, [pc, #36]	@ (8001624 <MX_USART2_UART_Init+0x4c>)
 80015fe:	220c      	movs	r2, #12
 8001600:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001602:	4b08      	ldr	r3, [pc, #32]	@ (8001624 <MX_USART2_UART_Init+0x4c>)
 8001604:	2200      	movs	r2, #0
 8001606:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001608:	4b06      	ldr	r3, [pc, #24]	@ (8001624 <MX_USART2_UART_Init+0x4c>)
 800160a:	2200      	movs	r2, #0
 800160c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800160e:	4805      	ldr	r0, [pc, #20]	@ (8001624 <MX_USART2_UART_Init+0x4c>)
 8001610:	f002 ff8a 	bl	8004528 <HAL_UART_Init>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800161a:	f000 f87d 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	2000013c 	.word	0x2000013c
 8001628:	40004400 	.word	0x40004400

0800162c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b088      	sub	sp, #32
 8001630:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001632:	f107 030c 	add.w	r3, r7, #12
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	605a      	str	r2, [r3, #4]
 800163c:	609a      	str	r2, [r3, #8]
 800163e:	60da      	str	r2, [r3, #12]
 8001640:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	60bb      	str	r3, [r7, #8]
 8001646:	4b31      	ldr	r3, [pc, #196]	@ (800170c <MX_GPIO_Init+0xe0>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164a:	4a30      	ldr	r2, [pc, #192]	@ (800170c <MX_GPIO_Init+0xe0>)
 800164c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001650:	6313      	str	r3, [r2, #48]	@ 0x30
 8001652:	4b2e      	ldr	r3, [pc, #184]	@ (800170c <MX_GPIO_Init+0xe0>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001656:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800165a:	60bb      	str	r3, [r7, #8]
 800165c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	607b      	str	r3, [r7, #4]
 8001662:	4b2a      	ldr	r3, [pc, #168]	@ (800170c <MX_GPIO_Init+0xe0>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001666:	4a29      	ldr	r2, [pc, #164]	@ (800170c <MX_GPIO_Init+0xe0>)
 8001668:	f043 0301 	orr.w	r3, r3, #1
 800166c:	6313      	str	r3, [r2, #48]	@ 0x30
 800166e:	4b27      	ldr	r3, [pc, #156]	@ (800170c <MX_GPIO_Init+0xe0>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	607b      	str	r3, [r7, #4]
 8001678:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	603b      	str	r3, [r7, #0]
 800167e:	4b23      	ldr	r3, [pc, #140]	@ (800170c <MX_GPIO_Init+0xe0>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001682:	4a22      	ldr	r2, [pc, #136]	@ (800170c <MX_GPIO_Init+0xe0>)
 8001684:	f043 0302 	orr.w	r3, r3, #2
 8001688:	6313      	str	r3, [r2, #48]	@ 0x30
 800168a:	4b20      	ldr	r3, [pc, #128]	@ (800170c <MX_GPIO_Init+0xe0>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	603b      	str	r3, [r7, #0]
 8001694:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001696:	2200      	movs	r2, #0
 8001698:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800169c:	481c      	ldr	r0, [pc, #112]	@ (8001710 <MX_GPIO_Init+0xe4>)
 800169e:	f000 fd0b 	bl	80020b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 80016a2:	2200      	movs	r2, #0
 80016a4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80016a8:	481a      	ldr	r0, [pc, #104]	@ (8001714 <MX_GPIO_Init+0xe8>)
 80016aa:	f000 fd05 	bl	80020b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016ae:	2301      	movs	r3, #1
 80016b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016b2:	2300      	movs	r3, #0
 80016b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b6:	2300      	movs	r3, #0
 80016b8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ba:	f107 030c 	add.w	r3, r7, #12
 80016be:	4619      	mov	r1, r3
 80016c0:	4813      	ldr	r0, [pc, #76]	@ (8001710 <MX_GPIO_Init+0xe4>)
 80016c2:	f000 fb4d 	bl	8001d60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80016c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016cc:	2301      	movs	r3, #1
 80016ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d0:	2300      	movs	r3, #0
 80016d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d4:	2300      	movs	r3, #0
 80016d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d8:	f107 030c 	add.w	r3, r7, #12
 80016dc:	4619      	mov	r1, r3
 80016de:	480c      	ldr	r0, [pc, #48]	@ (8001710 <MX_GPIO_Init+0xe4>)
 80016e0:	f000 fb3e 	bl	8001d60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80016e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80016e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ea:	2301      	movs	r3, #1
 80016ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ee:	2300      	movs	r3, #0
 80016f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f2:	2300      	movs	r3, #0
 80016f4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f6:	f107 030c 	add.w	r3, r7, #12
 80016fa:	4619      	mov	r1, r3
 80016fc:	4805      	ldr	r0, [pc, #20]	@ (8001714 <MX_GPIO_Init+0xe8>)
 80016fe:	f000 fb2f 	bl	8001d60 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001702:	bf00      	nop
 8001704:	3720      	adds	r7, #32
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40023800 	.word	0x40023800
 8001710:	40020000 	.word	0x40020000
 8001714:	40020400 	.word	0x40020400

08001718 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800171c:	b672      	cpsid	i
}
 800171e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001720:	bf00      	nop
 8001722:	e7fd      	b.n	8001720 <Error_Handler+0x8>

08001724 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	607b      	str	r3, [r7, #4]
 800172e:	4b10      	ldr	r3, [pc, #64]	@ (8001770 <HAL_MspInit+0x4c>)
 8001730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001732:	4a0f      	ldr	r2, [pc, #60]	@ (8001770 <HAL_MspInit+0x4c>)
 8001734:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001738:	6453      	str	r3, [r2, #68]	@ 0x44
 800173a:	4b0d      	ldr	r3, [pc, #52]	@ (8001770 <HAL_MspInit+0x4c>)
 800173c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800173e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001742:	607b      	str	r3, [r7, #4]
 8001744:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	603b      	str	r3, [r7, #0]
 800174a:	4b09      	ldr	r3, [pc, #36]	@ (8001770 <HAL_MspInit+0x4c>)
 800174c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800174e:	4a08      	ldr	r2, [pc, #32]	@ (8001770 <HAL_MspInit+0x4c>)
 8001750:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001754:	6413      	str	r3, [r2, #64]	@ 0x40
 8001756:	4b06      	ldr	r3, [pc, #24]	@ (8001770 <HAL_MspInit+0x4c>)
 8001758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800175a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800175e:	603b      	str	r3, [r7, #0]
 8001760:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001762:	2007      	movs	r0, #7
 8001764:	f000 fac8 	bl	8001cf8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001768:	bf00      	nop
 800176a:	3708      	adds	r7, #8
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	40023800 	.word	0x40023800

08001774 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b08a      	sub	sp, #40	@ 0x28
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800177c:	f107 0314 	add.w	r3, r7, #20
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	605a      	str	r2, [r3, #4]
 8001786:	609a      	str	r2, [r3, #8]
 8001788:	60da      	str	r2, [r3, #12]
 800178a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a19      	ldr	r2, [pc, #100]	@ (80017f8 <HAL_I2C_MspInit+0x84>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d12b      	bne.n	80017ee <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	613b      	str	r3, [r7, #16]
 800179a:	4b18      	ldr	r3, [pc, #96]	@ (80017fc <HAL_I2C_MspInit+0x88>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179e:	4a17      	ldr	r2, [pc, #92]	@ (80017fc <HAL_I2C_MspInit+0x88>)
 80017a0:	f043 0302 	orr.w	r3, r3, #2
 80017a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017a6:	4b15      	ldr	r3, [pc, #84]	@ (80017fc <HAL_I2C_MspInit+0x88>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017aa:	f003 0302 	and.w	r3, r3, #2
 80017ae:	613b      	str	r3, [r7, #16]
 80017b0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017b2:	23c0      	movs	r3, #192	@ 0xc0
 80017b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017b6:	2312      	movs	r3, #18
 80017b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ba:	2300      	movs	r3, #0
 80017bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017be:	2303      	movs	r3, #3
 80017c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017c2:	2304      	movs	r3, #4
 80017c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017c6:	f107 0314 	add.w	r3, r7, #20
 80017ca:	4619      	mov	r1, r3
 80017cc:	480c      	ldr	r0, [pc, #48]	@ (8001800 <HAL_I2C_MspInit+0x8c>)
 80017ce:	f000 fac7 	bl	8001d60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	60fb      	str	r3, [r7, #12]
 80017d6:	4b09      	ldr	r3, [pc, #36]	@ (80017fc <HAL_I2C_MspInit+0x88>)
 80017d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017da:	4a08      	ldr	r2, [pc, #32]	@ (80017fc <HAL_I2C_MspInit+0x88>)
 80017dc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80017e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80017e2:	4b06      	ldr	r3, [pc, #24]	@ (80017fc <HAL_I2C_MspInit+0x88>)
 80017e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80017ee:	bf00      	nop
 80017f0:	3728      	adds	r7, #40	@ 0x28
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40005400 	.word	0x40005400
 80017fc:	40023800 	.word	0x40023800
 8001800:	40020400 	.word	0x40020400

08001804 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b08a      	sub	sp, #40	@ 0x28
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800180c:	f107 0314 	add.w	r3, r7, #20
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	609a      	str	r2, [r3, #8]
 8001818:	60da      	str	r2, [r3, #12]
 800181a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a19      	ldr	r2, [pc, #100]	@ (8001888 <HAL_SPI_MspInit+0x84>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d12b      	bne.n	800187e <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	613b      	str	r3, [r7, #16]
 800182a:	4b18      	ldr	r3, [pc, #96]	@ (800188c <HAL_SPI_MspInit+0x88>)
 800182c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800182e:	4a17      	ldr	r2, [pc, #92]	@ (800188c <HAL_SPI_MspInit+0x88>)
 8001830:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001834:	6453      	str	r3, [r2, #68]	@ 0x44
 8001836:	4b15      	ldr	r3, [pc, #84]	@ (800188c <HAL_SPI_MspInit+0x88>)
 8001838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800183a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800183e:	613b      	str	r3, [r7, #16]
 8001840:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	60fb      	str	r3, [r7, #12]
 8001846:	4b11      	ldr	r3, [pc, #68]	@ (800188c <HAL_SPI_MspInit+0x88>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184a:	4a10      	ldr	r2, [pc, #64]	@ (800188c <HAL_SPI_MspInit+0x88>)
 800184c:	f043 0301 	orr.w	r3, r3, #1
 8001850:	6313      	str	r3, [r2, #48]	@ 0x30
 8001852:	4b0e      	ldr	r3, [pc, #56]	@ (800188c <HAL_SPI_MspInit+0x88>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	60fb      	str	r3, [r7, #12]
 800185c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800185e:	23e0      	movs	r3, #224	@ 0xe0
 8001860:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001862:	2302      	movs	r3, #2
 8001864:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001866:	2300      	movs	r3, #0
 8001868:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800186a:	2303      	movs	r3, #3
 800186c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800186e:	2305      	movs	r3, #5
 8001870:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001872:	f107 0314 	add.w	r3, r7, #20
 8001876:	4619      	mov	r1, r3
 8001878:	4805      	ldr	r0, [pc, #20]	@ (8001890 <HAL_SPI_MspInit+0x8c>)
 800187a:	f000 fa71 	bl	8001d60 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800187e:	bf00      	nop
 8001880:	3728      	adds	r7, #40	@ 0x28
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40013000 	.word	0x40013000
 800188c:	40023800 	.word	0x40023800
 8001890:	40020000 	.word	0x40020000

08001894 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b08a      	sub	sp, #40	@ 0x28
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800189c:	f107 0314 	add.w	r3, r7, #20
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	605a      	str	r2, [r3, #4]
 80018a6:	609a      	str	r2, [r3, #8]
 80018a8:	60da      	str	r2, [r3, #12]
 80018aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a19      	ldr	r2, [pc, #100]	@ (8001918 <HAL_UART_MspInit+0x84>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d12b      	bne.n	800190e <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	613b      	str	r3, [r7, #16]
 80018ba:	4b18      	ldr	r3, [pc, #96]	@ (800191c <HAL_UART_MspInit+0x88>)
 80018bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018be:	4a17      	ldr	r2, [pc, #92]	@ (800191c <HAL_UART_MspInit+0x88>)
 80018c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80018c6:	4b15      	ldr	r3, [pc, #84]	@ (800191c <HAL_UART_MspInit+0x88>)
 80018c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018ce:	613b      	str	r3, [r7, #16]
 80018d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	60fb      	str	r3, [r7, #12]
 80018d6:	4b11      	ldr	r3, [pc, #68]	@ (800191c <HAL_UART_MspInit+0x88>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018da:	4a10      	ldr	r2, [pc, #64]	@ (800191c <HAL_UART_MspInit+0x88>)
 80018dc:	f043 0301 	orr.w	r3, r3, #1
 80018e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018e2:	4b0e      	ldr	r3, [pc, #56]	@ (800191c <HAL_UART_MspInit+0x88>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	60fb      	str	r3, [r7, #12]
 80018ec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80018ee:	230c      	movs	r3, #12
 80018f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f2:	2302      	movs	r3, #2
 80018f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f6:	2300      	movs	r3, #0
 80018f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018fa:	2303      	movs	r3, #3
 80018fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018fe:	2307      	movs	r3, #7
 8001900:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001902:	f107 0314 	add.w	r3, r7, #20
 8001906:	4619      	mov	r1, r3
 8001908:	4805      	ldr	r0, [pc, #20]	@ (8001920 <HAL_UART_MspInit+0x8c>)
 800190a:	f000 fa29 	bl	8001d60 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800190e:	bf00      	nop
 8001910:	3728      	adds	r7, #40	@ 0x28
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	40004400 	.word	0x40004400
 800191c:	40023800 	.word	0x40023800
 8001920:	40020000 	.word	0x40020000

08001924 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001928:	bf00      	nop
 800192a:	e7fd      	b.n	8001928 <NMI_Handler+0x4>

0800192c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001930:	bf00      	nop
 8001932:	e7fd      	b.n	8001930 <HardFault_Handler+0x4>

08001934 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001938:	bf00      	nop
 800193a:	e7fd      	b.n	8001938 <MemManage_Handler+0x4>

0800193c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001940:	bf00      	nop
 8001942:	e7fd      	b.n	8001940 <BusFault_Handler+0x4>

08001944 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001948:	bf00      	nop
 800194a:	e7fd      	b.n	8001948 <UsageFault_Handler+0x4>

0800194c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001950:	bf00      	nop
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr

0800195a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800195a:	b480      	push	{r7}
 800195c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr

08001976 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800197a:	f000 f8c7 	bl	8001b0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800197e:	bf00      	nop
 8001980:	bd80      	pop	{r7, pc}
	...

08001984 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b086      	sub	sp, #24
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800198c:	4a14      	ldr	r2, [pc, #80]	@ (80019e0 <_sbrk+0x5c>)
 800198e:	4b15      	ldr	r3, [pc, #84]	@ (80019e4 <_sbrk+0x60>)
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001998:	4b13      	ldr	r3, [pc, #76]	@ (80019e8 <_sbrk+0x64>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d102      	bne.n	80019a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019a0:	4b11      	ldr	r3, [pc, #68]	@ (80019e8 <_sbrk+0x64>)
 80019a2:	4a12      	ldr	r2, [pc, #72]	@ (80019ec <_sbrk+0x68>)
 80019a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019a6:	4b10      	ldr	r3, [pc, #64]	@ (80019e8 <_sbrk+0x64>)
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4413      	add	r3, r2
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d207      	bcs.n	80019c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019b4:	f003 f8ce 	bl	8004b54 <__errno>
 80019b8:	4603      	mov	r3, r0
 80019ba:	220c      	movs	r2, #12
 80019bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019be:	f04f 33ff 	mov.w	r3, #4294967295
 80019c2:	e009      	b.n	80019d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019c4:	4b08      	ldr	r3, [pc, #32]	@ (80019e8 <_sbrk+0x64>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019ca:	4b07      	ldr	r3, [pc, #28]	@ (80019e8 <_sbrk+0x64>)
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4413      	add	r3, r2
 80019d2:	4a05      	ldr	r2, [pc, #20]	@ (80019e8 <_sbrk+0x64>)
 80019d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019d6:	68fb      	ldr	r3, [r7, #12]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3718      	adds	r7, #24
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	20020000 	.word	0x20020000
 80019e4:	00000400 	.word	0x00000400
 80019e8:	200009d8 	.word	0x200009d8
 80019ec:	20000b28 	.word	0x20000b28

080019f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019f4:	4b06      	ldr	r3, [pc, #24]	@ (8001a10 <SystemInit+0x20>)
 80019f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019fa:	4a05      	ldr	r2, [pc, #20]	@ (8001a10 <SystemInit+0x20>)
 80019fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a04:	bf00      	nop
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	e000ed00 	.word	0xe000ed00

08001a14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a14:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a4c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001a18:	f7ff ffea 	bl	80019f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a1c:	480c      	ldr	r0, [pc, #48]	@ (8001a50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a1e:	490d      	ldr	r1, [pc, #52]	@ (8001a54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a20:	4a0d      	ldr	r2, [pc, #52]	@ (8001a58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a24:	e002      	b.n	8001a2c <LoopCopyDataInit>

08001a26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a2a:	3304      	adds	r3, #4

08001a2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a30:	d3f9      	bcc.n	8001a26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a32:	4a0a      	ldr	r2, [pc, #40]	@ (8001a5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a34:	4c0a      	ldr	r4, [pc, #40]	@ (8001a60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a38:	e001      	b.n	8001a3e <LoopFillZerobss>

08001a3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a3c:	3204      	adds	r2, #4

08001a3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a40:	d3fb      	bcc.n	8001a3a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001a42:	f003 f88d 	bl	8004b60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a46:	f7ff fbbd 	bl	80011c4 <main>
  bx  lr    
 8001a4a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a54:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001a58:	0800556c 	.word	0x0800556c
  ldr r2, =_sbss
 8001a5c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001a60:	20000b28 	.word	0x20000b28

08001a64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a64:	e7fe      	b.n	8001a64 <ADC_IRQHandler>
	...

08001a68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a6c:	4b0e      	ldr	r3, [pc, #56]	@ (8001aa8 <HAL_Init+0x40>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a0d      	ldr	r2, [pc, #52]	@ (8001aa8 <HAL_Init+0x40>)
 8001a72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a78:	4b0b      	ldr	r3, [pc, #44]	@ (8001aa8 <HAL_Init+0x40>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a0a      	ldr	r2, [pc, #40]	@ (8001aa8 <HAL_Init+0x40>)
 8001a7e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a84:	4b08      	ldr	r3, [pc, #32]	@ (8001aa8 <HAL_Init+0x40>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a07      	ldr	r2, [pc, #28]	@ (8001aa8 <HAL_Init+0x40>)
 8001a8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a90:	2003      	movs	r0, #3
 8001a92:	f000 f931 	bl	8001cf8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a96:	2000      	movs	r0, #0
 8001a98:	f000 f808 	bl	8001aac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a9c:	f7ff fe42 	bl	8001724 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40023c00 	.word	0x40023c00

08001aac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ab4:	4b12      	ldr	r3, [pc, #72]	@ (8001b00 <HAL_InitTick+0x54>)
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	4b12      	ldr	r3, [pc, #72]	@ (8001b04 <HAL_InitTick+0x58>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	4619      	mov	r1, r3
 8001abe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ac2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aca:	4618      	mov	r0, r3
 8001acc:	f000 f93b 	bl	8001d46 <HAL_SYSTICK_Config>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e00e      	b.n	8001af8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2b0f      	cmp	r3, #15
 8001ade:	d80a      	bhi.n	8001af6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	6879      	ldr	r1, [r7, #4]
 8001ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ae8:	f000 f911 	bl	8001d0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001aec:	4a06      	ldr	r2, [pc, #24]	@ (8001b08 <HAL_InitTick+0x5c>)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001af2:	2300      	movs	r3, #0
 8001af4:	e000      	b.n	8001af8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3708      	adds	r7, #8
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	20000010 	.word	0x20000010
 8001b04:	20000018 	.word	0x20000018
 8001b08:	20000014 	.word	0x20000014

08001b0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b10:	4b06      	ldr	r3, [pc, #24]	@ (8001b2c <HAL_IncTick+0x20>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	461a      	mov	r2, r3
 8001b16:	4b06      	ldr	r3, [pc, #24]	@ (8001b30 <HAL_IncTick+0x24>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4413      	add	r3, r2
 8001b1c:	4a04      	ldr	r2, [pc, #16]	@ (8001b30 <HAL_IncTick+0x24>)
 8001b1e:	6013      	str	r3, [r2, #0]
}
 8001b20:	bf00      	nop
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	20000018 	.word	0x20000018
 8001b30:	200009dc 	.word	0x200009dc

08001b34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  return uwTick;
 8001b38:	4b03      	ldr	r3, [pc, #12]	@ (8001b48 <HAL_GetTick+0x14>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	200009dc 	.word	0x200009dc

08001b4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b54:	f7ff ffee 	bl	8001b34 <HAL_GetTick>
 8001b58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b64:	d005      	beq.n	8001b72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b66:	4b0a      	ldr	r3, [pc, #40]	@ (8001b90 <HAL_Delay+0x44>)
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	4413      	add	r3, r2
 8001b70:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b72:	bf00      	nop
 8001b74:	f7ff ffde 	bl	8001b34 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	68fa      	ldr	r2, [r7, #12]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d8f7      	bhi.n	8001b74 <HAL_Delay+0x28>
  {
  }
}
 8001b84:	bf00      	nop
 8001b86:	bf00      	nop
 8001b88:	3710      	adds	r7, #16
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	20000018 	.word	0x20000018

08001b94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b085      	sub	sp, #20
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f003 0307 	and.w	r3, r3, #7
 8001ba2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ba4:	4b0c      	ldr	r3, [pc, #48]	@ (8001bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001baa:	68ba      	ldr	r2, [r7, #8]
 8001bac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bbc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001bc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bc6:	4a04      	ldr	r2, [pc, #16]	@ (8001bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	60d3      	str	r3, [r2, #12]
}
 8001bcc:	bf00      	nop
 8001bce:	3714      	adds	r7, #20
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr
 8001bd8:	e000ed00 	.word	0xe000ed00

08001bdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001be0:	4b04      	ldr	r3, [pc, #16]	@ (8001bf4 <__NVIC_GetPriorityGrouping+0x18>)
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	0a1b      	lsrs	r3, r3, #8
 8001be6:	f003 0307 	and.w	r3, r3, #7
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr
 8001bf4:	e000ed00 	.word	0xe000ed00

08001bf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	4603      	mov	r3, r0
 8001c00:	6039      	str	r1, [r7, #0]
 8001c02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	db0a      	blt.n	8001c22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	b2da      	uxtb	r2, r3
 8001c10:	490c      	ldr	r1, [pc, #48]	@ (8001c44 <__NVIC_SetPriority+0x4c>)
 8001c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c16:	0112      	lsls	r2, r2, #4
 8001c18:	b2d2      	uxtb	r2, r2
 8001c1a:	440b      	add	r3, r1
 8001c1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c20:	e00a      	b.n	8001c38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	b2da      	uxtb	r2, r3
 8001c26:	4908      	ldr	r1, [pc, #32]	@ (8001c48 <__NVIC_SetPriority+0x50>)
 8001c28:	79fb      	ldrb	r3, [r7, #7]
 8001c2a:	f003 030f 	and.w	r3, r3, #15
 8001c2e:	3b04      	subs	r3, #4
 8001c30:	0112      	lsls	r2, r2, #4
 8001c32:	b2d2      	uxtb	r2, r2
 8001c34:	440b      	add	r3, r1
 8001c36:	761a      	strb	r2, [r3, #24]
}
 8001c38:	bf00      	nop
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr
 8001c44:	e000e100 	.word	0xe000e100
 8001c48:	e000ed00 	.word	0xe000ed00

08001c4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b089      	sub	sp, #36	@ 0x24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	60b9      	str	r1, [r7, #8]
 8001c56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	f1c3 0307 	rsb	r3, r3, #7
 8001c66:	2b04      	cmp	r3, #4
 8001c68:	bf28      	it	cs
 8001c6a:	2304      	movcs	r3, #4
 8001c6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	3304      	adds	r3, #4
 8001c72:	2b06      	cmp	r3, #6
 8001c74:	d902      	bls.n	8001c7c <NVIC_EncodePriority+0x30>
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	3b03      	subs	r3, #3
 8001c7a:	e000      	b.n	8001c7e <NVIC_EncodePriority+0x32>
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c80:	f04f 32ff 	mov.w	r2, #4294967295
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	43da      	mvns	r2, r3
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	401a      	ands	r2, r3
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c94:	f04f 31ff 	mov.w	r1, #4294967295
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c9e:	43d9      	mvns	r1, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca4:	4313      	orrs	r3, r2
         );
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3724      	adds	r7, #36	@ 0x24
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
	...

08001cb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	3b01      	subs	r3, #1
 8001cc0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001cc4:	d301      	bcc.n	8001cca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e00f      	b.n	8001cea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cca:	4a0a      	ldr	r2, [pc, #40]	@ (8001cf4 <SysTick_Config+0x40>)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	3b01      	subs	r3, #1
 8001cd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cd2:	210f      	movs	r1, #15
 8001cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cd8:	f7ff ff8e 	bl	8001bf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cdc:	4b05      	ldr	r3, [pc, #20]	@ (8001cf4 <SysTick_Config+0x40>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ce2:	4b04      	ldr	r3, [pc, #16]	@ (8001cf4 <SysTick_Config+0x40>)
 8001ce4:	2207      	movs	r2, #7
 8001ce6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	e000e010 	.word	0xe000e010

08001cf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f7ff ff47 	bl	8001b94 <__NVIC_SetPriorityGrouping>
}
 8001d06:	bf00      	nop
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b086      	sub	sp, #24
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	4603      	mov	r3, r0
 8001d16:	60b9      	str	r1, [r7, #8]
 8001d18:	607a      	str	r2, [r7, #4]
 8001d1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d20:	f7ff ff5c 	bl	8001bdc <__NVIC_GetPriorityGrouping>
 8001d24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	68b9      	ldr	r1, [r7, #8]
 8001d2a:	6978      	ldr	r0, [r7, #20]
 8001d2c:	f7ff ff8e 	bl	8001c4c <NVIC_EncodePriority>
 8001d30:	4602      	mov	r2, r0
 8001d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d36:	4611      	mov	r1, r2
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff ff5d 	bl	8001bf8 <__NVIC_SetPriority>
}
 8001d3e:	bf00      	nop
 8001d40:	3718      	adds	r7, #24
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b082      	sub	sp, #8
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f7ff ffb0 	bl	8001cb4 <SysTick_Config>
 8001d54:	4603      	mov	r3, r0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
	...

08001d60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b089      	sub	sp, #36	@ 0x24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d72:	2300      	movs	r3, #0
 8001d74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d76:	2300      	movs	r3, #0
 8001d78:	61fb      	str	r3, [r7, #28]
 8001d7a:	e165      	b.n	8002048 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	697a      	ldr	r2, [r7, #20]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d90:	693a      	ldr	r2, [r7, #16]
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	f040 8154 	bne.w	8002042 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f003 0303 	and.w	r3, r3, #3
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d005      	beq.n	8001db2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d130      	bne.n	8001e14 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	2203      	movs	r2, #3
 8001dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc2:	43db      	mvns	r3, r3
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	68da      	ldr	r2, [r3, #12]
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd6:	69ba      	ldr	r2, [r7, #24]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001de8:	2201      	movs	r2, #1
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	43db      	mvns	r3, r3
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	4013      	ands	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	091b      	lsrs	r3, r3, #4
 8001dfe:	f003 0201 	and.w	r2, r3, #1
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f003 0303 	and.w	r3, r3, #3
 8001e1c:	2b03      	cmp	r3, #3
 8001e1e:	d017      	beq.n	8001e50 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	2203      	movs	r2, #3
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	43db      	mvns	r3, r3
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	4013      	ands	r3, r2
 8001e36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	689a      	ldr	r2, [r3, #8]
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f003 0303 	and.w	r3, r3, #3
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d123      	bne.n	8001ea4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	08da      	lsrs	r2, r3, #3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3208      	adds	r2, #8
 8001e64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	f003 0307 	and.w	r3, r3, #7
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	220f      	movs	r2, #15
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	691a      	ldr	r2, [r3, #16]
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	f003 0307 	and.w	r3, r3, #7
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	08da      	lsrs	r2, r3, #3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	3208      	adds	r2, #8
 8001e9e:	69b9      	ldr	r1, [r7, #24]
 8001ea0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	2203      	movs	r2, #3
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	43db      	mvns	r3, r3
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	4013      	ands	r3, r2
 8001eba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f003 0203 	and.w	r2, r3, #3
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	005b      	lsls	r3, r3, #1
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	f000 80ae 	beq.w	8002042 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	60fb      	str	r3, [r7, #12]
 8001eea:	4b5d      	ldr	r3, [pc, #372]	@ (8002060 <HAL_GPIO_Init+0x300>)
 8001eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eee:	4a5c      	ldr	r2, [pc, #368]	@ (8002060 <HAL_GPIO_Init+0x300>)
 8001ef0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ef4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ef6:	4b5a      	ldr	r3, [pc, #360]	@ (8002060 <HAL_GPIO_Init+0x300>)
 8001ef8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001efa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001efe:	60fb      	str	r3, [r7, #12]
 8001f00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f02:	4a58      	ldr	r2, [pc, #352]	@ (8002064 <HAL_GPIO_Init+0x304>)
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	089b      	lsrs	r3, r3, #2
 8001f08:	3302      	adds	r3, #2
 8001f0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	f003 0303 	and.w	r3, r3, #3
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	220f      	movs	r2, #15
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	43db      	mvns	r3, r3
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	4013      	ands	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a4f      	ldr	r2, [pc, #316]	@ (8002068 <HAL_GPIO_Init+0x308>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d025      	beq.n	8001f7a <HAL_GPIO_Init+0x21a>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a4e      	ldr	r2, [pc, #312]	@ (800206c <HAL_GPIO_Init+0x30c>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d01f      	beq.n	8001f76 <HAL_GPIO_Init+0x216>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a4d      	ldr	r2, [pc, #308]	@ (8002070 <HAL_GPIO_Init+0x310>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d019      	beq.n	8001f72 <HAL_GPIO_Init+0x212>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a4c      	ldr	r2, [pc, #304]	@ (8002074 <HAL_GPIO_Init+0x314>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d013      	beq.n	8001f6e <HAL_GPIO_Init+0x20e>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a4b      	ldr	r2, [pc, #300]	@ (8002078 <HAL_GPIO_Init+0x318>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d00d      	beq.n	8001f6a <HAL_GPIO_Init+0x20a>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a4a      	ldr	r2, [pc, #296]	@ (800207c <HAL_GPIO_Init+0x31c>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d007      	beq.n	8001f66 <HAL_GPIO_Init+0x206>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a49      	ldr	r2, [pc, #292]	@ (8002080 <HAL_GPIO_Init+0x320>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d101      	bne.n	8001f62 <HAL_GPIO_Init+0x202>
 8001f5e:	2306      	movs	r3, #6
 8001f60:	e00c      	b.n	8001f7c <HAL_GPIO_Init+0x21c>
 8001f62:	2307      	movs	r3, #7
 8001f64:	e00a      	b.n	8001f7c <HAL_GPIO_Init+0x21c>
 8001f66:	2305      	movs	r3, #5
 8001f68:	e008      	b.n	8001f7c <HAL_GPIO_Init+0x21c>
 8001f6a:	2304      	movs	r3, #4
 8001f6c:	e006      	b.n	8001f7c <HAL_GPIO_Init+0x21c>
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e004      	b.n	8001f7c <HAL_GPIO_Init+0x21c>
 8001f72:	2302      	movs	r3, #2
 8001f74:	e002      	b.n	8001f7c <HAL_GPIO_Init+0x21c>
 8001f76:	2301      	movs	r3, #1
 8001f78:	e000      	b.n	8001f7c <HAL_GPIO_Init+0x21c>
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	69fa      	ldr	r2, [r7, #28]
 8001f7e:	f002 0203 	and.w	r2, r2, #3
 8001f82:	0092      	lsls	r2, r2, #2
 8001f84:	4093      	lsls	r3, r2
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f8c:	4935      	ldr	r1, [pc, #212]	@ (8002064 <HAL_GPIO_Init+0x304>)
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	089b      	lsrs	r3, r3, #2
 8001f92:	3302      	adds	r3, #2
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f9a:	4b3a      	ldr	r3, [pc, #232]	@ (8002084 <HAL_GPIO_Init+0x324>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	43db      	mvns	r3, r3
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d003      	beq.n	8001fbe <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fbe:	4a31      	ldr	r2, [pc, #196]	@ (8002084 <HAL_GPIO_Init+0x324>)
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fc4:	4b2f      	ldr	r3, [pc, #188]	@ (8002084 <HAL_GPIO_Init+0x324>)
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d003      	beq.n	8001fe8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fe8:	4a26      	ldr	r2, [pc, #152]	@ (8002084 <HAL_GPIO_Init+0x324>)
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fee:	4b25      	ldr	r3, [pc, #148]	@ (8002084 <HAL_GPIO_Init+0x324>)
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	43db      	mvns	r3, r3
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d003      	beq.n	8002012 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	4313      	orrs	r3, r2
 8002010:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002012:	4a1c      	ldr	r2, [pc, #112]	@ (8002084 <HAL_GPIO_Init+0x324>)
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002018:	4b1a      	ldr	r3, [pc, #104]	@ (8002084 <HAL_GPIO_Init+0x324>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	43db      	mvns	r3, r3
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	4013      	ands	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d003      	beq.n	800203c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	4313      	orrs	r3, r2
 800203a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800203c:	4a11      	ldr	r2, [pc, #68]	@ (8002084 <HAL_GPIO_Init+0x324>)
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	3301      	adds	r3, #1
 8002046:	61fb      	str	r3, [r7, #28]
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	2b0f      	cmp	r3, #15
 800204c:	f67f ae96 	bls.w	8001d7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002050:	bf00      	nop
 8002052:	bf00      	nop
 8002054:	3724      	adds	r7, #36	@ 0x24
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	40023800 	.word	0x40023800
 8002064:	40013800 	.word	0x40013800
 8002068:	40020000 	.word	0x40020000
 800206c:	40020400 	.word	0x40020400
 8002070:	40020800 	.word	0x40020800
 8002074:	40020c00 	.word	0x40020c00
 8002078:	40021000 	.word	0x40021000
 800207c:	40021400 	.word	0x40021400
 8002080:	40021800 	.word	0x40021800
 8002084:	40013c00 	.word	0x40013c00

08002088 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002088:	b480      	push	{r7}
 800208a:	b085      	sub	sp, #20
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	460b      	mov	r3, r1
 8002092:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	691a      	ldr	r2, [r3, #16]
 8002098:	887b      	ldrh	r3, [r7, #2]
 800209a:	4013      	ands	r3, r2
 800209c:	2b00      	cmp	r3, #0
 800209e:	d002      	beq.n	80020a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020a0:	2301      	movs	r3, #1
 80020a2:	73fb      	strb	r3, [r7, #15]
 80020a4:	e001      	b.n	80020aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020a6:	2300      	movs	r3, #0
 80020a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3714      	adds	r7, #20
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	460b      	mov	r3, r1
 80020c2:	807b      	strh	r3, [r7, #2]
 80020c4:	4613      	mov	r3, r2
 80020c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020c8:	787b      	ldrb	r3, [r7, #1]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d003      	beq.n	80020d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020ce:	887a      	ldrh	r2, [r7, #2]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020d4:	e003      	b.n	80020de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020d6:	887b      	ldrh	r3, [r7, #2]
 80020d8:	041a      	lsls	r2, r3, #16
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	619a      	str	r2, [r3, #24]
}
 80020de:	bf00      	nop
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
	...

080020ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e12b      	b.n	8002356 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002104:	b2db      	uxtb	r3, r3
 8002106:	2b00      	cmp	r3, #0
 8002108:	d106      	bne.n	8002118 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f7ff fb2e 	bl	8001774 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2224      	movs	r2, #36	@ 0x24
 800211c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f022 0201 	bic.w	r2, r2, #1
 800212e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800213e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800214e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002150:	f001 f9e6 	bl	8003520 <HAL_RCC_GetPCLK1Freq>
 8002154:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	4a81      	ldr	r2, [pc, #516]	@ (8002360 <HAL_I2C_Init+0x274>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d807      	bhi.n	8002170 <HAL_I2C_Init+0x84>
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	4a80      	ldr	r2, [pc, #512]	@ (8002364 <HAL_I2C_Init+0x278>)
 8002164:	4293      	cmp	r3, r2
 8002166:	bf94      	ite	ls
 8002168:	2301      	movls	r3, #1
 800216a:	2300      	movhi	r3, #0
 800216c:	b2db      	uxtb	r3, r3
 800216e:	e006      	b.n	800217e <HAL_I2C_Init+0x92>
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	4a7d      	ldr	r2, [pc, #500]	@ (8002368 <HAL_I2C_Init+0x27c>)
 8002174:	4293      	cmp	r3, r2
 8002176:	bf94      	ite	ls
 8002178:	2301      	movls	r3, #1
 800217a:	2300      	movhi	r3, #0
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e0e7      	b.n	8002356 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	4a78      	ldr	r2, [pc, #480]	@ (800236c <HAL_I2C_Init+0x280>)
 800218a:	fba2 2303 	umull	r2, r3, r2, r3
 800218e:	0c9b      	lsrs	r3, r3, #18
 8002190:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	68ba      	ldr	r2, [r7, #8]
 80021a2:	430a      	orrs	r2, r1
 80021a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	6a1b      	ldr	r3, [r3, #32]
 80021ac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	4a6a      	ldr	r2, [pc, #424]	@ (8002360 <HAL_I2C_Init+0x274>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d802      	bhi.n	80021c0 <HAL_I2C_Init+0xd4>
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	3301      	adds	r3, #1
 80021be:	e009      	b.n	80021d4 <HAL_I2C_Init+0xe8>
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80021c6:	fb02 f303 	mul.w	r3, r2, r3
 80021ca:	4a69      	ldr	r2, [pc, #420]	@ (8002370 <HAL_I2C_Init+0x284>)
 80021cc:	fba2 2303 	umull	r2, r3, r2, r3
 80021d0:	099b      	lsrs	r3, r3, #6
 80021d2:	3301      	adds	r3, #1
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	6812      	ldr	r2, [r2, #0]
 80021d8:	430b      	orrs	r3, r1
 80021da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	69db      	ldr	r3, [r3, #28]
 80021e2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80021e6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	495c      	ldr	r1, [pc, #368]	@ (8002360 <HAL_I2C_Init+0x274>)
 80021f0:	428b      	cmp	r3, r1
 80021f2:	d819      	bhi.n	8002228 <HAL_I2C_Init+0x13c>
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	1e59      	subs	r1, r3, #1
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8002202:	1c59      	adds	r1, r3, #1
 8002204:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002208:	400b      	ands	r3, r1
 800220a:	2b00      	cmp	r3, #0
 800220c:	d00a      	beq.n	8002224 <HAL_I2C_Init+0x138>
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	1e59      	subs	r1, r3, #1
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	fbb1 f3f3 	udiv	r3, r1, r3
 800221c:	3301      	adds	r3, #1
 800221e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002222:	e051      	b.n	80022c8 <HAL_I2C_Init+0x1dc>
 8002224:	2304      	movs	r3, #4
 8002226:	e04f      	b.n	80022c8 <HAL_I2C_Init+0x1dc>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d111      	bne.n	8002254 <HAL_I2C_Init+0x168>
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	1e58      	subs	r0, r3, #1
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6859      	ldr	r1, [r3, #4]
 8002238:	460b      	mov	r3, r1
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	440b      	add	r3, r1
 800223e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002242:	3301      	adds	r3, #1
 8002244:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002248:	2b00      	cmp	r3, #0
 800224a:	bf0c      	ite	eq
 800224c:	2301      	moveq	r3, #1
 800224e:	2300      	movne	r3, #0
 8002250:	b2db      	uxtb	r3, r3
 8002252:	e012      	b.n	800227a <HAL_I2C_Init+0x18e>
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	1e58      	subs	r0, r3, #1
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6859      	ldr	r1, [r3, #4]
 800225c:	460b      	mov	r3, r1
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	440b      	add	r3, r1
 8002262:	0099      	lsls	r1, r3, #2
 8002264:	440b      	add	r3, r1
 8002266:	fbb0 f3f3 	udiv	r3, r0, r3
 800226a:	3301      	adds	r3, #1
 800226c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002270:	2b00      	cmp	r3, #0
 8002272:	bf0c      	ite	eq
 8002274:	2301      	moveq	r3, #1
 8002276:	2300      	movne	r3, #0
 8002278:	b2db      	uxtb	r3, r3
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <HAL_I2C_Init+0x196>
 800227e:	2301      	movs	r3, #1
 8002280:	e022      	b.n	80022c8 <HAL_I2C_Init+0x1dc>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d10e      	bne.n	80022a8 <HAL_I2C_Init+0x1bc>
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	1e58      	subs	r0, r3, #1
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6859      	ldr	r1, [r3, #4]
 8002292:	460b      	mov	r3, r1
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	440b      	add	r3, r1
 8002298:	fbb0 f3f3 	udiv	r3, r0, r3
 800229c:	3301      	adds	r3, #1
 800229e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80022a6:	e00f      	b.n	80022c8 <HAL_I2C_Init+0x1dc>
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	1e58      	subs	r0, r3, #1
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6859      	ldr	r1, [r3, #4]
 80022b0:	460b      	mov	r3, r1
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	440b      	add	r3, r1
 80022b6:	0099      	lsls	r1, r3, #2
 80022b8:	440b      	add	r3, r1
 80022ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80022be:	3301      	adds	r3, #1
 80022c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022c4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80022c8:	6879      	ldr	r1, [r7, #4]
 80022ca:	6809      	ldr	r1, [r1, #0]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	69da      	ldr	r2, [r3, #28]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a1b      	ldr	r3, [r3, #32]
 80022e2:	431a      	orrs	r2, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	430a      	orrs	r2, r1
 80022ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80022f6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	6911      	ldr	r1, [r2, #16]
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	68d2      	ldr	r2, [r2, #12]
 8002302:	4311      	orrs	r1, r2
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	6812      	ldr	r2, [r2, #0]
 8002308:	430b      	orrs	r3, r1
 800230a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	695a      	ldr	r2, [r3, #20]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	699b      	ldr	r3, [r3, #24]
 800231e:	431a      	orrs	r2, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	430a      	orrs	r2, r1
 8002326:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f042 0201 	orr.w	r2, r2, #1
 8002336:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2220      	movs	r2, #32
 8002342:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	3710      	adds	r7, #16
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	000186a0 	.word	0x000186a0
 8002364:	001e847f 	.word	0x001e847f
 8002368:	003d08ff 	.word	0x003d08ff
 800236c:	431bde83 	.word	0x431bde83
 8002370:	10624dd3 	.word	0x10624dd3

08002374 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b088      	sub	sp, #32
 8002378:	af02      	add	r7, sp, #8
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	607a      	str	r2, [r7, #4]
 800237e:	461a      	mov	r2, r3
 8002380:	460b      	mov	r3, r1
 8002382:	817b      	strh	r3, [r7, #10]
 8002384:	4613      	mov	r3, r2
 8002386:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002388:	f7ff fbd4 	bl	8001b34 <HAL_GetTick>
 800238c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002394:	b2db      	uxtb	r3, r3
 8002396:	2b20      	cmp	r3, #32
 8002398:	f040 80e0 	bne.w	800255c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	9300      	str	r3, [sp, #0]
 80023a0:	2319      	movs	r3, #25
 80023a2:	2201      	movs	r2, #1
 80023a4:	4970      	ldr	r1, [pc, #448]	@ (8002568 <HAL_I2C_Master_Transmit+0x1f4>)
 80023a6:	68f8      	ldr	r0, [r7, #12]
 80023a8:	f000 fd92 	bl	8002ed0 <I2C_WaitOnFlagUntilTimeout>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80023b2:	2302      	movs	r3, #2
 80023b4:	e0d3      	b.n	800255e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d101      	bne.n	80023c4 <HAL_I2C_Master_Transmit+0x50>
 80023c0:	2302      	movs	r3, #2
 80023c2:	e0cc      	b.n	800255e <HAL_I2C_Master_Transmit+0x1ea>
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d007      	beq.n	80023ea <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f042 0201 	orr.w	r2, r2, #1
 80023e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023f8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2221      	movs	r2, #33	@ 0x21
 80023fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2210      	movs	r2, #16
 8002406:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2200      	movs	r2, #0
 800240e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	893a      	ldrh	r2, [r7, #8]
 800241a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002420:	b29a      	uxth	r2, r3
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	4a50      	ldr	r2, [pc, #320]	@ (800256c <HAL_I2C_Master_Transmit+0x1f8>)
 800242a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800242c:	8979      	ldrh	r1, [r7, #10]
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	6a3a      	ldr	r2, [r7, #32]
 8002432:	68f8      	ldr	r0, [r7, #12]
 8002434:	f000 fbfc 	bl	8002c30 <I2C_MasterRequestWrite>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e08d      	b.n	800255e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002442:	2300      	movs	r3, #0
 8002444:	613b      	str	r3, [r7, #16]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	695b      	ldr	r3, [r3, #20]
 800244c:	613b      	str	r3, [r7, #16]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	699b      	ldr	r3, [r3, #24]
 8002454:	613b      	str	r3, [r7, #16]
 8002456:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002458:	e066      	b.n	8002528 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800245a:	697a      	ldr	r2, [r7, #20]
 800245c:	6a39      	ldr	r1, [r7, #32]
 800245e:	68f8      	ldr	r0, [r7, #12]
 8002460:	f000 fe50 	bl	8003104 <I2C_WaitOnTXEFlagUntilTimeout>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d00d      	beq.n	8002486 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800246e:	2b04      	cmp	r3, #4
 8002470:	d107      	bne.n	8002482 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002480:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e06b      	b.n	800255e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800248a:	781a      	ldrb	r2, [r3, #0]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002496:	1c5a      	adds	r2, r3, #1
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	3b01      	subs	r3, #1
 80024a4:	b29a      	uxth	r2, r3
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024ae:	3b01      	subs	r3, #1
 80024b0:	b29a      	uxth	r2, r3
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	695b      	ldr	r3, [r3, #20]
 80024bc:	f003 0304 	and.w	r3, r3, #4
 80024c0:	2b04      	cmp	r3, #4
 80024c2:	d11b      	bne.n	80024fc <HAL_I2C_Master_Transmit+0x188>
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d017      	beq.n	80024fc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d0:	781a      	ldrb	r2, [r3, #0]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024dc:	1c5a      	adds	r2, r3, #1
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	3b01      	subs	r3, #1
 80024ea:	b29a      	uxth	r2, r3
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024f4:	3b01      	subs	r3, #1
 80024f6:	b29a      	uxth	r2, r3
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024fc:	697a      	ldr	r2, [r7, #20]
 80024fe:	6a39      	ldr	r1, [r7, #32]
 8002500:	68f8      	ldr	r0, [r7, #12]
 8002502:	f000 fe47 	bl	8003194 <I2C_WaitOnBTFFlagUntilTimeout>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d00d      	beq.n	8002528 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002510:	2b04      	cmp	r3, #4
 8002512:	d107      	bne.n	8002524 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002522:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e01a      	b.n	800255e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800252c:	2b00      	cmp	r3, #0
 800252e:	d194      	bne.n	800245a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800253e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2220      	movs	r2, #32
 8002544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2200      	movs	r2, #0
 800254c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2200      	movs	r2, #0
 8002554:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002558:	2300      	movs	r3, #0
 800255a:	e000      	b.n	800255e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800255c:	2302      	movs	r3, #2
  }
}
 800255e:	4618      	mov	r0, r3
 8002560:	3718      	adds	r7, #24
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	00100002 	.word	0x00100002
 800256c:	ffff0000 	.word	0xffff0000

08002570 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b08c      	sub	sp, #48	@ 0x30
 8002574:	af02      	add	r7, sp, #8
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	607a      	str	r2, [r7, #4]
 800257a:	461a      	mov	r2, r3
 800257c:	460b      	mov	r3, r1
 800257e:	817b      	strh	r3, [r7, #10]
 8002580:	4613      	mov	r3, r2
 8002582:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002584:	f7ff fad6 	bl	8001b34 <HAL_GetTick>
 8002588:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b20      	cmp	r3, #32
 8002594:	f040 8217 	bne.w	80029c6 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800259a:	9300      	str	r3, [sp, #0]
 800259c:	2319      	movs	r3, #25
 800259e:	2201      	movs	r2, #1
 80025a0:	497c      	ldr	r1, [pc, #496]	@ (8002794 <HAL_I2C_Master_Receive+0x224>)
 80025a2:	68f8      	ldr	r0, [r7, #12]
 80025a4:	f000 fc94 	bl	8002ed0 <I2C_WaitOnFlagUntilTimeout>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80025ae:	2302      	movs	r3, #2
 80025b0:	e20a      	b.n	80029c8 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d101      	bne.n	80025c0 <HAL_I2C_Master_Receive+0x50>
 80025bc:	2302      	movs	r3, #2
 80025be:	e203      	b.n	80029c8 <HAL_I2C_Master_Receive+0x458>
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0301 	and.w	r3, r3, #1
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d007      	beq.n	80025e6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f042 0201 	orr.w	r2, r2, #1
 80025e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2222      	movs	r2, #34	@ 0x22
 80025fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2210      	movs	r2, #16
 8002602:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2200      	movs	r2, #0
 800260a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	893a      	ldrh	r2, [r7, #8]
 8002616:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800261c:	b29a      	uxth	r2, r3
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	4a5c      	ldr	r2, [pc, #368]	@ (8002798 <HAL_I2C_Master_Receive+0x228>)
 8002626:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002628:	8979      	ldrh	r1, [r7, #10]
 800262a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800262c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800262e:	68f8      	ldr	r0, [r7, #12]
 8002630:	f000 fb80 	bl	8002d34 <I2C_MasterRequestRead>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e1c4      	b.n	80029c8 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002642:	2b00      	cmp	r3, #0
 8002644:	d113      	bne.n	800266e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002646:	2300      	movs	r3, #0
 8002648:	623b      	str	r3, [r7, #32]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	695b      	ldr	r3, [r3, #20]
 8002650:	623b      	str	r3, [r7, #32]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	623b      	str	r3, [r7, #32]
 800265a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800266a:	601a      	str	r2, [r3, #0]
 800266c:	e198      	b.n	80029a0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002672:	2b01      	cmp	r3, #1
 8002674:	d11b      	bne.n	80026ae <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002684:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002686:	2300      	movs	r3, #0
 8002688:	61fb      	str	r3, [r7, #28]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	695b      	ldr	r3, [r3, #20]
 8002690:	61fb      	str	r3, [r7, #28]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	699b      	ldr	r3, [r3, #24]
 8002698:	61fb      	str	r3, [r7, #28]
 800269a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	e178      	b.n	80029a0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d11b      	bne.n	80026ee <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026c4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80026d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026d6:	2300      	movs	r3, #0
 80026d8:	61bb      	str	r3, [r7, #24]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	695b      	ldr	r3, [r3, #20]
 80026e0:	61bb      	str	r3, [r7, #24]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	61bb      	str	r3, [r7, #24]
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	e158      	b.n	80029a0 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80026fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026fe:	2300      	movs	r3, #0
 8002700:	617b      	str	r3, [r7, #20]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	695b      	ldr	r3, [r3, #20]
 8002708:	617b      	str	r3, [r7, #20]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	699b      	ldr	r3, [r3, #24]
 8002710:	617b      	str	r3, [r7, #20]
 8002712:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002714:	e144      	b.n	80029a0 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800271a:	2b03      	cmp	r3, #3
 800271c:	f200 80f1 	bhi.w	8002902 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002724:	2b01      	cmp	r3, #1
 8002726:	d123      	bne.n	8002770 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002728:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800272a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800272c:	68f8      	ldr	r0, [r7, #12]
 800272e:	f000 fd79 	bl	8003224 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d001      	beq.n	800273c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e145      	b.n	80029c8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	691a      	ldr	r2, [r3, #16]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002746:	b2d2      	uxtb	r2, r2
 8002748:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800274e:	1c5a      	adds	r2, r3, #1
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002758:	3b01      	subs	r3, #1
 800275a:	b29a      	uxth	r2, r3
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002764:	b29b      	uxth	r3, r3
 8002766:	3b01      	subs	r3, #1
 8002768:	b29a      	uxth	r2, r3
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800276e:	e117      	b.n	80029a0 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002774:	2b02      	cmp	r3, #2
 8002776:	d14e      	bne.n	8002816 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800277a:	9300      	str	r3, [sp, #0]
 800277c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800277e:	2200      	movs	r2, #0
 8002780:	4906      	ldr	r1, [pc, #24]	@ (800279c <HAL_I2C_Master_Receive+0x22c>)
 8002782:	68f8      	ldr	r0, [r7, #12]
 8002784:	f000 fba4 	bl	8002ed0 <I2C_WaitOnFlagUntilTimeout>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d008      	beq.n	80027a0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e11a      	b.n	80029c8 <HAL_I2C_Master_Receive+0x458>
 8002792:	bf00      	nop
 8002794:	00100002 	.word	0x00100002
 8002798:	ffff0000 	.word	0xffff0000
 800279c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	691a      	ldr	r2, [r3, #16]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ba:	b2d2      	uxtb	r2, r2
 80027bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c2:	1c5a      	adds	r2, r3, #1
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027cc:	3b01      	subs	r3, #1
 80027ce:	b29a      	uxth	r2, r3
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027d8:	b29b      	uxth	r3, r3
 80027da:	3b01      	subs	r3, #1
 80027dc:	b29a      	uxth	r2, r3
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	691a      	ldr	r2, [r3, #16]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ec:	b2d2      	uxtb	r2, r2
 80027ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027f4:	1c5a      	adds	r2, r3, #1
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027fe:	3b01      	subs	r3, #1
 8002800:	b29a      	uxth	r2, r3
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800280a:	b29b      	uxth	r3, r3
 800280c:	3b01      	subs	r3, #1
 800280e:	b29a      	uxth	r2, r3
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002814:	e0c4      	b.n	80029a0 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002818:	9300      	str	r3, [sp, #0]
 800281a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800281c:	2200      	movs	r2, #0
 800281e:	496c      	ldr	r1, [pc, #432]	@ (80029d0 <HAL_I2C_Master_Receive+0x460>)
 8002820:	68f8      	ldr	r0, [r7, #12]
 8002822:	f000 fb55 	bl	8002ed0 <I2C_WaitOnFlagUntilTimeout>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e0cb      	b.n	80029c8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800283e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	691a      	ldr	r2, [r3, #16]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800284a:	b2d2      	uxtb	r2, r2
 800284c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002852:	1c5a      	adds	r2, r3, #1
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800285c:	3b01      	subs	r3, #1
 800285e:	b29a      	uxth	r2, r3
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002868:	b29b      	uxth	r3, r3
 800286a:	3b01      	subs	r3, #1
 800286c:	b29a      	uxth	r2, r3
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002874:	9300      	str	r3, [sp, #0]
 8002876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002878:	2200      	movs	r2, #0
 800287a:	4955      	ldr	r1, [pc, #340]	@ (80029d0 <HAL_I2C_Master_Receive+0x460>)
 800287c:	68f8      	ldr	r0, [r7, #12]
 800287e:	f000 fb27 	bl	8002ed0 <I2C_WaitOnFlagUntilTimeout>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d001      	beq.n	800288c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e09d      	b.n	80029c8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800289a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	691a      	ldr	r2, [r3, #16]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028a6:	b2d2      	uxtb	r2, r2
 80028a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ae:	1c5a      	adds	r2, r3, #1
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028b8:	3b01      	subs	r3, #1
 80028ba:	b29a      	uxth	r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	3b01      	subs	r3, #1
 80028c8:	b29a      	uxth	r2, r3
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	691a      	ldr	r2, [r3, #16]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d8:	b2d2      	uxtb	r2, r2
 80028da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e0:	1c5a      	adds	r2, r3, #1
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028ea:	3b01      	subs	r3, #1
 80028ec:	b29a      	uxth	r2, r3
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	3b01      	subs	r3, #1
 80028fa:	b29a      	uxth	r2, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002900:	e04e      	b.n	80029a0 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002902:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002904:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002906:	68f8      	ldr	r0, [r7, #12]
 8002908:	f000 fc8c 	bl	8003224 <I2C_WaitOnRXNEFlagUntilTimeout>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d001      	beq.n	8002916 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e058      	b.n	80029c8 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	691a      	ldr	r2, [r3, #16]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002920:	b2d2      	uxtb	r2, r2
 8002922:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002928:	1c5a      	adds	r2, r3, #1
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002932:	3b01      	subs	r3, #1
 8002934:	b29a      	uxth	r2, r3
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800293e:	b29b      	uxth	r3, r3
 8002940:	3b01      	subs	r3, #1
 8002942:	b29a      	uxth	r2, r3
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	695b      	ldr	r3, [r3, #20]
 800294e:	f003 0304 	and.w	r3, r3, #4
 8002952:	2b04      	cmp	r3, #4
 8002954:	d124      	bne.n	80029a0 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800295a:	2b03      	cmp	r3, #3
 800295c:	d107      	bne.n	800296e <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800296c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	691a      	ldr	r2, [r3, #16]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002978:	b2d2      	uxtb	r2, r2
 800297a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002980:	1c5a      	adds	r2, r3, #1
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800298a:	3b01      	subs	r3, #1
 800298c:	b29a      	uxth	r2, r3
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002996:	b29b      	uxth	r3, r3
 8002998:	3b01      	subs	r3, #1
 800299a:	b29a      	uxth	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	f47f aeb6 	bne.w	8002716 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2220      	movs	r2, #32
 80029ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80029c2:	2300      	movs	r3, #0
 80029c4:	e000      	b.n	80029c8 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80029c6:	2302      	movs	r3, #2
  }
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3728      	adds	r7, #40	@ 0x28
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	00010004 	.word	0x00010004

080029d4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b08a      	sub	sp, #40	@ 0x28
 80029d8:	af02      	add	r7, sp, #8
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	607a      	str	r2, [r7, #4]
 80029de:	603b      	str	r3, [r7, #0]
 80029e0:	460b      	mov	r3, r1
 80029e2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80029e4:	f7ff f8a6 	bl	8001b34 <HAL_GetTick>
 80029e8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80029ea:	2300      	movs	r3, #0
 80029ec:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	2b20      	cmp	r3, #32
 80029f8:	f040 8111 	bne.w	8002c1e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	9300      	str	r3, [sp, #0]
 8002a00:	2319      	movs	r3, #25
 8002a02:	2201      	movs	r2, #1
 8002a04:	4988      	ldr	r1, [pc, #544]	@ (8002c28 <HAL_I2C_IsDeviceReady+0x254>)
 8002a06:	68f8      	ldr	r0, [r7, #12]
 8002a08:	f000 fa62 	bl	8002ed0 <I2C_WaitOnFlagUntilTimeout>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002a12:	2302      	movs	r3, #2
 8002a14:	e104      	b.n	8002c20 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d101      	bne.n	8002a24 <HAL_I2C_IsDeviceReady+0x50>
 8002a20:	2302      	movs	r3, #2
 8002a22:	e0fd      	b.n	8002c20 <HAL_I2C_IsDeviceReady+0x24c>
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d007      	beq.n	8002a4a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f042 0201 	orr.w	r2, r2, #1
 8002a48:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a58:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2224      	movs	r2, #36	@ 0x24
 8002a5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2200      	movs	r2, #0
 8002a66:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	4a70      	ldr	r2, [pc, #448]	@ (8002c2c <HAL_I2C_IsDeviceReady+0x258>)
 8002a6c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a7c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	9300      	str	r3, [sp, #0]
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002a8a:	68f8      	ldr	r0, [r7, #12]
 8002a8c:	f000 fa20 	bl	8002ed0 <I2C_WaitOnFlagUntilTimeout>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00d      	beq.n	8002ab2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aa0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002aa4:	d103      	bne.n	8002aae <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002aac:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e0b6      	b.n	8002c20 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ab2:	897b      	ldrh	r3, [r7, #10]
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002ac0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002ac2:	f7ff f837 	bl	8001b34 <HAL_GetTick>
 8002ac6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	bf0c      	ite	eq
 8002ad6:	2301      	moveq	r3, #1
 8002ad8:	2300      	movne	r3, #0
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	695b      	ldr	r3, [r3, #20]
 8002ae4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ae8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002aec:	bf0c      	ite	eq
 8002aee:	2301      	moveq	r3, #1
 8002af0:	2300      	movne	r3, #0
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002af6:	e025      	b.n	8002b44 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002af8:	f7ff f81c 	bl	8001b34 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	683a      	ldr	r2, [r7, #0]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d302      	bcc.n	8002b0e <HAL_I2C_IsDeviceReady+0x13a>
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d103      	bne.n	8002b16 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	22a0      	movs	r2, #160	@ 0xa0
 8002b12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	695b      	ldr	r3, [r3, #20]
 8002b1c:	f003 0302 	and.w	r3, r3, #2
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	bf0c      	ite	eq
 8002b24:	2301      	moveq	r3, #1
 8002b26:	2300      	movne	r3, #0
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b3a:	bf0c      	ite	eq
 8002b3c:	2301      	moveq	r3, #1
 8002b3e:	2300      	movne	r3, #0
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	2ba0      	cmp	r3, #160	@ 0xa0
 8002b4e:	d005      	beq.n	8002b5c <HAL_I2C_IsDeviceReady+0x188>
 8002b50:	7dfb      	ldrb	r3, [r7, #23]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d102      	bne.n	8002b5c <HAL_I2C_IsDeviceReady+0x188>
 8002b56:	7dbb      	ldrb	r3, [r7, #22]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d0cd      	beq.n	8002af8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2220      	movs	r2, #32
 8002b60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	695b      	ldr	r3, [r3, #20]
 8002b6a:	f003 0302 	and.w	r3, r3, #2
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d129      	bne.n	8002bc6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b80:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b82:	2300      	movs	r3, #0
 8002b84:	613b      	str	r3, [r7, #16]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	695b      	ldr	r3, [r3, #20]
 8002b8c:	613b      	str	r3, [r7, #16]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	699b      	ldr	r3, [r3, #24]
 8002b94:	613b      	str	r3, [r7, #16]
 8002b96:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	9300      	str	r3, [sp, #0]
 8002b9c:	2319      	movs	r3, #25
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	4921      	ldr	r1, [pc, #132]	@ (8002c28 <HAL_I2C_IsDeviceReady+0x254>)
 8002ba2:	68f8      	ldr	r0, [r7, #12]
 8002ba4:	f000 f994 	bl	8002ed0 <I2C_WaitOnFlagUntilTimeout>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e036      	b.n	8002c20 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2220      	movs	r2, #32
 8002bb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	e02c      	b.n	8002c20 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bd4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002bde:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	9300      	str	r3, [sp, #0]
 8002be4:	2319      	movs	r3, #25
 8002be6:	2201      	movs	r2, #1
 8002be8:	490f      	ldr	r1, [pc, #60]	@ (8002c28 <HAL_I2C_IsDeviceReady+0x254>)
 8002bea:	68f8      	ldr	r0, [r7, #12]
 8002bec:	f000 f970 	bl	8002ed0 <I2C_WaitOnFlagUntilTimeout>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e012      	b.n	8002c20 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	f4ff af32 	bcc.w	8002a6e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2220      	movs	r2, #32
 8002c0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e000      	b.n	8002c20 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002c1e:	2302      	movs	r3, #2
  }
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3720      	adds	r7, #32
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	00100002 	.word	0x00100002
 8002c2c:	ffff0000 	.word	0xffff0000

08002c30 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b088      	sub	sp, #32
 8002c34:	af02      	add	r7, sp, #8
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	607a      	str	r2, [r7, #4]
 8002c3a:	603b      	str	r3, [r7, #0]
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c44:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	2b08      	cmp	r3, #8
 8002c4a:	d006      	beq.n	8002c5a <I2C_MasterRequestWrite+0x2a>
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d003      	beq.n	8002c5a <I2C_MasterRequestWrite+0x2a>
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002c58:	d108      	bne.n	8002c6c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c68:	601a      	str	r2, [r3, #0]
 8002c6a:	e00b      	b.n	8002c84 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c70:	2b12      	cmp	r3, #18
 8002c72:	d107      	bne.n	8002c84 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c82:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	9300      	str	r3, [sp, #0]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002c90:	68f8      	ldr	r0, [r7, #12]
 8002c92:	f000 f91d 	bl	8002ed0 <I2C_WaitOnFlagUntilTimeout>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d00d      	beq.n	8002cb8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ca6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002caa:	d103      	bne.n	8002cb4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cb2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e035      	b.n	8002d24 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	691b      	ldr	r3, [r3, #16]
 8002cbc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002cc0:	d108      	bne.n	8002cd4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002cc2:	897b      	ldrh	r3, [r7, #10]
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002cd0:	611a      	str	r2, [r3, #16]
 8002cd2:	e01b      	b.n	8002d0c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002cd4:	897b      	ldrh	r3, [r7, #10]
 8002cd6:	11db      	asrs	r3, r3, #7
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	f003 0306 	and.w	r3, r3, #6
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	f063 030f 	orn	r3, r3, #15
 8002ce4:	b2da      	uxtb	r2, r3
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	490e      	ldr	r1, [pc, #56]	@ (8002d2c <I2C_MasterRequestWrite+0xfc>)
 8002cf2:	68f8      	ldr	r0, [r7, #12]
 8002cf4:	f000 f966 	bl	8002fc4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e010      	b.n	8002d24 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002d02:	897b      	ldrh	r3, [r7, #10]
 8002d04:	b2da      	uxtb	r2, r3
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	4907      	ldr	r1, [pc, #28]	@ (8002d30 <I2C_MasterRequestWrite+0x100>)
 8002d12:	68f8      	ldr	r0, [r7, #12]
 8002d14:	f000 f956 	bl	8002fc4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d001      	beq.n	8002d22 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e000      	b.n	8002d24 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3718      	adds	r7, #24
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	00010008 	.word	0x00010008
 8002d30:	00010002 	.word	0x00010002

08002d34 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b088      	sub	sp, #32
 8002d38:	af02      	add	r7, sp, #8
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	607a      	str	r2, [r7, #4]
 8002d3e:	603b      	str	r3, [r7, #0]
 8002d40:	460b      	mov	r3, r1
 8002d42:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d48:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002d58:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	2b08      	cmp	r3, #8
 8002d5e:	d006      	beq.n	8002d6e <I2C_MasterRequestRead+0x3a>
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d003      	beq.n	8002d6e <I2C_MasterRequestRead+0x3a>
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002d6c:	d108      	bne.n	8002d80 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d7c:	601a      	str	r2, [r3, #0]
 8002d7e:	e00b      	b.n	8002d98 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d84:	2b11      	cmp	r3, #17
 8002d86:	d107      	bne.n	8002d98 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d96:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	9300      	str	r3, [sp, #0]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002da4:	68f8      	ldr	r0, [r7, #12]
 8002da6:	f000 f893 	bl	8002ed0 <I2C_WaitOnFlagUntilTimeout>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d00d      	beq.n	8002dcc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002dbe:	d103      	bne.n	8002dc8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002dc6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e079      	b.n	8002ec0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	691b      	ldr	r3, [r3, #16]
 8002dd0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002dd4:	d108      	bne.n	8002de8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002dd6:	897b      	ldrh	r3, [r7, #10]
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	f043 0301 	orr.w	r3, r3, #1
 8002dde:	b2da      	uxtb	r2, r3
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	611a      	str	r2, [r3, #16]
 8002de6:	e05f      	b.n	8002ea8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002de8:	897b      	ldrh	r3, [r7, #10]
 8002dea:	11db      	asrs	r3, r3, #7
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	f003 0306 	and.w	r3, r3, #6
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	f063 030f 	orn	r3, r3, #15
 8002df8:	b2da      	uxtb	r2, r3
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	4930      	ldr	r1, [pc, #192]	@ (8002ec8 <I2C_MasterRequestRead+0x194>)
 8002e06:	68f8      	ldr	r0, [r7, #12]
 8002e08:	f000 f8dc 	bl	8002fc4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e054      	b.n	8002ec0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002e16:	897b      	ldrh	r3, [r7, #10]
 8002e18:	b2da      	uxtb	r2, r3
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	4929      	ldr	r1, [pc, #164]	@ (8002ecc <I2C_MasterRequestRead+0x198>)
 8002e26:	68f8      	ldr	r0, [r7, #12]
 8002e28:	f000 f8cc 	bl	8002fc4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e044      	b.n	8002ec0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e36:	2300      	movs	r3, #0
 8002e38:	613b      	str	r3, [r7, #16]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	695b      	ldr	r3, [r3, #20]
 8002e40:	613b      	str	r3, [r7, #16]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	613b      	str	r3, [r7, #16]
 8002e4a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e5a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	9300      	str	r3, [sp, #0]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002e68:	68f8      	ldr	r0, [r7, #12]
 8002e6a:	f000 f831 	bl	8002ed0 <I2C_WaitOnFlagUntilTimeout>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d00d      	beq.n	8002e90 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e82:	d103      	bne.n	8002e8c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e8a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e017      	b.n	8002ec0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002e90:	897b      	ldrh	r3, [r7, #10]
 8002e92:	11db      	asrs	r3, r3, #7
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	f003 0306 	and.w	r3, r3, #6
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	f063 030e 	orn	r3, r3, #14
 8002ea0:	b2da      	uxtb	r2, r3
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	4907      	ldr	r1, [pc, #28]	@ (8002ecc <I2C_MasterRequestRead+0x198>)
 8002eae:	68f8      	ldr	r0, [r7, #12]
 8002eb0:	f000 f888 	bl	8002fc4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e000      	b.n	8002ec0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002ebe:	2300      	movs	r3, #0
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3718      	adds	r7, #24
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	00010008 	.word	0x00010008
 8002ecc:	00010002 	.word	0x00010002

08002ed0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	603b      	str	r3, [r7, #0]
 8002edc:	4613      	mov	r3, r2
 8002ede:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ee0:	e048      	b.n	8002f74 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee8:	d044      	beq.n	8002f74 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eea:	f7fe fe23 	bl	8001b34 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	683a      	ldr	r2, [r7, #0]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d302      	bcc.n	8002f00 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d139      	bne.n	8002f74 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	0c1b      	lsrs	r3, r3, #16
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d10d      	bne.n	8002f26 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	695b      	ldr	r3, [r3, #20]
 8002f10:	43da      	mvns	r2, r3
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	4013      	ands	r3, r2
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	bf0c      	ite	eq
 8002f1c:	2301      	moveq	r3, #1
 8002f1e:	2300      	movne	r3, #0
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	461a      	mov	r2, r3
 8002f24:	e00c      	b.n	8002f40 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	699b      	ldr	r3, [r3, #24]
 8002f2c:	43da      	mvns	r2, r3
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	4013      	ands	r3, r2
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	bf0c      	ite	eq
 8002f38:	2301      	moveq	r3, #1
 8002f3a:	2300      	movne	r3, #0
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	461a      	mov	r2, r3
 8002f40:	79fb      	ldrb	r3, [r7, #7]
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d116      	bne.n	8002f74 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2220      	movs	r2, #32
 8002f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f60:	f043 0220 	orr.w	r2, r3, #32
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e023      	b.n	8002fbc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	0c1b      	lsrs	r3, r3, #16
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d10d      	bne.n	8002f9a <I2C_WaitOnFlagUntilTimeout+0xca>
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	695b      	ldr	r3, [r3, #20]
 8002f84:	43da      	mvns	r2, r3
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	4013      	ands	r3, r2
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	bf0c      	ite	eq
 8002f90:	2301      	moveq	r3, #1
 8002f92:	2300      	movne	r3, #0
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	461a      	mov	r2, r3
 8002f98:	e00c      	b.n	8002fb4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	43da      	mvns	r2, r3
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	bf0c      	ite	eq
 8002fac:	2301      	moveq	r3, #1
 8002fae:	2300      	movne	r3, #0
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	79fb      	ldrb	r3, [r7, #7]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d093      	beq.n	8002ee2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3710      	adds	r7, #16
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	607a      	str	r2, [r7, #4]
 8002fd0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fd2:	e071      	b.n	80030b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fe2:	d123      	bne.n	800302c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ff2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002ffc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2220      	movs	r2, #32
 8003008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2200      	movs	r2, #0
 8003010:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003018:	f043 0204 	orr.w	r2, r3, #4
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e067      	b.n	80030fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003032:	d041      	beq.n	80030b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003034:	f7fe fd7e 	bl	8001b34 <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	429a      	cmp	r2, r3
 8003042:	d302      	bcc.n	800304a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d136      	bne.n	80030b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	0c1b      	lsrs	r3, r3, #16
 800304e:	b2db      	uxtb	r3, r3
 8003050:	2b01      	cmp	r3, #1
 8003052:	d10c      	bne.n	800306e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	43da      	mvns	r2, r3
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	4013      	ands	r3, r2
 8003060:	b29b      	uxth	r3, r3
 8003062:	2b00      	cmp	r3, #0
 8003064:	bf14      	ite	ne
 8003066:	2301      	movne	r3, #1
 8003068:	2300      	moveq	r3, #0
 800306a:	b2db      	uxtb	r3, r3
 800306c:	e00b      	b.n	8003086 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	43da      	mvns	r2, r3
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	4013      	ands	r3, r2
 800307a:	b29b      	uxth	r3, r3
 800307c:	2b00      	cmp	r3, #0
 800307e:	bf14      	ite	ne
 8003080:	2301      	movne	r3, #1
 8003082:	2300      	moveq	r3, #0
 8003084:	b2db      	uxtb	r3, r3
 8003086:	2b00      	cmp	r3, #0
 8003088:	d016      	beq.n	80030b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2200      	movs	r2, #0
 800308e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2220      	movs	r2, #32
 8003094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a4:	f043 0220 	orr.w	r2, r3, #32
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2200      	movs	r2, #0
 80030b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e021      	b.n	80030fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	0c1b      	lsrs	r3, r3, #16
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d10c      	bne.n	80030dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	695b      	ldr	r3, [r3, #20]
 80030c8:	43da      	mvns	r2, r3
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	4013      	ands	r3, r2
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	bf14      	ite	ne
 80030d4:	2301      	movne	r3, #1
 80030d6:	2300      	moveq	r3, #0
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	e00b      	b.n	80030f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	699b      	ldr	r3, [r3, #24]
 80030e2:	43da      	mvns	r2, r3
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	4013      	ands	r3, r2
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	bf14      	ite	ne
 80030ee:	2301      	movne	r3, #1
 80030f0:	2300      	moveq	r3, #0
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	f47f af6d 	bne.w	8002fd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80030fa:	2300      	movs	r3, #0
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3710      	adds	r7, #16
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}

08003104 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003110:	e034      	b.n	800317c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003112:	68f8      	ldr	r0, [r7, #12]
 8003114:	f000 f8e3 	bl	80032de <I2C_IsAcknowledgeFailed>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d001      	beq.n	8003122 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e034      	b.n	800318c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003128:	d028      	beq.n	800317c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800312a:	f7fe fd03 	bl	8001b34 <HAL_GetTick>
 800312e:	4602      	mov	r2, r0
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	68ba      	ldr	r2, [r7, #8]
 8003136:	429a      	cmp	r2, r3
 8003138:	d302      	bcc.n	8003140 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d11d      	bne.n	800317c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800314a:	2b80      	cmp	r3, #128	@ 0x80
 800314c:	d016      	beq.n	800317c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2200      	movs	r2, #0
 8003152:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2220      	movs	r2, #32
 8003158:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2200      	movs	r2, #0
 8003160:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003168:	f043 0220 	orr.w	r2, r3, #32
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e007      	b.n	800318c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003186:	2b80      	cmp	r3, #128	@ 0x80
 8003188:	d1c3      	bne.n	8003112 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800318a:	2300      	movs	r3, #0
}
 800318c:	4618      	mov	r0, r3
 800318e:	3710      	adds	r7, #16
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031a0:	e034      	b.n	800320c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031a2:	68f8      	ldr	r0, [r7, #12]
 80031a4:	f000 f89b 	bl	80032de <I2C_IsAcknowledgeFailed>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d001      	beq.n	80031b2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e034      	b.n	800321c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031b8:	d028      	beq.n	800320c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031ba:	f7fe fcbb 	bl	8001b34 <HAL_GetTick>
 80031be:	4602      	mov	r2, r0
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	68ba      	ldr	r2, [r7, #8]
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d302      	bcc.n	80031d0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d11d      	bne.n	800320c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	f003 0304 	and.w	r3, r3, #4
 80031da:	2b04      	cmp	r3, #4
 80031dc:	d016      	beq.n	800320c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2200      	movs	r2, #0
 80031e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2220      	movs	r2, #32
 80031e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f8:	f043 0220 	orr.w	r2, r3, #32
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e007      	b.n	800321c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	f003 0304 	and.w	r3, r3, #4
 8003216:	2b04      	cmp	r3, #4
 8003218:	d1c3      	bne.n	80031a2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800321a:	2300      	movs	r3, #0
}
 800321c:	4618      	mov	r0, r3
 800321e:	3710      	adds	r7, #16
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003230:	e049      	b.n	80032c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	695b      	ldr	r3, [r3, #20]
 8003238:	f003 0310 	and.w	r3, r3, #16
 800323c:	2b10      	cmp	r3, #16
 800323e:	d119      	bne.n	8003274 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f06f 0210 	mvn.w	r2, #16
 8003248:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2200      	movs	r2, #0
 800324e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2220      	movs	r2, #32
 8003254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e030      	b.n	80032d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003274:	f7fe fc5e 	bl	8001b34 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	68ba      	ldr	r2, [r7, #8]
 8003280:	429a      	cmp	r2, r3
 8003282:	d302      	bcc.n	800328a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d11d      	bne.n	80032c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	695b      	ldr	r3, [r3, #20]
 8003290:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003294:	2b40      	cmp	r3, #64	@ 0x40
 8003296:	d016      	beq.n	80032c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2200      	movs	r2, #0
 800329c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2220      	movs	r2, #32
 80032a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b2:	f043 0220 	orr.w	r2, r3, #32
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e007      	b.n	80032d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	695b      	ldr	r3, [r3, #20]
 80032cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032d0:	2b40      	cmp	r3, #64	@ 0x40
 80032d2:	d1ae      	bne.n	8003232 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3710      	adds	r7, #16
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}

080032de <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80032de:	b480      	push	{r7}
 80032e0:	b083      	sub	sp, #12
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	695b      	ldr	r3, [r3, #20]
 80032ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032f4:	d11b      	bne.n	800332e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80032fe:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2220      	movs	r2, #32
 800330a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800331a:	f043 0204 	orr.w	r2, r3, #4
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e000      	b.n	8003330 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800332e:	2300      	movs	r3, #0
}
 8003330:	4618      	mov	r0, r3
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr

0800333c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d101      	bne.n	8003350 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e0cc      	b.n	80034ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003350:	4b68      	ldr	r3, [pc, #416]	@ (80034f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 030f 	and.w	r3, r3, #15
 8003358:	683a      	ldr	r2, [r7, #0]
 800335a:	429a      	cmp	r2, r3
 800335c:	d90c      	bls.n	8003378 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800335e:	4b65      	ldr	r3, [pc, #404]	@ (80034f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003360:	683a      	ldr	r2, [r7, #0]
 8003362:	b2d2      	uxtb	r2, r2
 8003364:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003366:	4b63      	ldr	r3, [pc, #396]	@ (80034f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 030f 	and.w	r3, r3, #15
 800336e:	683a      	ldr	r2, [r7, #0]
 8003370:	429a      	cmp	r2, r3
 8003372:	d001      	beq.n	8003378 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e0b8      	b.n	80034ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0302 	and.w	r3, r3, #2
 8003380:	2b00      	cmp	r3, #0
 8003382:	d020      	beq.n	80033c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0304 	and.w	r3, r3, #4
 800338c:	2b00      	cmp	r3, #0
 800338e:	d005      	beq.n	800339c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003390:	4b59      	ldr	r3, [pc, #356]	@ (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	4a58      	ldr	r2, [pc, #352]	@ (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003396:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800339a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0308 	and.w	r3, r3, #8
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d005      	beq.n	80033b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033a8:	4b53      	ldr	r3, [pc, #332]	@ (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	4a52      	ldr	r2, [pc, #328]	@ (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 80033ae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80033b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033b4:	4b50      	ldr	r3, [pc, #320]	@ (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	494d      	ldr	r1, [pc, #308]	@ (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0301 	and.w	r3, r3, #1
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d044      	beq.n	800345c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d107      	bne.n	80033ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033da:	4b47      	ldr	r3, [pc, #284]	@ (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d119      	bne.n	800341a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e07f      	b.n	80034ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d003      	beq.n	80033fa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033f6:	2b03      	cmp	r3, #3
 80033f8:	d107      	bne.n	800340a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033fa:	4b3f      	ldr	r3, [pc, #252]	@ (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d109      	bne.n	800341a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e06f      	b.n	80034ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800340a:	4b3b      	ldr	r3, [pc, #236]	@ (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0302 	and.w	r3, r3, #2
 8003412:	2b00      	cmp	r3, #0
 8003414:	d101      	bne.n	800341a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e067      	b.n	80034ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800341a:	4b37      	ldr	r3, [pc, #220]	@ (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f023 0203 	bic.w	r2, r3, #3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	4934      	ldr	r1, [pc, #208]	@ (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003428:	4313      	orrs	r3, r2
 800342a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800342c:	f7fe fb82 	bl	8001b34 <HAL_GetTick>
 8003430:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003432:	e00a      	b.n	800344a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003434:	f7fe fb7e 	bl	8001b34 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003442:	4293      	cmp	r3, r2
 8003444:	d901      	bls.n	800344a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e04f      	b.n	80034ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800344a:	4b2b      	ldr	r3, [pc, #172]	@ (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f003 020c 	and.w	r2, r3, #12
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	429a      	cmp	r2, r3
 800345a:	d1eb      	bne.n	8003434 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800345c:	4b25      	ldr	r3, [pc, #148]	@ (80034f4 <HAL_RCC_ClockConfig+0x1b8>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 030f 	and.w	r3, r3, #15
 8003464:	683a      	ldr	r2, [r7, #0]
 8003466:	429a      	cmp	r2, r3
 8003468:	d20c      	bcs.n	8003484 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800346a:	4b22      	ldr	r3, [pc, #136]	@ (80034f4 <HAL_RCC_ClockConfig+0x1b8>)
 800346c:	683a      	ldr	r2, [r7, #0]
 800346e:	b2d2      	uxtb	r2, r2
 8003470:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003472:	4b20      	ldr	r3, [pc, #128]	@ (80034f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 030f 	and.w	r3, r3, #15
 800347a:	683a      	ldr	r2, [r7, #0]
 800347c:	429a      	cmp	r2, r3
 800347e:	d001      	beq.n	8003484 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e032      	b.n	80034ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0304 	and.w	r3, r3, #4
 800348c:	2b00      	cmp	r3, #0
 800348e:	d008      	beq.n	80034a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003490:	4b19      	ldr	r3, [pc, #100]	@ (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	4916      	ldr	r1, [pc, #88]	@ (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0308 	and.w	r3, r3, #8
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d009      	beq.n	80034c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034ae:	4b12      	ldr	r3, [pc, #72]	@ (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	00db      	lsls	r3, r3, #3
 80034bc:	490e      	ldr	r1, [pc, #56]	@ (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80034c2:	f000 f855 	bl	8003570 <HAL_RCC_GetSysClockFreq>
 80034c6:	4602      	mov	r2, r0
 80034c8:	4b0b      	ldr	r3, [pc, #44]	@ (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	091b      	lsrs	r3, r3, #4
 80034ce:	f003 030f 	and.w	r3, r3, #15
 80034d2:	490a      	ldr	r1, [pc, #40]	@ (80034fc <HAL_RCC_ClockConfig+0x1c0>)
 80034d4:	5ccb      	ldrb	r3, [r1, r3]
 80034d6:	fa22 f303 	lsr.w	r3, r2, r3
 80034da:	4a09      	ldr	r2, [pc, #36]	@ (8003500 <HAL_RCC_ClockConfig+0x1c4>)
 80034dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80034de:	4b09      	ldr	r3, [pc, #36]	@ (8003504 <HAL_RCC_ClockConfig+0x1c8>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4618      	mov	r0, r3
 80034e4:	f7fe fae2 	bl	8001aac <HAL_InitTick>

  return HAL_OK;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3710      	adds	r7, #16
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	40023c00 	.word	0x40023c00
 80034f8:	40023800 	.word	0x40023800
 80034fc:	08005510 	.word	0x08005510
 8003500:	20000010 	.word	0x20000010
 8003504:	20000014 	.word	0x20000014

08003508 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003508:	b480      	push	{r7}
 800350a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800350c:	4b03      	ldr	r3, [pc, #12]	@ (800351c <HAL_RCC_GetHCLKFreq+0x14>)
 800350e:	681b      	ldr	r3, [r3, #0]
}
 8003510:	4618      	mov	r0, r3
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr
 800351a:	bf00      	nop
 800351c:	20000010 	.word	0x20000010

08003520 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003524:	f7ff fff0 	bl	8003508 <HAL_RCC_GetHCLKFreq>
 8003528:	4602      	mov	r2, r0
 800352a:	4b05      	ldr	r3, [pc, #20]	@ (8003540 <HAL_RCC_GetPCLK1Freq+0x20>)
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	0a9b      	lsrs	r3, r3, #10
 8003530:	f003 0307 	and.w	r3, r3, #7
 8003534:	4903      	ldr	r1, [pc, #12]	@ (8003544 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003536:	5ccb      	ldrb	r3, [r1, r3]
 8003538:	fa22 f303 	lsr.w	r3, r2, r3
}
 800353c:	4618      	mov	r0, r3
 800353e:	bd80      	pop	{r7, pc}
 8003540:	40023800 	.word	0x40023800
 8003544:	08005520 	.word	0x08005520

08003548 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800354c:	f7ff ffdc 	bl	8003508 <HAL_RCC_GetHCLKFreq>
 8003550:	4602      	mov	r2, r0
 8003552:	4b05      	ldr	r3, [pc, #20]	@ (8003568 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	0b5b      	lsrs	r3, r3, #13
 8003558:	f003 0307 	and.w	r3, r3, #7
 800355c:	4903      	ldr	r1, [pc, #12]	@ (800356c <HAL_RCC_GetPCLK2Freq+0x24>)
 800355e:	5ccb      	ldrb	r3, [r1, r3]
 8003560:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003564:	4618      	mov	r0, r3
 8003566:	bd80      	pop	{r7, pc}
 8003568:	40023800 	.word	0x40023800
 800356c:	08005520 	.word	0x08005520

08003570 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003570:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003574:	b0ae      	sub	sp, #184	@ 0xb8
 8003576:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003578:	2300      	movs	r3, #0
 800357a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800357e:	2300      	movs	r3, #0
 8003580:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003584:	2300      	movs	r3, #0
 8003586:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800358a:	2300      	movs	r3, #0
 800358c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003590:	2300      	movs	r3, #0
 8003592:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003596:	4bcb      	ldr	r3, [pc, #812]	@ (80038c4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f003 030c 	and.w	r3, r3, #12
 800359e:	2b0c      	cmp	r3, #12
 80035a0:	f200 8206 	bhi.w	80039b0 <HAL_RCC_GetSysClockFreq+0x440>
 80035a4:	a201      	add	r2, pc, #4	@ (adr r2, 80035ac <HAL_RCC_GetSysClockFreq+0x3c>)
 80035a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035aa:	bf00      	nop
 80035ac:	080035e1 	.word	0x080035e1
 80035b0:	080039b1 	.word	0x080039b1
 80035b4:	080039b1 	.word	0x080039b1
 80035b8:	080039b1 	.word	0x080039b1
 80035bc:	080035e9 	.word	0x080035e9
 80035c0:	080039b1 	.word	0x080039b1
 80035c4:	080039b1 	.word	0x080039b1
 80035c8:	080039b1 	.word	0x080039b1
 80035cc:	080035f1 	.word	0x080035f1
 80035d0:	080039b1 	.word	0x080039b1
 80035d4:	080039b1 	.word	0x080039b1
 80035d8:	080039b1 	.word	0x080039b1
 80035dc:	080037e1 	.word	0x080037e1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035e0:	4bb9      	ldr	r3, [pc, #740]	@ (80038c8 <HAL_RCC_GetSysClockFreq+0x358>)
 80035e2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80035e6:	e1e7      	b.n	80039b8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035e8:	4bb8      	ldr	r3, [pc, #736]	@ (80038cc <HAL_RCC_GetSysClockFreq+0x35c>)
 80035ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80035ee:	e1e3      	b.n	80039b8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035f0:	4bb4      	ldr	r3, [pc, #720]	@ (80038c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80035f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035fc:	4bb1      	ldr	r3, [pc, #708]	@ (80038c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003604:	2b00      	cmp	r3, #0
 8003606:	d071      	beq.n	80036ec <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003608:	4bae      	ldr	r3, [pc, #696]	@ (80038c4 <HAL_RCC_GetSysClockFreq+0x354>)
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	099b      	lsrs	r3, r3, #6
 800360e:	2200      	movs	r2, #0
 8003610:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003614:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003618:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800361c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003620:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003624:	2300      	movs	r3, #0
 8003626:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800362a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800362e:	4622      	mov	r2, r4
 8003630:	462b      	mov	r3, r5
 8003632:	f04f 0000 	mov.w	r0, #0
 8003636:	f04f 0100 	mov.w	r1, #0
 800363a:	0159      	lsls	r1, r3, #5
 800363c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003640:	0150      	lsls	r0, r2, #5
 8003642:	4602      	mov	r2, r0
 8003644:	460b      	mov	r3, r1
 8003646:	4621      	mov	r1, r4
 8003648:	1a51      	subs	r1, r2, r1
 800364a:	6439      	str	r1, [r7, #64]	@ 0x40
 800364c:	4629      	mov	r1, r5
 800364e:	eb63 0301 	sbc.w	r3, r3, r1
 8003652:	647b      	str	r3, [r7, #68]	@ 0x44
 8003654:	f04f 0200 	mov.w	r2, #0
 8003658:	f04f 0300 	mov.w	r3, #0
 800365c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003660:	4649      	mov	r1, r9
 8003662:	018b      	lsls	r3, r1, #6
 8003664:	4641      	mov	r1, r8
 8003666:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800366a:	4641      	mov	r1, r8
 800366c:	018a      	lsls	r2, r1, #6
 800366e:	4641      	mov	r1, r8
 8003670:	1a51      	subs	r1, r2, r1
 8003672:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003674:	4649      	mov	r1, r9
 8003676:	eb63 0301 	sbc.w	r3, r3, r1
 800367a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800367c:	f04f 0200 	mov.w	r2, #0
 8003680:	f04f 0300 	mov.w	r3, #0
 8003684:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003688:	4649      	mov	r1, r9
 800368a:	00cb      	lsls	r3, r1, #3
 800368c:	4641      	mov	r1, r8
 800368e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003692:	4641      	mov	r1, r8
 8003694:	00ca      	lsls	r2, r1, #3
 8003696:	4610      	mov	r0, r2
 8003698:	4619      	mov	r1, r3
 800369a:	4603      	mov	r3, r0
 800369c:	4622      	mov	r2, r4
 800369e:	189b      	adds	r3, r3, r2
 80036a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80036a2:	462b      	mov	r3, r5
 80036a4:	460a      	mov	r2, r1
 80036a6:	eb42 0303 	adc.w	r3, r2, r3
 80036aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80036ac:	f04f 0200 	mov.w	r2, #0
 80036b0:	f04f 0300 	mov.w	r3, #0
 80036b4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80036b8:	4629      	mov	r1, r5
 80036ba:	024b      	lsls	r3, r1, #9
 80036bc:	4621      	mov	r1, r4
 80036be:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80036c2:	4621      	mov	r1, r4
 80036c4:	024a      	lsls	r2, r1, #9
 80036c6:	4610      	mov	r0, r2
 80036c8:	4619      	mov	r1, r3
 80036ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80036ce:	2200      	movs	r2, #0
 80036d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80036d4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80036d8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80036dc:	f7fc fde8 	bl	80002b0 <__aeabi_uldivmod>
 80036e0:	4602      	mov	r2, r0
 80036e2:	460b      	mov	r3, r1
 80036e4:	4613      	mov	r3, r2
 80036e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80036ea:	e067      	b.n	80037bc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036ec:	4b75      	ldr	r3, [pc, #468]	@ (80038c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	099b      	lsrs	r3, r3, #6
 80036f2:	2200      	movs	r2, #0
 80036f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80036f8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80036fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003700:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003704:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003706:	2300      	movs	r3, #0
 8003708:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800370a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800370e:	4622      	mov	r2, r4
 8003710:	462b      	mov	r3, r5
 8003712:	f04f 0000 	mov.w	r0, #0
 8003716:	f04f 0100 	mov.w	r1, #0
 800371a:	0159      	lsls	r1, r3, #5
 800371c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003720:	0150      	lsls	r0, r2, #5
 8003722:	4602      	mov	r2, r0
 8003724:	460b      	mov	r3, r1
 8003726:	4621      	mov	r1, r4
 8003728:	1a51      	subs	r1, r2, r1
 800372a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800372c:	4629      	mov	r1, r5
 800372e:	eb63 0301 	sbc.w	r3, r3, r1
 8003732:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003734:	f04f 0200 	mov.w	r2, #0
 8003738:	f04f 0300 	mov.w	r3, #0
 800373c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003740:	4649      	mov	r1, r9
 8003742:	018b      	lsls	r3, r1, #6
 8003744:	4641      	mov	r1, r8
 8003746:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800374a:	4641      	mov	r1, r8
 800374c:	018a      	lsls	r2, r1, #6
 800374e:	4641      	mov	r1, r8
 8003750:	ebb2 0a01 	subs.w	sl, r2, r1
 8003754:	4649      	mov	r1, r9
 8003756:	eb63 0b01 	sbc.w	fp, r3, r1
 800375a:	f04f 0200 	mov.w	r2, #0
 800375e:	f04f 0300 	mov.w	r3, #0
 8003762:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003766:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800376a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800376e:	4692      	mov	sl, r2
 8003770:	469b      	mov	fp, r3
 8003772:	4623      	mov	r3, r4
 8003774:	eb1a 0303 	adds.w	r3, sl, r3
 8003778:	623b      	str	r3, [r7, #32]
 800377a:	462b      	mov	r3, r5
 800377c:	eb4b 0303 	adc.w	r3, fp, r3
 8003780:	627b      	str	r3, [r7, #36]	@ 0x24
 8003782:	f04f 0200 	mov.w	r2, #0
 8003786:	f04f 0300 	mov.w	r3, #0
 800378a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800378e:	4629      	mov	r1, r5
 8003790:	028b      	lsls	r3, r1, #10
 8003792:	4621      	mov	r1, r4
 8003794:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003798:	4621      	mov	r1, r4
 800379a:	028a      	lsls	r2, r1, #10
 800379c:	4610      	mov	r0, r2
 800379e:	4619      	mov	r1, r3
 80037a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80037a4:	2200      	movs	r2, #0
 80037a6:	673b      	str	r3, [r7, #112]	@ 0x70
 80037a8:	677a      	str	r2, [r7, #116]	@ 0x74
 80037aa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80037ae:	f7fc fd7f 	bl	80002b0 <__aeabi_uldivmod>
 80037b2:	4602      	mov	r2, r0
 80037b4:	460b      	mov	r3, r1
 80037b6:	4613      	mov	r3, r2
 80037b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80037bc:	4b41      	ldr	r3, [pc, #260]	@ (80038c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	0c1b      	lsrs	r3, r3, #16
 80037c2:	f003 0303 	and.w	r3, r3, #3
 80037c6:	3301      	adds	r3, #1
 80037c8:	005b      	lsls	r3, r3, #1
 80037ca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80037ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80037d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80037d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80037da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80037de:	e0eb      	b.n	80039b8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037e0:	4b38      	ldr	r3, [pc, #224]	@ (80038c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80037e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037ec:	4b35      	ldr	r3, [pc, #212]	@ (80038c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d06b      	beq.n	80038d0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037f8:	4b32      	ldr	r3, [pc, #200]	@ (80038c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	099b      	lsrs	r3, r3, #6
 80037fe:	2200      	movs	r2, #0
 8003800:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003802:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003804:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003806:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800380a:	663b      	str	r3, [r7, #96]	@ 0x60
 800380c:	2300      	movs	r3, #0
 800380e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003810:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003814:	4622      	mov	r2, r4
 8003816:	462b      	mov	r3, r5
 8003818:	f04f 0000 	mov.w	r0, #0
 800381c:	f04f 0100 	mov.w	r1, #0
 8003820:	0159      	lsls	r1, r3, #5
 8003822:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003826:	0150      	lsls	r0, r2, #5
 8003828:	4602      	mov	r2, r0
 800382a:	460b      	mov	r3, r1
 800382c:	4621      	mov	r1, r4
 800382e:	1a51      	subs	r1, r2, r1
 8003830:	61b9      	str	r1, [r7, #24]
 8003832:	4629      	mov	r1, r5
 8003834:	eb63 0301 	sbc.w	r3, r3, r1
 8003838:	61fb      	str	r3, [r7, #28]
 800383a:	f04f 0200 	mov.w	r2, #0
 800383e:	f04f 0300 	mov.w	r3, #0
 8003842:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003846:	4659      	mov	r1, fp
 8003848:	018b      	lsls	r3, r1, #6
 800384a:	4651      	mov	r1, sl
 800384c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003850:	4651      	mov	r1, sl
 8003852:	018a      	lsls	r2, r1, #6
 8003854:	4651      	mov	r1, sl
 8003856:	ebb2 0801 	subs.w	r8, r2, r1
 800385a:	4659      	mov	r1, fp
 800385c:	eb63 0901 	sbc.w	r9, r3, r1
 8003860:	f04f 0200 	mov.w	r2, #0
 8003864:	f04f 0300 	mov.w	r3, #0
 8003868:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800386c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003870:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003874:	4690      	mov	r8, r2
 8003876:	4699      	mov	r9, r3
 8003878:	4623      	mov	r3, r4
 800387a:	eb18 0303 	adds.w	r3, r8, r3
 800387e:	613b      	str	r3, [r7, #16]
 8003880:	462b      	mov	r3, r5
 8003882:	eb49 0303 	adc.w	r3, r9, r3
 8003886:	617b      	str	r3, [r7, #20]
 8003888:	f04f 0200 	mov.w	r2, #0
 800388c:	f04f 0300 	mov.w	r3, #0
 8003890:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003894:	4629      	mov	r1, r5
 8003896:	024b      	lsls	r3, r1, #9
 8003898:	4621      	mov	r1, r4
 800389a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800389e:	4621      	mov	r1, r4
 80038a0:	024a      	lsls	r2, r1, #9
 80038a2:	4610      	mov	r0, r2
 80038a4:	4619      	mov	r1, r3
 80038a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80038aa:	2200      	movs	r2, #0
 80038ac:	65bb      	str	r3, [r7, #88]	@ 0x58
 80038ae:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80038b0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80038b4:	f7fc fcfc 	bl	80002b0 <__aeabi_uldivmod>
 80038b8:	4602      	mov	r2, r0
 80038ba:	460b      	mov	r3, r1
 80038bc:	4613      	mov	r3, r2
 80038be:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80038c2:	e065      	b.n	8003990 <HAL_RCC_GetSysClockFreq+0x420>
 80038c4:	40023800 	.word	0x40023800
 80038c8:	00f42400 	.word	0x00f42400
 80038cc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038d0:	4b3d      	ldr	r3, [pc, #244]	@ (80039c8 <HAL_RCC_GetSysClockFreq+0x458>)
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	099b      	lsrs	r3, r3, #6
 80038d6:	2200      	movs	r2, #0
 80038d8:	4618      	mov	r0, r3
 80038da:	4611      	mov	r1, r2
 80038dc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80038e0:	653b      	str	r3, [r7, #80]	@ 0x50
 80038e2:	2300      	movs	r3, #0
 80038e4:	657b      	str	r3, [r7, #84]	@ 0x54
 80038e6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80038ea:	4642      	mov	r2, r8
 80038ec:	464b      	mov	r3, r9
 80038ee:	f04f 0000 	mov.w	r0, #0
 80038f2:	f04f 0100 	mov.w	r1, #0
 80038f6:	0159      	lsls	r1, r3, #5
 80038f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038fc:	0150      	lsls	r0, r2, #5
 80038fe:	4602      	mov	r2, r0
 8003900:	460b      	mov	r3, r1
 8003902:	4641      	mov	r1, r8
 8003904:	1a51      	subs	r1, r2, r1
 8003906:	60b9      	str	r1, [r7, #8]
 8003908:	4649      	mov	r1, r9
 800390a:	eb63 0301 	sbc.w	r3, r3, r1
 800390e:	60fb      	str	r3, [r7, #12]
 8003910:	f04f 0200 	mov.w	r2, #0
 8003914:	f04f 0300 	mov.w	r3, #0
 8003918:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800391c:	4659      	mov	r1, fp
 800391e:	018b      	lsls	r3, r1, #6
 8003920:	4651      	mov	r1, sl
 8003922:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003926:	4651      	mov	r1, sl
 8003928:	018a      	lsls	r2, r1, #6
 800392a:	4651      	mov	r1, sl
 800392c:	1a54      	subs	r4, r2, r1
 800392e:	4659      	mov	r1, fp
 8003930:	eb63 0501 	sbc.w	r5, r3, r1
 8003934:	f04f 0200 	mov.w	r2, #0
 8003938:	f04f 0300 	mov.w	r3, #0
 800393c:	00eb      	lsls	r3, r5, #3
 800393e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003942:	00e2      	lsls	r2, r4, #3
 8003944:	4614      	mov	r4, r2
 8003946:	461d      	mov	r5, r3
 8003948:	4643      	mov	r3, r8
 800394a:	18e3      	adds	r3, r4, r3
 800394c:	603b      	str	r3, [r7, #0]
 800394e:	464b      	mov	r3, r9
 8003950:	eb45 0303 	adc.w	r3, r5, r3
 8003954:	607b      	str	r3, [r7, #4]
 8003956:	f04f 0200 	mov.w	r2, #0
 800395a:	f04f 0300 	mov.w	r3, #0
 800395e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003962:	4629      	mov	r1, r5
 8003964:	028b      	lsls	r3, r1, #10
 8003966:	4621      	mov	r1, r4
 8003968:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800396c:	4621      	mov	r1, r4
 800396e:	028a      	lsls	r2, r1, #10
 8003970:	4610      	mov	r0, r2
 8003972:	4619      	mov	r1, r3
 8003974:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003978:	2200      	movs	r2, #0
 800397a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800397c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800397e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003982:	f7fc fc95 	bl	80002b0 <__aeabi_uldivmod>
 8003986:	4602      	mov	r2, r0
 8003988:	460b      	mov	r3, r1
 800398a:	4613      	mov	r3, r2
 800398c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003990:	4b0d      	ldr	r3, [pc, #52]	@ (80039c8 <HAL_RCC_GetSysClockFreq+0x458>)
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	0f1b      	lsrs	r3, r3, #28
 8003996:	f003 0307 	and.w	r3, r3, #7
 800399a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800399e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80039a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80039a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80039aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80039ae:	e003      	b.n	80039b8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039b0:	4b06      	ldr	r3, [pc, #24]	@ (80039cc <HAL_RCC_GetSysClockFreq+0x45c>)
 80039b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80039b6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039b8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80039bc:	4618      	mov	r0, r3
 80039be:	37b8      	adds	r7, #184	@ 0xb8
 80039c0:	46bd      	mov	sp, r7
 80039c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039c6:	bf00      	nop
 80039c8:	40023800 	.word	0x40023800
 80039cc:	00f42400 	.word	0x00f42400

080039d0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b086      	sub	sp, #24
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d101      	bne.n	80039e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e28d      	b.n	8003efe <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0301 	and.w	r3, r3, #1
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	f000 8083 	beq.w	8003af6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80039f0:	4b94      	ldr	r3, [pc, #592]	@ (8003c44 <HAL_RCC_OscConfig+0x274>)
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	f003 030c 	and.w	r3, r3, #12
 80039f8:	2b04      	cmp	r3, #4
 80039fa:	d019      	beq.n	8003a30 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80039fc:	4b91      	ldr	r3, [pc, #580]	@ (8003c44 <HAL_RCC_OscConfig+0x274>)
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	f003 030c 	and.w	r3, r3, #12
        || \
 8003a04:	2b08      	cmp	r3, #8
 8003a06:	d106      	bne.n	8003a16 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003a08:	4b8e      	ldr	r3, [pc, #568]	@ (8003c44 <HAL_RCC_OscConfig+0x274>)
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a10:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a14:	d00c      	beq.n	8003a30 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a16:	4b8b      	ldr	r3, [pc, #556]	@ (8003c44 <HAL_RCC_OscConfig+0x274>)
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003a1e:	2b0c      	cmp	r3, #12
 8003a20:	d112      	bne.n	8003a48 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a22:	4b88      	ldr	r3, [pc, #544]	@ (8003c44 <HAL_RCC_OscConfig+0x274>)
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a2a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a2e:	d10b      	bne.n	8003a48 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a30:	4b84      	ldr	r3, [pc, #528]	@ (8003c44 <HAL_RCC_OscConfig+0x274>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d05b      	beq.n	8003af4 <HAL_RCC_OscConfig+0x124>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d157      	bne.n	8003af4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e25a      	b.n	8003efe <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a50:	d106      	bne.n	8003a60 <HAL_RCC_OscConfig+0x90>
 8003a52:	4b7c      	ldr	r3, [pc, #496]	@ (8003c44 <HAL_RCC_OscConfig+0x274>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a7b      	ldr	r2, [pc, #492]	@ (8003c44 <HAL_RCC_OscConfig+0x274>)
 8003a58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a5c:	6013      	str	r3, [r2, #0]
 8003a5e:	e01d      	b.n	8003a9c <HAL_RCC_OscConfig+0xcc>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a68:	d10c      	bne.n	8003a84 <HAL_RCC_OscConfig+0xb4>
 8003a6a:	4b76      	ldr	r3, [pc, #472]	@ (8003c44 <HAL_RCC_OscConfig+0x274>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a75      	ldr	r2, [pc, #468]	@ (8003c44 <HAL_RCC_OscConfig+0x274>)
 8003a70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a74:	6013      	str	r3, [r2, #0]
 8003a76:	4b73      	ldr	r3, [pc, #460]	@ (8003c44 <HAL_RCC_OscConfig+0x274>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a72      	ldr	r2, [pc, #456]	@ (8003c44 <HAL_RCC_OscConfig+0x274>)
 8003a7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a80:	6013      	str	r3, [r2, #0]
 8003a82:	e00b      	b.n	8003a9c <HAL_RCC_OscConfig+0xcc>
 8003a84:	4b6f      	ldr	r3, [pc, #444]	@ (8003c44 <HAL_RCC_OscConfig+0x274>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a6e      	ldr	r2, [pc, #440]	@ (8003c44 <HAL_RCC_OscConfig+0x274>)
 8003a8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a8e:	6013      	str	r3, [r2, #0]
 8003a90:	4b6c      	ldr	r3, [pc, #432]	@ (8003c44 <HAL_RCC_OscConfig+0x274>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a6b      	ldr	r2, [pc, #428]	@ (8003c44 <HAL_RCC_OscConfig+0x274>)
 8003a96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d013      	beq.n	8003acc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa4:	f7fe f846 	bl	8001b34 <HAL_GetTick>
 8003aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aaa:	e008      	b.n	8003abe <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003aac:	f7fe f842 	bl	8001b34 <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	2b64      	cmp	r3, #100	@ 0x64
 8003ab8:	d901      	bls.n	8003abe <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e21f      	b.n	8003efe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003abe:	4b61      	ldr	r3, [pc, #388]	@ (8003c44 <HAL_RCC_OscConfig+0x274>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d0f0      	beq.n	8003aac <HAL_RCC_OscConfig+0xdc>
 8003aca:	e014      	b.n	8003af6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003acc:	f7fe f832 	bl	8001b34 <HAL_GetTick>
 8003ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ad2:	e008      	b.n	8003ae6 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ad4:	f7fe f82e 	bl	8001b34 <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	2b64      	cmp	r3, #100	@ 0x64
 8003ae0:	d901      	bls.n	8003ae6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e20b      	b.n	8003efe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ae6:	4b57      	ldr	r3, [pc, #348]	@ (8003c44 <HAL_RCC_OscConfig+0x274>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d1f0      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x104>
 8003af2:	e000      	b.n	8003af6 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003af4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0302 	and.w	r3, r3, #2
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d06f      	beq.n	8003be2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003b02:	4b50      	ldr	r3, [pc, #320]	@ (8003c44 <HAL_RCC_OscConfig+0x274>)
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f003 030c 	and.w	r3, r3, #12
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d017      	beq.n	8003b3e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003b0e:	4b4d      	ldr	r3, [pc, #308]	@ (8003c44 <HAL_RCC_OscConfig+0x274>)
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f003 030c 	and.w	r3, r3, #12
        || \
 8003b16:	2b08      	cmp	r3, #8
 8003b18:	d105      	bne.n	8003b26 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003b1a:	4b4a      	ldr	r3, [pc, #296]	@ (8003c44 <HAL_RCC_OscConfig+0x274>)
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00b      	beq.n	8003b3e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b26:	4b47      	ldr	r3, [pc, #284]	@ (8003c44 <HAL_RCC_OscConfig+0x274>)
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003b2e:	2b0c      	cmp	r3, #12
 8003b30:	d11c      	bne.n	8003b6c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b32:	4b44      	ldr	r3, [pc, #272]	@ (8003c44 <HAL_RCC_OscConfig+0x274>)
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d116      	bne.n	8003b6c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b3e:	4b41      	ldr	r3, [pc, #260]	@ (8003c44 <HAL_RCC_OscConfig+0x274>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0302 	and.w	r3, r3, #2
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d005      	beq.n	8003b56 <HAL_RCC_OscConfig+0x186>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d001      	beq.n	8003b56 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e1d3      	b.n	8003efe <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b56:	4b3b      	ldr	r3, [pc, #236]	@ (8003c44 <HAL_RCC_OscConfig+0x274>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	00db      	lsls	r3, r3, #3
 8003b64:	4937      	ldr	r1, [pc, #220]	@ (8003c44 <HAL_RCC_OscConfig+0x274>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b6a:	e03a      	b.n	8003be2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d020      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b74:	4b34      	ldr	r3, [pc, #208]	@ (8003c48 <HAL_RCC_OscConfig+0x278>)
 8003b76:	2201      	movs	r2, #1
 8003b78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b7a:	f7fd ffdb 	bl	8001b34 <HAL_GetTick>
 8003b7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b80:	e008      	b.n	8003b94 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b82:	f7fd ffd7 	bl	8001b34 <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d901      	bls.n	8003b94 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e1b4      	b.n	8003efe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b94:	4b2b      	ldr	r3, [pc, #172]	@ (8003c44 <HAL_RCC_OscConfig+0x274>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0302 	and.w	r3, r3, #2
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d0f0      	beq.n	8003b82 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ba0:	4b28      	ldr	r3, [pc, #160]	@ (8003c44 <HAL_RCC_OscConfig+0x274>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	691b      	ldr	r3, [r3, #16]
 8003bac:	00db      	lsls	r3, r3, #3
 8003bae:	4925      	ldr	r1, [pc, #148]	@ (8003c44 <HAL_RCC_OscConfig+0x274>)
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	600b      	str	r3, [r1, #0]
 8003bb4:	e015      	b.n	8003be2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bb6:	4b24      	ldr	r3, [pc, #144]	@ (8003c48 <HAL_RCC_OscConfig+0x278>)
 8003bb8:	2200      	movs	r2, #0
 8003bba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bbc:	f7fd ffba 	bl	8001b34 <HAL_GetTick>
 8003bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bc2:	e008      	b.n	8003bd6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bc4:	f7fd ffb6 	bl	8001b34 <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d901      	bls.n	8003bd6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e193      	b.n	8003efe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bd6:	4b1b      	ldr	r3, [pc, #108]	@ (8003c44 <HAL_RCC_OscConfig+0x274>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0302 	and.w	r3, r3, #2
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d1f0      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0308 	and.w	r3, r3, #8
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d036      	beq.n	8003c5c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	695b      	ldr	r3, [r3, #20]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d016      	beq.n	8003c24 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bf6:	4b15      	ldr	r3, [pc, #84]	@ (8003c4c <HAL_RCC_OscConfig+0x27c>)
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bfc:	f7fd ff9a 	bl	8001b34 <HAL_GetTick>
 8003c00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c02:	e008      	b.n	8003c16 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c04:	f7fd ff96 	bl	8001b34 <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d901      	bls.n	8003c16 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e173      	b.n	8003efe <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c16:	4b0b      	ldr	r3, [pc, #44]	@ (8003c44 <HAL_RCC_OscConfig+0x274>)
 8003c18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d0f0      	beq.n	8003c04 <HAL_RCC_OscConfig+0x234>
 8003c22:	e01b      	b.n	8003c5c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c24:	4b09      	ldr	r3, [pc, #36]	@ (8003c4c <HAL_RCC_OscConfig+0x27c>)
 8003c26:	2200      	movs	r2, #0
 8003c28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c2a:	f7fd ff83 	bl	8001b34 <HAL_GetTick>
 8003c2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c30:	e00e      	b.n	8003c50 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c32:	f7fd ff7f 	bl	8001b34 <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d907      	bls.n	8003c50 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	e15c      	b.n	8003efe <HAL_RCC_OscConfig+0x52e>
 8003c44:	40023800 	.word	0x40023800
 8003c48:	42470000 	.word	0x42470000
 8003c4c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c50:	4b8a      	ldr	r3, [pc, #552]	@ (8003e7c <HAL_RCC_OscConfig+0x4ac>)
 8003c52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c54:	f003 0302 	and.w	r3, r3, #2
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d1ea      	bne.n	8003c32 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0304 	and.w	r3, r3, #4
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	f000 8097 	beq.w	8003d98 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c6e:	4b83      	ldr	r3, [pc, #524]	@ (8003e7c <HAL_RCC_OscConfig+0x4ac>)
 8003c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d10f      	bne.n	8003c9a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	60bb      	str	r3, [r7, #8]
 8003c7e:	4b7f      	ldr	r3, [pc, #508]	@ (8003e7c <HAL_RCC_OscConfig+0x4ac>)
 8003c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c82:	4a7e      	ldr	r2, [pc, #504]	@ (8003e7c <HAL_RCC_OscConfig+0x4ac>)
 8003c84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c88:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c8a:	4b7c      	ldr	r3, [pc, #496]	@ (8003e7c <HAL_RCC_OscConfig+0x4ac>)
 8003c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c92:	60bb      	str	r3, [r7, #8]
 8003c94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c96:	2301      	movs	r3, #1
 8003c98:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c9a:	4b79      	ldr	r3, [pc, #484]	@ (8003e80 <HAL_RCC_OscConfig+0x4b0>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d118      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ca6:	4b76      	ldr	r3, [pc, #472]	@ (8003e80 <HAL_RCC_OscConfig+0x4b0>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a75      	ldr	r2, [pc, #468]	@ (8003e80 <HAL_RCC_OscConfig+0x4b0>)
 8003cac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cb2:	f7fd ff3f 	bl	8001b34 <HAL_GetTick>
 8003cb6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cb8:	e008      	b.n	8003ccc <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cba:	f7fd ff3b 	bl	8001b34 <HAL_GetTick>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d901      	bls.n	8003ccc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	e118      	b.n	8003efe <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ccc:	4b6c      	ldr	r3, [pc, #432]	@ (8003e80 <HAL_RCC_OscConfig+0x4b0>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d0f0      	beq.n	8003cba <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d106      	bne.n	8003cee <HAL_RCC_OscConfig+0x31e>
 8003ce0:	4b66      	ldr	r3, [pc, #408]	@ (8003e7c <HAL_RCC_OscConfig+0x4ac>)
 8003ce2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ce4:	4a65      	ldr	r2, [pc, #404]	@ (8003e7c <HAL_RCC_OscConfig+0x4ac>)
 8003ce6:	f043 0301 	orr.w	r3, r3, #1
 8003cea:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cec:	e01c      	b.n	8003d28 <HAL_RCC_OscConfig+0x358>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	2b05      	cmp	r3, #5
 8003cf4:	d10c      	bne.n	8003d10 <HAL_RCC_OscConfig+0x340>
 8003cf6:	4b61      	ldr	r3, [pc, #388]	@ (8003e7c <HAL_RCC_OscConfig+0x4ac>)
 8003cf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cfa:	4a60      	ldr	r2, [pc, #384]	@ (8003e7c <HAL_RCC_OscConfig+0x4ac>)
 8003cfc:	f043 0304 	orr.w	r3, r3, #4
 8003d00:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d02:	4b5e      	ldr	r3, [pc, #376]	@ (8003e7c <HAL_RCC_OscConfig+0x4ac>)
 8003d04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d06:	4a5d      	ldr	r2, [pc, #372]	@ (8003e7c <HAL_RCC_OscConfig+0x4ac>)
 8003d08:	f043 0301 	orr.w	r3, r3, #1
 8003d0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d0e:	e00b      	b.n	8003d28 <HAL_RCC_OscConfig+0x358>
 8003d10:	4b5a      	ldr	r3, [pc, #360]	@ (8003e7c <HAL_RCC_OscConfig+0x4ac>)
 8003d12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d14:	4a59      	ldr	r2, [pc, #356]	@ (8003e7c <HAL_RCC_OscConfig+0x4ac>)
 8003d16:	f023 0301 	bic.w	r3, r3, #1
 8003d1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d1c:	4b57      	ldr	r3, [pc, #348]	@ (8003e7c <HAL_RCC_OscConfig+0x4ac>)
 8003d1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d20:	4a56      	ldr	r2, [pc, #344]	@ (8003e7c <HAL_RCC_OscConfig+0x4ac>)
 8003d22:	f023 0304 	bic.w	r3, r3, #4
 8003d26:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d015      	beq.n	8003d5c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d30:	f7fd ff00 	bl	8001b34 <HAL_GetTick>
 8003d34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d36:	e00a      	b.n	8003d4e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d38:	f7fd fefc 	bl	8001b34 <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d901      	bls.n	8003d4e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e0d7      	b.n	8003efe <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d4e:	4b4b      	ldr	r3, [pc, #300]	@ (8003e7c <HAL_RCC_OscConfig+0x4ac>)
 8003d50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d52:	f003 0302 	and.w	r3, r3, #2
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d0ee      	beq.n	8003d38 <HAL_RCC_OscConfig+0x368>
 8003d5a:	e014      	b.n	8003d86 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d5c:	f7fd feea 	bl	8001b34 <HAL_GetTick>
 8003d60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d62:	e00a      	b.n	8003d7a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d64:	f7fd fee6 	bl	8001b34 <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d901      	bls.n	8003d7a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e0c1      	b.n	8003efe <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d7a:	4b40      	ldr	r3, [pc, #256]	@ (8003e7c <HAL_RCC_OscConfig+0x4ac>)
 8003d7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d7e:	f003 0302 	and.w	r3, r3, #2
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d1ee      	bne.n	8003d64 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d86:	7dfb      	ldrb	r3, [r7, #23]
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d105      	bne.n	8003d98 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d8c:	4b3b      	ldr	r3, [pc, #236]	@ (8003e7c <HAL_RCC_OscConfig+0x4ac>)
 8003d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d90:	4a3a      	ldr	r2, [pc, #232]	@ (8003e7c <HAL_RCC_OscConfig+0x4ac>)
 8003d92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d96:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	699b      	ldr	r3, [r3, #24]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	f000 80ad 	beq.w	8003efc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003da2:	4b36      	ldr	r3, [pc, #216]	@ (8003e7c <HAL_RCC_OscConfig+0x4ac>)
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	f003 030c 	and.w	r3, r3, #12
 8003daa:	2b08      	cmp	r3, #8
 8003dac:	d060      	beq.n	8003e70 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	699b      	ldr	r3, [r3, #24]
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d145      	bne.n	8003e42 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003db6:	4b33      	ldr	r3, [pc, #204]	@ (8003e84 <HAL_RCC_OscConfig+0x4b4>)
 8003db8:	2200      	movs	r2, #0
 8003dba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dbc:	f7fd feba 	bl	8001b34 <HAL_GetTick>
 8003dc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dc2:	e008      	b.n	8003dd6 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dc4:	f7fd feb6 	bl	8001b34 <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e093      	b.n	8003efe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dd6:	4b29      	ldr	r3, [pc, #164]	@ (8003e7c <HAL_RCC_OscConfig+0x4ac>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d1f0      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	69da      	ldr	r2, [r3, #28]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a1b      	ldr	r3, [r3, #32]
 8003dea:	431a      	orrs	r2, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df0:	019b      	lsls	r3, r3, #6
 8003df2:	431a      	orrs	r2, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003df8:	085b      	lsrs	r3, r3, #1
 8003dfa:	3b01      	subs	r3, #1
 8003dfc:	041b      	lsls	r3, r3, #16
 8003dfe:	431a      	orrs	r2, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e04:	061b      	lsls	r3, r3, #24
 8003e06:	431a      	orrs	r2, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e0c:	071b      	lsls	r3, r3, #28
 8003e0e:	491b      	ldr	r1, [pc, #108]	@ (8003e7c <HAL_RCC_OscConfig+0x4ac>)
 8003e10:	4313      	orrs	r3, r2
 8003e12:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e14:	4b1b      	ldr	r3, [pc, #108]	@ (8003e84 <HAL_RCC_OscConfig+0x4b4>)
 8003e16:	2201      	movs	r2, #1
 8003e18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e1a:	f7fd fe8b 	bl	8001b34 <HAL_GetTick>
 8003e1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e20:	e008      	b.n	8003e34 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e22:	f7fd fe87 	bl	8001b34 <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d901      	bls.n	8003e34 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e064      	b.n	8003efe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e34:	4b11      	ldr	r3, [pc, #68]	@ (8003e7c <HAL_RCC_OscConfig+0x4ac>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d0f0      	beq.n	8003e22 <HAL_RCC_OscConfig+0x452>
 8003e40:	e05c      	b.n	8003efc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e42:	4b10      	ldr	r3, [pc, #64]	@ (8003e84 <HAL_RCC_OscConfig+0x4b4>)
 8003e44:	2200      	movs	r2, #0
 8003e46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e48:	f7fd fe74 	bl	8001b34 <HAL_GetTick>
 8003e4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e4e:	e008      	b.n	8003e62 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e50:	f7fd fe70 	bl	8001b34 <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e04d      	b.n	8003efe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e62:	4b06      	ldr	r3, [pc, #24]	@ (8003e7c <HAL_RCC_OscConfig+0x4ac>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d1f0      	bne.n	8003e50 <HAL_RCC_OscConfig+0x480>
 8003e6e:	e045      	b.n	8003efc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	699b      	ldr	r3, [r3, #24]
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d107      	bne.n	8003e88 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e040      	b.n	8003efe <HAL_RCC_OscConfig+0x52e>
 8003e7c:	40023800 	.word	0x40023800
 8003e80:	40007000 	.word	0x40007000
 8003e84:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e88:	4b1f      	ldr	r3, [pc, #124]	@ (8003f08 <HAL_RCC_OscConfig+0x538>)
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	699b      	ldr	r3, [r3, #24]
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d030      	beq.n	8003ef8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d129      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d122      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003eb2:	68fa      	ldr	r2, [r7, #12]
 8003eb4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003eb8:	4013      	ands	r3, r2
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003ebe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d119      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ece:	085b      	lsrs	r3, r3, #1
 8003ed0:	3b01      	subs	r3, #1
 8003ed2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d10f      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ee2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d107      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ef2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d001      	beq.n	8003efc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e000      	b.n	8003efe <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3718      	adds	r7, #24
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	40023800 	.word	0x40023800

08003f0c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b082      	sub	sp, #8
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d101      	bne.n	8003f1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e07b      	b.n	8004016 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d108      	bne.n	8003f38 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f2e:	d009      	beq.n	8003f44 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	61da      	str	r2, [r3, #28]
 8003f36:	e005      	b.n	8003f44 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d106      	bne.n	8003f64 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f7fd fc50 	bl	8001804 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2202      	movs	r2, #2
 8003f68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f7a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003f8c:	431a      	orrs	r2, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f96:	431a      	orrs	r2, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	691b      	ldr	r3, [r3, #16]
 8003f9c:	f003 0302 	and.w	r3, r3, #2
 8003fa0:	431a      	orrs	r2, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	695b      	ldr	r3, [r3, #20]
 8003fa6:	f003 0301 	and.w	r3, r3, #1
 8003faa:	431a      	orrs	r2, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	699b      	ldr	r3, [r3, #24]
 8003fb0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003fb4:	431a      	orrs	r2, r3
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	69db      	ldr	r3, [r3, #28]
 8003fba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003fbe:	431a      	orrs	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6a1b      	ldr	r3, [r3, #32]
 8003fc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fc8:	ea42 0103 	orr.w	r1, r2, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fd0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	430a      	orrs	r2, r1
 8003fda:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	699b      	ldr	r3, [r3, #24]
 8003fe0:	0c1b      	lsrs	r3, r3, #16
 8003fe2:	f003 0104 	and.w	r1, r3, #4
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fea:	f003 0210 	and.w	r2, r3, #16
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	430a      	orrs	r2, r1
 8003ff4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	69da      	ldr	r2, [r3, #28]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004004:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3708      	adds	r7, #8
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}

0800401e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800401e:	b580      	push	{r7, lr}
 8004020:	b08a      	sub	sp, #40	@ 0x28
 8004022:	af00      	add	r7, sp, #0
 8004024:	60f8      	str	r0, [r7, #12]
 8004026:	60b9      	str	r1, [r7, #8]
 8004028:	607a      	str	r2, [r7, #4]
 800402a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800402c:	2301      	movs	r3, #1
 800402e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004030:	f7fd fd80 	bl	8001b34 <HAL_GetTick>
 8004034:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800403c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004044:	887b      	ldrh	r3, [r7, #2]
 8004046:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004048:	7ffb      	ldrb	r3, [r7, #31]
 800404a:	2b01      	cmp	r3, #1
 800404c:	d00c      	beq.n	8004068 <HAL_SPI_TransmitReceive+0x4a>
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004054:	d106      	bne.n	8004064 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d102      	bne.n	8004064 <HAL_SPI_TransmitReceive+0x46>
 800405e:	7ffb      	ldrb	r3, [r7, #31]
 8004060:	2b04      	cmp	r3, #4
 8004062:	d001      	beq.n	8004068 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004064:	2302      	movs	r3, #2
 8004066:	e17f      	b.n	8004368 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d005      	beq.n	800407a <HAL_SPI_TransmitReceive+0x5c>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d002      	beq.n	800407a <HAL_SPI_TransmitReceive+0x5c>
 8004074:	887b      	ldrh	r3, [r7, #2]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d101      	bne.n	800407e <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e174      	b.n	8004368 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004084:	2b01      	cmp	r3, #1
 8004086:	d101      	bne.n	800408c <HAL_SPI_TransmitReceive+0x6e>
 8004088:	2302      	movs	r3, #2
 800408a:	e16d      	b.n	8004368 <HAL_SPI_TransmitReceive+0x34a>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800409a:	b2db      	uxtb	r3, r3
 800409c:	2b04      	cmp	r3, #4
 800409e:	d003      	beq.n	80040a8 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2205      	movs	r2, #5
 80040a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2200      	movs	r2, #0
 80040ac:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	887a      	ldrh	r2, [r7, #2]
 80040b8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	887a      	ldrh	r2, [r7, #2]
 80040be:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	68ba      	ldr	r2, [r7, #8]
 80040c4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	887a      	ldrh	r2, [r7, #2]
 80040ca:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	887a      	ldrh	r2, [r7, #2]
 80040d0:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2200      	movs	r2, #0
 80040d6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2200      	movs	r2, #0
 80040dc:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040e8:	2b40      	cmp	r3, #64	@ 0x40
 80040ea:	d007      	beq.n	80040fc <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80040fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004104:	d17e      	bne.n	8004204 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d002      	beq.n	8004114 <HAL_SPI_TransmitReceive+0xf6>
 800410e:	8afb      	ldrh	r3, [r7, #22]
 8004110:	2b01      	cmp	r3, #1
 8004112:	d16c      	bne.n	80041ee <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004118:	881a      	ldrh	r2, [r3, #0]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004124:	1c9a      	adds	r2, r3, #2
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800412e:	b29b      	uxth	r3, r3
 8004130:	3b01      	subs	r3, #1
 8004132:	b29a      	uxth	r2, r3
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004138:	e059      	b.n	80041ee <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f003 0302 	and.w	r3, r3, #2
 8004144:	2b02      	cmp	r3, #2
 8004146:	d11b      	bne.n	8004180 <HAL_SPI_TransmitReceive+0x162>
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800414c:	b29b      	uxth	r3, r3
 800414e:	2b00      	cmp	r3, #0
 8004150:	d016      	beq.n	8004180 <HAL_SPI_TransmitReceive+0x162>
 8004152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004154:	2b01      	cmp	r3, #1
 8004156:	d113      	bne.n	8004180 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800415c:	881a      	ldrh	r2, [r3, #0]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004168:	1c9a      	adds	r2, r3, #2
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004172:	b29b      	uxth	r3, r3
 8004174:	3b01      	subs	r3, #1
 8004176:	b29a      	uxth	r2, r3
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800417c:	2300      	movs	r3, #0
 800417e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f003 0301 	and.w	r3, r3, #1
 800418a:	2b01      	cmp	r3, #1
 800418c:	d119      	bne.n	80041c2 <HAL_SPI_TransmitReceive+0x1a4>
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004192:	b29b      	uxth	r3, r3
 8004194:	2b00      	cmp	r3, #0
 8004196:	d014      	beq.n	80041c2 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	68da      	ldr	r2, [r3, #12]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041a2:	b292      	uxth	r2, r2
 80041a4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041aa:	1c9a      	adds	r2, r3, #2
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	3b01      	subs	r3, #1
 80041b8:	b29a      	uxth	r2, r3
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80041be:	2301      	movs	r3, #1
 80041c0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80041c2:	f7fd fcb7 	bl	8001b34 <HAL_GetTick>
 80041c6:	4602      	mov	r2, r0
 80041c8:	6a3b      	ldr	r3, [r7, #32]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d80d      	bhi.n	80041ee <HAL_SPI_TransmitReceive+0x1d0>
 80041d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041d8:	d009      	beq.n	80041ee <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2201      	movs	r2, #1
 80041de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e0bc      	b.n	8004368 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d1a0      	bne.n	800413a <HAL_SPI_TransmitReceive+0x11c>
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d19b      	bne.n	800413a <HAL_SPI_TransmitReceive+0x11c>
 8004202:	e082      	b.n	800430a <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d002      	beq.n	8004212 <HAL_SPI_TransmitReceive+0x1f4>
 800420c:	8afb      	ldrh	r3, [r7, #22]
 800420e:	2b01      	cmp	r3, #1
 8004210:	d171      	bne.n	80042f6 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	330c      	adds	r3, #12
 800421c:	7812      	ldrb	r2, [r2, #0]
 800421e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004224:	1c5a      	adds	r2, r3, #1
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800422e:	b29b      	uxth	r3, r3
 8004230:	3b01      	subs	r3, #1
 8004232:	b29a      	uxth	r2, r3
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004238:	e05d      	b.n	80042f6 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	f003 0302 	and.w	r3, r3, #2
 8004244:	2b02      	cmp	r3, #2
 8004246:	d11c      	bne.n	8004282 <HAL_SPI_TransmitReceive+0x264>
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800424c:	b29b      	uxth	r3, r3
 800424e:	2b00      	cmp	r3, #0
 8004250:	d017      	beq.n	8004282 <HAL_SPI_TransmitReceive+0x264>
 8004252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004254:	2b01      	cmp	r3, #1
 8004256:	d114      	bne.n	8004282 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	330c      	adds	r3, #12
 8004262:	7812      	ldrb	r2, [r2, #0]
 8004264:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800426a:	1c5a      	adds	r2, r3, #1
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004274:	b29b      	uxth	r3, r3
 8004276:	3b01      	subs	r3, #1
 8004278:	b29a      	uxth	r2, r3
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800427e:	2300      	movs	r3, #0
 8004280:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	f003 0301 	and.w	r3, r3, #1
 800428c:	2b01      	cmp	r3, #1
 800428e:	d119      	bne.n	80042c4 <HAL_SPI_TransmitReceive+0x2a6>
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004294:	b29b      	uxth	r3, r3
 8004296:	2b00      	cmp	r3, #0
 8004298:	d014      	beq.n	80042c4 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68da      	ldr	r2, [r3, #12]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042a4:	b2d2      	uxtb	r2, r2
 80042a6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042ac:	1c5a      	adds	r2, r3, #1
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	3b01      	subs	r3, #1
 80042ba:	b29a      	uxth	r2, r3
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80042c0:	2301      	movs	r3, #1
 80042c2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80042c4:	f7fd fc36 	bl	8001b34 <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	6a3b      	ldr	r3, [r7, #32]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d803      	bhi.n	80042dc <HAL_SPI_TransmitReceive+0x2be>
 80042d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042da:	d102      	bne.n	80042e2 <HAL_SPI_TransmitReceive+0x2c4>
 80042dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d109      	bne.n	80042f6 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2201      	movs	r2, #1
 80042e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e038      	b.n	8004368 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d19c      	bne.n	800423a <HAL_SPI_TransmitReceive+0x21c>
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004304:	b29b      	uxth	r3, r3
 8004306:	2b00      	cmp	r3, #0
 8004308:	d197      	bne.n	800423a <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800430a:	6a3a      	ldr	r2, [r7, #32]
 800430c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800430e:	68f8      	ldr	r0, [r7, #12]
 8004310:	f000 f8b6 	bl	8004480 <SPI_EndRxTxTransaction>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d008      	beq.n	800432c <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2220      	movs	r2, #32
 800431e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2200      	movs	r2, #0
 8004324:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e01d      	b.n	8004368 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d10a      	bne.n	800434a <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004334:	2300      	movs	r3, #0
 8004336:	613b      	str	r3, [r7, #16]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	613b      	str	r3, [r7, #16]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	613b      	str	r3, [r7, #16]
 8004348:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2201      	movs	r2, #1
 800434e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2200      	movs	r2, #0
 8004356:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800435e:	2b00      	cmp	r3, #0
 8004360:	d001      	beq.n	8004366 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e000      	b.n	8004368 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004366:	2300      	movs	r3, #0
  }
}
 8004368:	4618      	mov	r0, r3
 800436a:	3728      	adds	r7, #40	@ 0x28
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}

08004370 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b088      	sub	sp, #32
 8004374:	af00      	add	r7, sp, #0
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	60b9      	str	r1, [r7, #8]
 800437a:	603b      	str	r3, [r7, #0]
 800437c:	4613      	mov	r3, r2
 800437e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004380:	f7fd fbd8 	bl	8001b34 <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004388:	1a9b      	subs	r3, r3, r2
 800438a:	683a      	ldr	r2, [r7, #0]
 800438c:	4413      	add	r3, r2
 800438e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004390:	f7fd fbd0 	bl	8001b34 <HAL_GetTick>
 8004394:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004396:	4b39      	ldr	r3, [pc, #228]	@ (800447c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	015b      	lsls	r3, r3, #5
 800439c:	0d1b      	lsrs	r3, r3, #20
 800439e:	69fa      	ldr	r2, [r7, #28]
 80043a0:	fb02 f303 	mul.w	r3, r2, r3
 80043a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043a6:	e055      	b.n	8004454 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ae:	d051      	beq.n	8004454 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80043b0:	f7fd fbc0 	bl	8001b34 <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	69fa      	ldr	r2, [r7, #28]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d902      	bls.n	80043c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d13d      	bne.n	8004442 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	685a      	ldr	r2, [r3, #4]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80043d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80043de:	d111      	bne.n	8004404 <SPI_WaitFlagStateUntilTimeout+0x94>
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043e8:	d004      	beq.n	80043f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043f2:	d107      	bne.n	8004404 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004402:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004408:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800440c:	d10f      	bne.n	800442e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800441c:	601a      	str	r2, [r3, #0]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800442c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2201      	movs	r2, #1
 8004432:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2200      	movs	r2, #0
 800443a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e018      	b.n	8004474 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d102      	bne.n	800444e <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8004448:	2300      	movs	r3, #0
 800444a:	61fb      	str	r3, [r7, #28]
 800444c:	e002      	b.n	8004454 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	3b01      	subs	r3, #1
 8004452:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	689a      	ldr	r2, [r3, #8]
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	4013      	ands	r3, r2
 800445e:	68ba      	ldr	r2, [r7, #8]
 8004460:	429a      	cmp	r2, r3
 8004462:	bf0c      	ite	eq
 8004464:	2301      	moveq	r3, #1
 8004466:	2300      	movne	r3, #0
 8004468:	b2db      	uxtb	r3, r3
 800446a:	461a      	mov	r2, r3
 800446c:	79fb      	ldrb	r3, [r7, #7]
 800446e:	429a      	cmp	r2, r3
 8004470:	d19a      	bne.n	80043a8 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8004472:	2300      	movs	r3, #0
}
 8004474:	4618      	mov	r0, r3
 8004476:	3720      	adds	r7, #32
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}
 800447c:	20000010 	.word	0x20000010

08004480 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b088      	sub	sp, #32
 8004484:	af02      	add	r7, sp, #8
 8004486:	60f8      	str	r0, [r7, #12]
 8004488:	60b9      	str	r1, [r7, #8]
 800448a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	9300      	str	r3, [sp, #0]
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	2201      	movs	r2, #1
 8004494:	2102      	movs	r1, #2
 8004496:	68f8      	ldr	r0, [r7, #12]
 8004498:	f7ff ff6a 	bl	8004370 <SPI_WaitFlagStateUntilTimeout>
 800449c:	4603      	mov	r3, r0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d007      	beq.n	80044b2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044a6:	f043 0220 	orr.w	r2, r3, #32
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e032      	b.n	8004518 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80044b2:	4b1b      	ldr	r3, [pc, #108]	@ (8004520 <SPI_EndRxTxTransaction+0xa0>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a1b      	ldr	r2, [pc, #108]	@ (8004524 <SPI_EndRxTxTransaction+0xa4>)
 80044b8:	fba2 2303 	umull	r2, r3, r2, r3
 80044bc:	0d5b      	lsrs	r3, r3, #21
 80044be:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80044c2:	fb02 f303 	mul.w	r3, r2, r3
 80044c6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80044d0:	d112      	bne.n	80044f8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	9300      	str	r3, [sp, #0]
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	2200      	movs	r2, #0
 80044da:	2180      	movs	r1, #128	@ 0x80
 80044dc:	68f8      	ldr	r0, [r7, #12]
 80044de:	f7ff ff47 	bl	8004370 <SPI_WaitFlagStateUntilTimeout>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d016      	beq.n	8004516 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044ec:	f043 0220 	orr.w	r2, r3, #32
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80044f4:	2303      	movs	r3, #3
 80044f6:	e00f      	b.n	8004518 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d00a      	beq.n	8004514 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	3b01      	subs	r3, #1
 8004502:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800450e:	2b80      	cmp	r3, #128	@ 0x80
 8004510:	d0f2      	beq.n	80044f8 <SPI_EndRxTxTransaction+0x78>
 8004512:	e000      	b.n	8004516 <SPI_EndRxTxTransaction+0x96>
        break;
 8004514:	bf00      	nop
  }

  return HAL_OK;
 8004516:	2300      	movs	r3, #0
}
 8004518:	4618      	mov	r0, r3
 800451a:	3718      	adds	r7, #24
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}
 8004520:	20000010 	.word	0x20000010
 8004524:	165e9f81 	.word	0x165e9f81

08004528 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b082      	sub	sp, #8
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d101      	bne.n	800453a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e042      	b.n	80045c0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004540:	b2db      	uxtb	r3, r3
 8004542:	2b00      	cmp	r3, #0
 8004544:	d106      	bne.n	8004554 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f7fd f9a0 	bl	8001894 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2224      	movs	r2, #36	@ 0x24
 8004558:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	68da      	ldr	r2, [r3, #12]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800456a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f000 f82b 	bl	80045c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	691a      	ldr	r2, [r3, #16]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004580:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	695a      	ldr	r2, [r3, #20]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004590:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	68da      	ldr	r2, [r3, #12]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80045a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2220      	movs	r2, #32
 80045ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2220      	movs	r2, #32
 80045b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80045be:	2300      	movs	r3, #0
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3708      	adds	r7, #8
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045cc:	b0c0      	sub	sp, #256	@ 0x100
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80045e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045e4:	68d9      	ldr	r1, [r3, #12]
 80045e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	ea40 0301 	orr.w	r3, r0, r1
 80045f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80045f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045f6:	689a      	ldr	r2, [r3, #8]
 80045f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	431a      	orrs	r2, r3
 8004600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004604:	695b      	ldr	r3, [r3, #20]
 8004606:	431a      	orrs	r2, r3
 8004608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800460c:	69db      	ldr	r3, [r3, #28]
 800460e:	4313      	orrs	r3, r2
 8004610:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004620:	f021 010c 	bic.w	r1, r1, #12
 8004624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800462e:	430b      	orrs	r3, r1
 8004630:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004632:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	695b      	ldr	r3, [r3, #20]
 800463a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800463e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004642:	6999      	ldr	r1, [r3, #24]
 8004644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	ea40 0301 	orr.w	r3, r0, r1
 800464e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	4b8f      	ldr	r3, [pc, #572]	@ (8004894 <UART_SetConfig+0x2cc>)
 8004658:	429a      	cmp	r2, r3
 800465a:	d005      	beq.n	8004668 <UART_SetConfig+0xa0>
 800465c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	4b8d      	ldr	r3, [pc, #564]	@ (8004898 <UART_SetConfig+0x2d0>)
 8004664:	429a      	cmp	r2, r3
 8004666:	d104      	bne.n	8004672 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004668:	f7fe ff6e 	bl	8003548 <HAL_RCC_GetPCLK2Freq>
 800466c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004670:	e003      	b.n	800467a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004672:	f7fe ff55 	bl	8003520 <HAL_RCC_GetPCLK1Freq>
 8004676:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800467a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800467e:	69db      	ldr	r3, [r3, #28]
 8004680:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004684:	f040 810c 	bne.w	80048a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004688:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800468c:	2200      	movs	r2, #0
 800468e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004692:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004696:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800469a:	4622      	mov	r2, r4
 800469c:	462b      	mov	r3, r5
 800469e:	1891      	adds	r1, r2, r2
 80046a0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80046a2:	415b      	adcs	r3, r3
 80046a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80046a6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80046aa:	4621      	mov	r1, r4
 80046ac:	eb12 0801 	adds.w	r8, r2, r1
 80046b0:	4629      	mov	r1, r5
 80046b2:	eb43 0901 	adc.w	r9, r3, r1
 80046b6:	f04f 0200 	mov.w	r2, #0
 80046ba:	f04f 0300 	mov.w	r3, #0
 80046be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80046c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80046c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80046ca:	4690      	mov	r8, r2
 80046cc:	4699      	mov	r9, r3
 80046ce:	4623      	mov	r3, r4
 80046d0:	eb18 0303 	adds.w	r3, r8, r3
 80046d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80046d8:	462b      	mov	r3, r5
 80046da:	eb49 0303 	adc.w	r3, r9, r3
 80046de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80046e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80046ee:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80046f2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80046f6:	460b      	mov	r3, r1
 80046f8:	18db      	adds	r3, r3, r3
 80046fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80046fc:	4613      	mov	r3, r2
 80046fe:	eb42 0303 	adc.w	r3, r2, r3
 8004702:	657b      	str	r3, [r7, #84]	@ 0x54
 8004704:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004708:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800470c:	f7fb fdd0 	bl	80002b0 <__aeabi_uldivmod>
 8004710:	4602      	mov	r2, r0
 8004712:	460b      	mov	r3, r1
 8004714:	4b61      	ldr	r3, [pc, #388]	@ (800489c <UART_SetConfig+0x2d4>)
 8004716:	fba3 2302 	umull	r2, r3, r3, r2
 800471a:	095b      	lsrs	r3, r3, #5
 800471c:	011c      	lsls	r4, r3, #4
 800471e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004722:	2200      	movs	r2, #0
 8004724:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004728:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800472c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004730:	4642      	mov	r2, r8
 8004732:	464b      	mov	r3, r9
 8004734:	1891      	adds	r1, r2, r2
 8004736:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004738:	415b      	adcs	r3, r3
 800473a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800473c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004740:	4641      	mov	r1, r8
 8004742:	eb12 0a01 	adds.w	sl, r2, r1
 8004746:	4649      	mov	r1, r9
 8004748:	eb43 0b01 	adc.w	fp, r3, r1
 800474c:	f04f 0200 	mov.w	r2, #0
 8004750:	f04f 0300 	mov.w	r3, #0
 8004754:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004758:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800475c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004760:	4692      	mov	sl, r2
 8004762:	469b      	mov	fp, r3
 8004764:	4643      	mov	r3, r8
 8004766:	eb1a 0303 	adds.w	r3, sl, r3
 800476a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800476e:	464b      	mov	r3, r9
 8004770:	eb4b 0303 	adc.w	r3, fp, r3
 8004774:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004784:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004788:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800478c:	460b      	mov	r3, r1
 800478e:	18db      	adds	r3, r3, r3
 8004790:	643b      	str	r3, [r7, #64]	@ 0x40
 8004792:	4613      	mov	r3, r2
 8004794:	eb42 0303 	adc.w	r3, r2, r3
 8004798:	647b      	str	r3, [r7, #68]	@ 0x44
 800479a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800479e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80047a2:	f7fb fd85 	bl	80002b0 <__aeabi_uldivmod>
 80047a6:	4602      	mov	r2, r0
 80047a8:	460b      	mov	r3, r1
 80047aa:	4611      	mov	r1, r2
 80047ac:	4b3b      	ldr	r3, [pc, #236]	@ (800489c <UART_SetConfig+0x2d4>)
 80047ae:	fba3 2301 	umull	r2, r3, r3, r1
 80047b2:	095b      	lsrs	r3, r3, #5
 80047b4:	2264      	movs	r2, #100	@ 0x64
 80047b6:	fb02 f303 	mul.w	r3, r2, r3
 80047ba:	1acb      	subs	r3, r1, r3
 80047bc:	00db      	lsls	r3, r3, #3
 80047be:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80047c2:	4b36      	ldr	r3, [pc, #216]	@ (800489c <UART_SetConfig+0x2d4>)
 80047c4:	fba3 2302 	umull	r2, r3, r3, r2
 80047c8:	095b      	lsrs	r3, r3, #5
 80047ca:	005b      	lsls	r3, r3, #1
 80047cc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80047d0:	441c      	add	r4, r3
 80047d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047d6:	2200      	movs	r2, #0
 80047d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80047dc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80047e0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80047e4:	4642      	mov	r2, r8
 80047e6:	464b      	mov	r3, r9
 80047e8:	1891      	adds	r1, r2, r2
 80047ea:	63b9      	str	r1, [r7, #56]	@ 0x38
 80047ec:	415b      	adcs	r3, r3
 80047ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80047f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80047f4:	4641      	mov	r1, r8
 80047f6:	1851      	adds	r1, r2, r1
 80047f8:	6339      	str	r1, [r7, #48]	@ 0x30
 80047fa:	4649      	mov	r1, r9
 80047fc:	414b      	adcs	r3, r1
 80047fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8004800:	f04f 0200 	mov.w	r2, #0
 8004804:	f04f 0300 	mov.w	r3, #0
 8004808:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800480c:	4659      	mov	r1, fp
 800480e:	00cb      	lsls	r3, r1, #3
 8004810:	4651      	mov	r1, sl
 8004812:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004816:	4651      	mov	r1, sl
 8004818:	00ca      	lsls	r2, r1, #3
 800481a:	4610      	mov	r0, r2
 800481c:	4619      	mov	r1, r3
 800481e:	4603      	mov	r3, r0
 8004820:	4642      	mov	r2, r8
 8004822:	189b      	adds	r3, r3, r2
 8004824:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004828:	464b      	mov	r3, r9
 800482a:	460a      	mov	r2, r1
 800482c:	eb42 0303 	adc.w	r3, r2, r3
 8004830:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004840:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004844:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004848:	460b      	mov	r3, r1
 800484a:	18db      	adds	r3, r3, r3
 800484c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800484e:	4613      	mov	r3, r2
 8004850:	eb42 0303 	adc.w	r3, r2, r3
 8004854:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004856:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800485a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800485e:	f7fb fd27 	bl	80002b0 <__aeabi_uldivmod>
 8004862:	4602      	mov	r2, r0
 8004864:	460b      	mov	r3, r1
 8004866:	4b0d      	ldr	r3, [pc, #52]	@ (800489c <UART_SetConfig+0x2d4>)
 8004868:	fba3 1302 	umull	r1, r3, r3, r2
 800486c:	095b      	lsrs	r3, r3, #5
 800486e:	2164      	movs	r1, #100	@ 0x64
 8004870:	fb01 f303 	mul.w	r3, r1, r3
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	00db      	lsls	r3, r3, #3
 8004878:	3332      	adds	r3, #50	@ 0x32
 800487a:	4a08      	ldr	r2, [pc, #32]	@ (800489c <UART_SetConfig+0x2d4>)
 800487c:	fba2 2303 	umull	r2, r3, r2, r3
 8004880:	095b      	lsrs	r3, r3, #5
 8004882:	f003 0207 	and.w	r2, r3, #7
 8004886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4422      	add	r2, r4
 800488e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004890:	e106      	b.n	8004aa0 <UART_SetConfig+0x4d8>
 8004892:	bf00      	nop
 8004894:	40011000 	.word	0x40011000
 8004898:	40011400 	.word	0x40011400
 800489c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80048a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048a4:	2200      	movs	r2, #0
 80048a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80048aa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80048ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80048b2:	4642      	mov	r2, r8
 80048b4:	464b      	mov	r3, r9
 80048b6:	1891      	adds	r1, r2, r2
 80048b8:	6239      	str	r1, [r7, #32]
 80048ba:	415b      	adcs	r3, r3
 80048bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80048be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80048c2:	4641      	mov	r1, r8
 80048c4:	1854      	adds	r4, r2, r1
 80048c6:	4649      	mov	r1, r9
 80048c8:	eb43 0501 	adc.w	r5, r3, r1
 80048cc:	f04f 0200 	mov.w	r2, #0
 80048d0:	f04f 0300 	mov.w	r3, #0
 80048d4:	00eb      	lsls	r3, r5, #3
 80048d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048da:	00e2      	lsls	r2, r4, #3
 80048dc:	4614      	mov	r4, r2
 80048de:	461d      	mov	r5, r3
 80048e0:	4643      	mov	r3, r8
 80048e2:	18e3      	adds	r3, r4, r3
 80048e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80048e8:	464b      	mov	r3, r9
 80048ea:	eb45 0303 	adc.w	r3, r5, r3
 80048ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80048f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80048fe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004902:	f04f 0200 	mov.w	r2, #0
 8004906:	f04f 0300 	mov.w	r3, #0
 800490a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800490e:	4629      	mov	r1, r5
 8004910:	008b      	lsls	r3, r1, #2
 8004912:	4621      	mov	r1, r4
 8004914:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004918:	4621      	mov	r1, r4
 800491a:	008a      	lsls	r2, r1, #2
 800491c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004920:	f7fb fcc6 	bl	80002b0 <__aeabi_uldivmod>
 8004924:	4602      	mov	r2, r0
 8004926:	460b      	mov	r3, r1
 8004928:	4b60      	ldr	r3, [pc, #384]	@ (8004aac <UART_SetConfig+0x4e4>)
 800492a:	fba3 2302 	umull	r2, r3, r3, r2
 800492e:	095b      	lsrs	r3, r3, #5
 8004930:	011c      	lsls	r4, r3, #4
 8004932:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004936:	2200      	movs	r2, #0
 8004938:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800493c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004940:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004944:	4642      	mov	r2, r8
 8004946:	464b      	mov	r3, r9
 8004948:	1891      	adds	r1, r2, r2
 800494a:	61b9      	str	r1, [r7, #24]
 800494c:	415b      	adcs	r3, r3
 800494e:	61fb      	str	r3, [r7, #28]
 8004950:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004954:	4641      	mov	r1, r8
 8004956:	1851      	adds	r1, r2, r1
 8004958:	6139      	str	r1, [r7, #16]
 800495a:	4649      	mov	r1, r9
 800495c:	414b      	adcs	r3, r1
 800495e:	617b      	str	r3, [r7, #20]
 8004960:	f04f 0200 	mov.w	r2, #0
 8004964:	f04f 0300 	mov.w	r3, #0
 8004968:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800496c:	4659      	mov	r1, fp
 800496e:	00cb      	lsls	r3, r1, #3
 8004970:	4651      	mov	r1, sl
 8004972:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004976:	4651      	mov	r1, sl
 8004978:	00ca      	lsls	r2, r1, #3
 800497a:	4610      	mov	r0, r2
 800497c:	4619      	mov	r1, r3
 800497e:	4603      	mov	r3, r0
 8004980:	4642      	mov	r2, r8
 8004982:	189b      	adds	r3, r3, r2
 8004984:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004988:	464b      	mov	r3, r9
 800498a:	460a      	mov	r2, r1
 800498c:	eb42 0303 	adc.w	r3, r2, r3
 8004990:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	2200      	movs	r2, #0
 800499c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800499e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80049a0:	f04f 0200 	mov.w	r2, #0
 80049a4:	f04f 0300 	mov.w	r3, #0
 80049a8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80049ac:	4649      	mov	r1, r9
 80049ae:	008b      	lsls	r3, r1, #2
 80049b0:	4641      	mov	r1, r8
 80049b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049b6:	4641      	mov	r1, r8
 80049b8:	008a      	lsls	r2, r1, #2
 80049ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80049be:	f7fb fc77 	bl	80002b0 <__aeabi_uldivmod>
 80049c2:	4602      	mov	r2, r0
 80049c4:	460b      	mov	r3, r1
 80049c6:	4611      	mov	r1, r2
 80049c8:	4b38      	ldr	r3, [pc, #224]	@ (8004aac <UART_SetConfig+0x4e4>)
 80049ca:	fba3 2301 	umull	r2, r3, r3, r1
 80049ce:	095b      	lsrs	r3, r3, #5
 80049d0:	2264      	movs	r2, #100	@ 0x64
 80049d2:	fb02 f303 	mul.w	r3, r2, r3
 80049d6:	1acb      	subs	r3, r1, r3
 80049d8:	011b      	lsls	r3, r3, #4
 80049da:	3332      	adds	r3, #50	@ 0x32
 80049dc:	4a33      	ldr	r2, [pc, #204]	@ (8004aac <UART_SetConfig+0x4e4>)
 80049de:	fba2 2303 	umull	r2, r3, r2, r3
 80049e2:	095b      	lsrs	r3, r3, #5
 80049e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80049e8:	441c      	add	r4, r3
 80049ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049ee:	2200      	movs	r2, #0
 80049f0:	673b      	str	r3, [r7, #112]	@ 0x70
 80049f2:	677a      	str	r2, [r7, #116]	@ 0x74
 80049f4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80049f8:	4642      	mov	r2, r8
 80049fa:	464b      	mov	r3, r9
 80049fc:	1891      	adds	r1, r2, r2
 80049fe:	60b9      	str	r1, [r7, #8]
 8004a00:	415b      	adcs	r3, r3
 8004a02:	60fb      	str	r3, [r7, #12]
 8004a04:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a08:	4641      	mov	r1, r8
 8004a0a:	1851      	adds	r1, r2, r1
 8004a0c:	6039      	str	r1, [r7, #0]
 8004a0e:	4649      	mov	r1, r9
 8004a10:	414b      	adcs	r3, r1
 8004a12:	607b      	str	r3, [r7, #4]
 8004a14:	f04f 0200 	mov.w	r2, #0
 8004a18:	f04f 0300 	mov.w	r3, #0
 8004a1c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004a20:	4659      	mov	r1, fp
 8004a22:	00cb      	lsls	r3, r1, #3
 8004a24:	4651      	mov	r1, sl
 8004a26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a2a:	4651      	mov	r1, sl
 8004a2c:	00ca      	lsls	r2, r1, #3
 8004a2e:	4610      	mov	r0, r2
 8004a30:	4619      	mov	r1, r3
 8004a32:	4603      	mov	r3, r0
 8004a34:	4642      	mov	r2, r8
 8004a36:	189b      	adds	r3, r3, r2
 8004a38:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004a3a:	464b      	mov	r3, r9
 8004a3c:	460a      	mov	r2, r1
 8004a3e:	eb42 0303 	adc.w	r3, r2, r3
 8004a42:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	663b      	str	r3, [r7, #96]	@ 0x60
 8004a4e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004a50:	f04f 0200 	mov.w	r2, #0
 8004a54:	f04f 0300 	mov.w	r3, #0
 8004a58:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004a5c:	4649      	mov	r1, r9
 8004a5e:	008b      	lsls	r3, r1, #2
 8004a60:	4641      	mov	r1, r8
 8004a62:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a66:	4641      	mov	r1, r8
 8004a68:	008a      	lsls	r2, r1, #2
 8004a6a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004a6e:	f7fb fc1f 	bl	80002b0 <__aeabi_uldivmod>
 8004a72:	4602      	mov	r2, r0
 8004a74:	460b      	mov	r3, r1
 8004a76:	4b0d      	ldr	r3, [pc, #52]	@ (8004aac <UART_SetConfig+0x4e4>)
 8004a78:	fba3 1302 	umull	r1, r3, r3, r2
 8004a7c:	095b      	lsrs	r3, r3, #5
 8004a7e:	2164      	movs	r1, #100	@ 0x64
 8004a80:	fb01 f303 	mul.w	r3, r1, r3
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	011b      	lsls	r3, r3, #4
 8004a88:	3332      	adds	r3, #50	@ 0x32
 8004a8a:	4a08      	ldr	r2, [pc, #32]	@ (8004aac <UART_SetConfig+0x4e4>)
 8004a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a90:	095b      	lsrs	r3, r3, #5
 8004a92:	f003 020f 	and.w	r2, r3, #15
 8004a96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4422      	add	r2, r4
 8004a9e:	609a      	str	r2, [r3, #8]
}
 8004aa0:	bf00      	nop
 8004aa2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004aac:	51eb851f 	.word	0x51eb851f

08004ab0 <sniprintf>:
 8004ab0:	b40c      	push	{r2, r3}
 8004ab2:	b530      	push	{r4, r5, lr}
 8004ab4:	4b18      	ldr	r3, [pc, #96]	@ (8004b18 <sniprintf+0x68>)
 8004ab6:	1e0c      	subs	r4, r1, #0
 8004ab8:	681d      	ldr	r5, [r3, #0]
 8004aba:	b09d      	sub	sp, #116	@ 0x74
 8004abc:	da08      	bge.n	8004ad0 <sniprintf+0x20>
 8004abe:	238b      	movs	r3, #139	@ 0x8b
 8004ac0:	602b      	str	r3, [r5, #0]
 8004ac2:	f04f 30ff 	mov.w	r0, #4294967295
 8004ac6:	b01d      	add	sp, #116	@ 0x74
 8004ac8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004acc:	b002      	add	sp, #8
 8004ace:	4770      	bx	lr
 8004ad0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004ad4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004ad8:	f04f 0300 	mov.w	r3, #0
 8004adc:	931b      	str	r3, [sp, #108]	@ 0x6c
 8004ade:	bf14      	ite	ne
 8004ae0:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004ae4:	4623      	moveq	r3, r4
 8004ae6:	9304      	str	r3, [sp, #16]
 8004ae8:	9307      	str	r3, [sp, #28]
 8004aea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004aee:	9002      	str	r0, [sp, #8]
 8004af0:	9006      	str	r0, [sp, #24]
 8004af2:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004af6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004af8:	ab21      	add	r3, sp, #132	@ 0x84
 8004afa:	a902      	add	r1, sp, #8
 8004afc:	4628      	mov	r0, r5
 8004afe:	9301      	str	r3, [sp, #4]
 8004b00:	f000 f9a8 	bl	8004e54 <_svfiprintf_r>
 8004b04:	1c43      	adds	r3, r0, #1
 8004b06:	bfbc      	itt	lt
 8004b08:	238b      	movlt	r3, #139	@ 0x8b
 8004b0a:	602b      	strlt	r3, [r5, #0]
 8004b0c:	2c00      	cmp	r4, #0
 8004b0e:	d0da      	beq.n	8004ac6 <sniprintf+0x16>
 8004b10:	9b02      	ldr	r3, [sp, #8]
 8004b12:	2200      	movs	r2, #0
 8004b14:	701a      	strb	r2, [r3, #0]
 8004b16:	e7d6      	b.n	8004ac6 <sniprintf+0x16>
 8004b18:	2000001c 	.word	0x2000001c

08004b1c <memset>:
 8004b1c:	4402      	add	r2, r0
 8004b1e:	4603      	mov	r3, r0
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d100      	bne.n	8004b26 <memset+0xa>
 8004b24:	4770      	bx	lr
 8004b26:	f803 1b01 	strb.w	r1, [r3], #1
 8004b2a:	e7f9      	b.n	8004b20 <memset+0x4>

08004b2c <strncpy>:
 8004b2c:	b510      	push	{r4, lr}
 8004b2e:	3901      	subs	r1, #1
 8004b30:	4603      	mov	r3, r0
 8004b32:	b132      	cbz	r2, 8004b42 <strncpy+0x16>
 8004b34:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004b38:	f803 4b01 	strb.w	r4, [r3], #1
 8004b3c:	3a01      	subs	r2, #1
 8004b3e:	2c00      	cmp	r4, #0
 8004b40:	d1f7      	bne.n	8004b32 <strncpy+0x6>
 8004b42:	441a      	add	r2, r3
 8004b44:	2100      	movs	r1, #0
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d100      	bne.n	8004b4c <strncpy+0x20>
 8004b4a:	bd10      	pop	{r4, pc}
 8004b4c:	f803 1b01 	strb.w	r1, [r3], #1
 8004b50:	e7f9      	b.n	8004b46 <strncpy+0x1a>
	...

08004b54 <__errno>:
 8004b54:	4b01      	ldr	r3, [pc, #4]	@ (8004b5c <__errno+0x8>)
 8004b56:	6818      	ldr	r0, [r3, #0]
 8004b58:	4770      	bx	lr
 8004b5a:	bf00      	nop
 8004b5c:	2000001c 	.word	0x2000001c

08004b60 <__libc_init_array>:
 8004b60:	b570      	push	{r4, r5, r6, lr}
 8004b62:	4d0d      	ldr	r5, [pc, #52]	@ (8004b98 <__libc_init_array+0x38>)
 8004b64:	4c0d      	ldr	r4, [pc, #52]	@ (8004b9c <__libc_init_array+0x3c>)
 8004b66:	1b64      	subs	r4, r4, r5
 8004b68:	10a4      	asrs	r4, r4, #2
 8004b6a:	2600      	movs	r6, #0
 8004b6c:	42a6      	cmp	r6, r4
 8004b6e:	d109      	bne.n	8004b84 <__libc_init_array+0x24>
 8004b70:	4d0b      	ldr	r5, [pc, #44]	@ (8004ba0 <__libc_init_array+0x40>)
 8004b72:	4c0c      	ldr	r4, [pc, #48]	@ (8004ba4 <__libc_init_array+0x44>)
 8004b74:	f000 fc64 	bl	8005440 <_init>
 8004b78:	1b64      	subs	r4, r4, r5
 8004b7a:	10a4      	asrs	r4, r4, #2
 8004b7c:	2600      	movs	r6, #0
 8004b7e:	42a6      	cmp	r6, r4
 8004b80:	d105      	bne.n	8004b8e <__libc_init_array+0x2e>
 8004b82:	bd70      	pop	{r4, r5, r6, pc}
 8004b84:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b88:	4798      	blx	r3
 8004b8a:	3601      	adds	r6, #1
 8004b8c:	e7ee      	b.n	8004b6c <__libc_init_array+0xc>
 8004b8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b92:	4798      	blx	r3
 8004b94:	3601      	adds	r6, #1
 8004b96:	e7f2      	b.n	8004b7e <__libc_init_array+0x1e>
 8004b98:	08005564 	.word	0x08005564
 8004b9c:	08005564 	.word	0x08005564
 8004ba0:	08005564 	.word	0x08005564
 8004ba4:	08005568 	.word	0x08005568

08004ba8 <__retarget_lock_acquire_recursive>:
 8004ba8:	4770      	bx	lr

08004baa <__retarget_lock_release_recursive>:
 8004baa:	4770      	bx	lr

08004bac <_free_r>:
 8004bac:	b538      	push	{r3, r4, r5, lr}
 8004bae:	4605      	mov	r5, r0
 8004bb0:	2900      	cmp	r1, #0
 8004bb2:	d041      	beq.n	8004c38 <_free_r+0x8c>
 8004bb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004bb8:	1f0c      	subs	r4, r1, #4
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	bfb8      	it	lt
 8004bbe:	18e4      	addlt	r4, r4, r3
 8004bc0:	f000 f8e0 	bl	8004d84 <__malloc_lock>
 8004bc4:	4a1d      	ldr	r2, [pc, #116]	@ (8004c3c <_free_r+0x90>)
 8004bc6:	6813      	ldr	r3, [r2, #0]
 8004bc8:	b933      	cbnz	r3, 8004bd8 <_free_r+0x2c>
 8004bca:	6063      	str	r3, [r4, #4]
 8004bcc:	6014      	str	r4, [r2, #0]
 8004bce:	4628      	mov	r0, r5
 8004bd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004bd4:	f000 b8dc 	b.w	8004d90 <__malloc_unlock>
 8004bd8:	42a3      	cmp	r3, r4
 8004bda:	d908      	bls.n	8004bee <_free_r+0x42>
 8004bdc:	6820      	ldr	r0, [r4, #0]
 8004bde:	1821      	adds	r1, r4, r0
 8004be0:	428b      	cmp	r3, r1
 8004be2:	bf01      	itttt	eq
 8004be4:	6819      	ldreq	r1, [r3, #0]
 8004be6:	685b      	ldreq	r3, [r3, #4]
 8004be8:	1809      	addeq	r1, r1, r0
 8004bea:	6021      	streq	r1, [r4, #0]
 8004bec:	e7ed      	b.n	8004bca <_free_r+0x1e>
 8004bee:	461a      	mov	r2, r3
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	b10b      	cbz	r3, 8004bf8 <_free_r+0x4c>
 8004bf4:	42a3      	cmp	r3, r4
 8004bf6:	d9fa      	bls.n	8004bee <_free_r+0x42>
 8004bf8:	6811      	ldr	r1, [r2, #0]
 8004bfa:	1850      	adds	r0, r2, r1
 8004bfc:	42a0      	cmp	r0, r4
 8004bfe:	d10b      	bne.n	8004c18 <_free_r+0x6c>
 8004c00:	6820      	ldr	r0, [r4, #0]
 8004c02:	4401      	add	r1, r0
 8004c04:	1850      	adds	r0, r2, r1
 8004c06:	4283      	cmp	r3, r0
 8004c08:	6011      	str	r1, [r2, #0]
 8004c0a:	d1e0      	bne.n	8004bce <_free_r+0x22>
 8004c0c:	6818      	ldr	r0, [r3, #0]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	6053      	str	r3, [r2, #4]
 8004c12:	4408      	add	r0, r1
 8004c14:	6010      	str	r0, [r2, #0]
 8004c16:	e7da      	b.n	8004bce <_free_r+0x22>
 8004c18:	d902      	bls.n	8004c20 <_free_r+0x74>
 8004c1a:	230c      	movs	r3, #12
 8004c1c:	602b      	str	r3, [r5, #0]
 8004c1e:	e7d6      	b.n	8004bce <_free_r+0x22>
 8004c20:	6820      	ldr	r0, [r4, #0]
 8004c22:	1821      	adds	r1, r4, r0
 8004c24:	428b      	cmp	r3, r1
 8004c26:	bf04      	itt	eq
 8004c28:	6819      	ldreq	r1, [r3, #0]
 8004c2a:	685b      	ldreq	r3, [r3, #4]
 8004c2c:	6063      	str	r3, [r4, #4]
 8004c2e:	bf04      	itt	eq
 8004c30:	1809      	addeq	r1, r1, r0
 8004c32:	6021      	streq	r1, [r4, #0]
 8004c34:	6054      	str	r4, [r2, #4]
 8004c36:	e7ca      	b.n	8004bce <_free_r+0x22>
 8004c38:	bd38      	pop	{r3, r4, r5, pc}
 8004c3a:	bf00      	nop
 8004c3c:	20000b24 	.word	0x20000b24

08004c40 <sbrk_aligned>:
 8004c40:	b570      	push	{r4, r5, r6, lr}
 8004c42:	4e0f      	ldr	r6, [pc, #60]	@ (8004c80 <sbrk_aligned+0x40>)
 8004c44:	460c      	mov	r4, r1
 8004c46:	6831      	ldr	r1, [r6, #0]
 8004c48:	4605      	mov	r5, r0
 8004c4a:	b911      	cbnz	r1, 8004c52 <sbrk_aligned+0x12>
 8004c4c:	f000 fba4 	bl	8005398 <_sbrk_r>
 8004c50:	6030      	str	r0, [r6, #0]
 8004c52:	4621      	mov	r1, r4
 8004c54:	4628      	mov	r0, r5
 8004c56:	f000 fb9f 	bl	8005398 <_sbrk_r>
 8004c5a:	1c43      	adds	r3, r0, #1
 8004c5c:	d103      	bne.n	8004c66 <sbrk_aligned+0x26>
 8004c5e:	f04f 34ff 	mov.w	r4, #4294967295
 8004c62:	4620      	mov	r0, r4
 8004c64:	bd70      	pop	{r4, r5, r6, pc}
 8004c66:	1cc4      	adds	r4, r0, #3
 8004c68:	f024 0403 	bic.w	r4, r4, #3
 8004c6c:	42a0      	cmp	r0, r4
 8004c6e:	d0f8      	beq.n	8004c62 <sbrk_aligned+0x22>
 8004c70:	1a21      	subs	r1, r4, r0
 8004c72:	4628      	mov	r0, r5
 8004c74:	f000 fb90 	bl	8005398 <_sbrk_r>
 8004c78:	3001      	adds	r0, #1
 8004c7a:	d1f2      	bne.n	8004c62 <sbrk_aligned+0x22>
 8004c7c:	e7ef      	b.n	8004c5e <sbrk_aligned+0x1e>
 8004c7e:	bf00      	nop
 8004c80:	20000b20 	.word	0x20000b20

08004c84 <_malloc_r>:
 8004c84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c88:	1ccd      	adds	r5, r1, #3
 8004c8a:	f025 0503 	bic.w	r5, r5, #3
 8004c8e:	3508      	adds	r5, #8
 8004c90:	2d0c      	cmp	r5, #12
 8004c92:	bf38      	it	cc
 8004c94:	250c      	movcc	r5, #12
 8004c96:	2d00      	cmp	r5, #0
 8004c98:	4606      	mov	r6, r0
 8004c9a:	db01      	blt.n	8004ca0 <_malloc_r+0x1c>
 8004c9c:	42a9      	cmp	r1, r5
 8004c9e:	d904      	bls.n	8004caa <_malloc_r+0x26>
 8004ca0:	230c      	movs	r3, #12
 8004ca2:	6033      	str	r3, [r6, #0]
 8004ca4:	2000      	movs	r0, #0
 8004ca6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004caa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004d80 <_malloc_r+0xfc>
 8004cae:	f000 f869 	bl	8004d84 <__malloc_lock>
 8004cb2:	f8d8 3000 	ldr.w	r3, [r8]
 8004cb6:	461c      	mov	r4, r3
 8004cb8:	bb44      	cbnz	r4, 8004d0c <_malloc_r+0x88>
 8004cba:	4629      	mov	r1, r5
 8004cbc:	4630      	mov	r0, r6
 8004cbe:	f7ff ffbf 	bl	8004c40 <sbrk_aligned>
 8004cc2:	1c43      	adds	r3, r0, #1
 8004cc4:	4604      	mov	r4, r0
 8004cc6:	d158      	bne.n	8004d7a <_malloc_r+0xf6>
 8004cc8:	f8d8 4000 	ldr.w	r4, [r8]
 8004ccc:	4627      	mov	r7, r4
 8004cce:	2f00      	cmp	r7, #0
 8004cd0:	d143      	bne.n	8004d5a <_malloc_r+0xd6>
 8004cd2:	2c00      	cmp	r4, #0
 8004cd4:	d04b      	beq.n	8004d6e <_malloc_r+0xea>
 8004cd6:	6823      	ldr	r3, [r4, #0]
 8004cd8:	4639      	mov	r1, r7
 8004cda:	4630      	mov	r0, r6
 8004cdc:	eb04 0903 	add.w	r9, r4, r3
 8004ce0:	f000 fb5a 	bl	8005398 <_sbrk_r>
 8004ce4:	4581      	cmp	r9, r0
 8004ce6:	d142      	bne.n	8004d6e <_malloc_r+0xea>
 8004ce8:	6821      	ldr	r1, [r4, #0]
 8004cea:	1a6d      	subs	r5, r5, r1
 8004cec:	4629      	mov	r1, r5
 8004cee:	4630      	mov	r0, r6
 8004cf0:	f7ff ffa6 	bl	8004c40 <sbrk_aligned>
 8004cf4:	3001      	adds	r0, #1
 8004cf6:	d03a      	beq.n	8004d6e <_malloc_r+0xea>
 8004cf8:	6823      	ldr	r3, [r4, #0]
 8004cfa:	442b      	add	r3, r5
 8004cfc:	6023      	str	r3, [r4, #0]
 8004cfe:	f8d8 3000 	ldr.w	r3, [r8]
 8004d02:	685a      	ldr	r2, [r3, #4]
 8004d04:	bb62      	cbnz	r2, 8004d60 <_malloc_r+0xdc>
 8004d06:	f8c8 7000 	str.w	r7, [r8]
 8004d0a:	e00f      	b.n	8004d2c <_malloc_r+0xa8>
 8004d0c:	6822      	ldr	r2, [r4, #0]
 8004d0e:	1b52      	subs	r2, r2, r5
 8004d10:	d420      	bmi.n	8004d54 <_malloc_r+0xd0>
 8004d12:	2a0b      	cmp	r2, #11
 8004d14:	d917      	bls.n	8004d46 <_malloc_r+0xc2>
 8004d16:	1961      	adds	r1, r4, r5
 8004d18:	42a3      	cmp	r3, r4
 8004d1a:	6025      	str	r5, [r4, #0]
 8004d1c:	bf18      	it	ne
 8004d1e:	6059      	strne	r1, [r3, #4]
 8004d20:	6863      	ldr	r3, [r4, #4]
 8004d22:	bf08      	it	eq
 8004d24:	f8c8 1000 	streq.w	r1, [r8]
 8004d28:	5162      	str	r2, [r4, r5]
 8004d2a:	604b      	str	r3, [r1, #4]
 8004d2c:	4630      	mov	r0, r6
 8004d2e:	f000 f82f 	bl	8004d90 <__malloc_unlock>
 8004d32:	f104 000b 	add.w	r0, r4, #11
 8004d36:	1d23      	adds	r3, r4, #4
 8004d38:	f020 0007 	bic.w	r0, r0, #7
 8004d3c:	1ac2      	subs	r2, r0, r3
 8004d3e:	bf1c      	itt	ne
 8004d40:	1a1b      	subne	r3, r3, r0
 8004d42:	50a3      	strne	r3, [r4, r2]
 8004d44:	e7af      	b.n	8004ca6 <_malloc_r+0x22>
 8004d46:	6862      	ldr	r2, [r4, #4]
 8004d48:	42a3      	cmp	r3, r4
 8004d4a:	bf0c      	ite	eq
 8004d4c:	f8c8 2000 	streq.w	r2, [r8]
 8004d50:	605a      	strne	r2, [r3, #4]
 8004d52:	e7eb      	b.n	8004d2c <_malloc_r+0xa8>
 8004d54:	4623      	mov	r3, r4
 8004d56:	6864      	ldr	r4, [r4, #4]
 8004d58:	e7ae      	b.n	8004cb8 <_malloc_r+0x34>
 8004d5a:	463c      	mov	r4, r7
 8004d5c:	687f      	ldr	r7, [r7, #4]
 8004d5e:	e7b6      	b.n	8004cce <_malloc_r+0x4a>
 8004d60:	461a      	mov	r2, r3
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	42a3      	cmp	r3, r4
 8004d66:	d1fb      	bne.n	8004d60 <_malloc_r+0xdc>
 8004d68:	2300      	movs	r3, #0
 8004d6a:	6053      	str	r3, [r2, #4]
 8004d6c:	e7de      	b.n	8004d2c <_malloc_r+0xa8>
 8004d6e:	230c      	movs	r3, #12
 8004d70:	6033      	str	r3, [r6, #0]
 8004d72:	4630      	mov	r0, r6
 8004d74:	f000 f80c 	bl	8004d90 <__malloc_unlock>
 8004d78:	e794      	b.n	8004ca4 <_malloc_r+0x20>
 8004d7a:	6005      	str	r5, [r0, #0]
 8004d7c:	e7d6      	b.n	8004d2c <_malloc_r+0xa8>
 8004d7e:	bf00      	nop
 8004d80:	20000b24 	.word	0x20000b24

08004d84 <__malloc_lock>:
 8004d84:	4801      	ldr	r0, [pc, #4]	@ (8004d8c <__malloc_lock+0x8>)
 8004d86:	f7ff bf0f 	b.w	8004ba8 <__retarget_lock_acquire_recursive>
 8004d8a:	bf00      	nop
 8004d8c:	20000b1c 	.word	0x20000b1c

08004d90 <__malloc_unlock>:
 8004d90:	4801      	ldr	r0, [pc, #4]	@ (8004d98 <__malloc_unlock+0x8>)
 8004d92:	f7ff bf0a 	b.w	8004baa <__retarget_lock_release_recursive>
 8004d96:	bf00      	nop
 8004d98:	20000b1c 	.word	0x20000b1c

08004d9c <__ssputs_r>:
 8004d9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004da0:	688e      	ldr	r6, [r1, #8]
 8004da2:	461f      	mov	r7, r3
 8004da4:	42be      	cmp	r6, r7
 8004da6:	680b      	ldr	r3, [r1, #0]
 8004da8:	4682      	mov	sl, r0
 8004daa:	460c      	mov	r4, r1
 8004dac:	4690      	mov	r8, r2
 8004dae:	d82d      	bhi.n	8004e0c <__ssputs_r+0x70>
 8004db0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004db4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004db8:	d026      	beq.n	8004e08 <__ssputs_r+0x6c>
 8004dba:	6965      	ldr	r5, [r4, #20]
 8004dbc:	6909      	ldr	r1, [r1, #16]
 8004dbe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004dc2:	eba3 0901 	sub.w	r9, r3, r1
 8004dc6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004dca:	1c7b      	adds	r3, r7, #1
 8004dcc:	444b      	add	r3, r9
 8004dce:	106d      	asrs	r5, r5, #1
 8004dd0:	429d      	cmp	r5, r3
 8004dd2:	bf38      	it	cc
 8004dd4:	461d      	movcc	r5, r3
 8004dd6:	0553      	lsls	r3, r2, #21
 8004dd8:	d527      	bpl.n	8004e2a <__ssputs_r+0x8e>
 8004dda:	4629      	mov	r1, r5
 8004ddc:	f7ff ff52 	bl	8004c84 <_malloc_r>
 8004de0:	4606      	mov	r6, r0
 8004de2:	b360      	cbz	r0, 8004e3e <__ssputs_r+0xa2>
 8004de4:	6921      	ldr	r1, [r4, #16]
 8004de6:	464a      	mov	r2, r9
 8004de8:	f000 fae6 	bl	80053b8 <memcpy>
 8004dec:	89a3      	ldrh	r3, [r4, #12]
 8004dee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004df2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004df6:	81a3      	strh	r3, [r4, #12]
 8004df8:	6126      	str	r6, [r4, #16]
 8004dfa:	6165      	str	r5, [r4, #20]
 8004dfc:	444e      	add	r6, r9
 8004dfe:	eba5 0509 	sub.w	r5, r5, r9
 8004e02:	6026      	str	r6, [r4, #0]
 8004e04:	60a5      	str	r5, [r4, #8]
 8004e06:	463e      	mov	r6, r7
 8004e08:	42be      	cmp	r6, r7
 8004e0a:	d900      	bls.n	8004e0e <__ssputs_r+0x72>
 8004e0c:	463e      	mov	r6, r7
 8004e0e:	6820      	ldr	r0, [r4, #0]
 8004e10:	4632      	mov	r2, r6
 8004e12:	4641      	mov	r1, r8
 8004e14:	f000 faa6 	bl	8005364 <memmove>
 8004e18:	68a3      	ldr	r3, [r4, #8]
 8004e1a:	1b9b      	subs	r3, r3, r6
 8004e1c:	60a3      	str	r3, [r4, #8]
 8004e1e:	6823      	ldr	r3, [r4, #0]
 8004e20:	4433      	add	r3, r6
 8004e22:	6023      	str	r3, [r4, #0]
 8004e24:	2000      	movs	r0, #0
 8004e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e2a:	462a      	mov	r2, r5
 8004e2c:	f000 fad2 	bl	80053d4 <_realloc_r>
 8004e30:	4606      	mov	r6, r0
 8004e32:	2800      	cmp	r0, #0
 8004e34:	d1e0      	bne.n	8004df8 <__ssputs_r+0x5c>
 8004e36:	6921      	ldr	r1, [r4, #16]
 8004e38:	4650      	mov	r0, sl
 8004e3a:	f7ff feb7 	bl	8004bac <_free_r>
 8004e3e:	230c      	movs	r3, #12
 8004e40:	f8ca 3000 	str.w	r3, [sl]
 8004e44:	89a3      	ldrh	r3, [r4, #12]
 8004e46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e4a:	81a3      	strh	r3, [r4, #12]
 8004e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e50:	e7e9      	b.n	8004e26 <__ssputs_r+0x8a>
	...

08004e54 <_svfiprintf_r>:
 8004e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e58:	4698      	mov	r8, r3
 8004e5a:	898b      	ldrh	r3, [r1, #12]
 8004e5c:	061b      	lsls	r3, r3, #24
 8004e5e:	b09d      	sub	sp, #116	@ 0x74
 8004e60:	4607      	mov	r7, r0
 8004e62:	460d      	mov	r5, r1
 8004e64:	4614      	mov	r4, r2
 8004e66:	d510      	bpl.n	8004e8a <_svfiprintf_r+0x36>
 8004e68:	690b      	ldr	r3, [r1, #16]
 8004e6a:	b973      	cbnz	r3, 8004e8a <_svfiprintf_r+0x36>
 8004e6c:	2140      	movs	r1, #64	@ 0x40
 8004e6e:	f7ff ff09 	bl	8004c84 <_malloc_r>
 8004e72:	6028      	str	r0, [r5, #0]
 8004e74:	6128      	str	r0, [r5, #16]
 8004e76:	b930      	cbnz	r0, 8004e86 <_svfiprintf_r+0x32>
 8004e78:	230c      	movs	r3, #12
 8004e7a:	603b      	str	r3, [r7, #0]
 8004e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e80:	b01d      	add	sp, #116	@ 0x74
 8004e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e86:	2340      	movs	r3, #64	@ 0x40
 8004e88:	616b      	str	r3, [r5, #20]
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e8e:	2320      	movs	r3, #32
 8004e90:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004e94:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e98:	2330      	movs	r3, #48	@ 0x30
 8004e9a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005038 <_svfiprintf_r+0x1e4>
 8004e9e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004ea2:	f04f 0901 	mov.w	r9, #1
 8004ea6:	4623      	mov	r3, r4
 8004ea8:	469a      	mov	sl, r3
 8004eaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004eae:	b10a      	cbz	r2, 8004eb4 <_svfiprintf_r+0x60>
 8004eb0:	2a25      	cmp	r2, #37	@ 0x25
 8004eb2:	d1f9      	bne.n	8004ea8 <_svfiprintf_r+0x54>
 8004eb4:	ebba 0b04 	subs.w	fp, sl, r4
 8004eb8:	d00b      	beq.n	8004ed2 <_svfiprintf_r+0x7e>
 8004eba:	465b      	mov	r3, fp
 8004ebc:	4622      	mov	r2, r4
 8004ebe:	4629      	mov	r1, r5
 8004ec0:	4638      	mov	r0, r7
 8004ec2:	f7ff ff6b 	bl	8004d9c <__ssputs_r>
 8004ec6:	3001      	adds	r0, #1
 8004ec8:	f000 80a7 	beq.w	800501a <_svfiprintf_r+0x1c6>
 8004ecc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004ece:	445a      	add	r2, fp
 8004ed0:	9209      	str	r2, [sp, #36]	@ 0x24
 8004ed2:	f89a 3000 	ldrb.w	r3, [sl]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	f000 809f 	beq.w	800501a <_svfiprintf_r+0x1c6>
 8004edc:	2300      	movs	r3, #0
 8004ede:	f04f 32ff 	mov.w	r2, #4294967295
 8004ee2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ee6:	f10a 0a01 	add.w	sl, sl, #1
 8004eea:	9304      	str	r3, [sp, #16]
 8004eec:	9307      	str	r3, [sp, #28]
 8004eee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004ef2:	931a      	str	r3, [sp, #104]	@ 0x68
 8004ef4:	4654      	mov	r4, sl
 8004ef6:	2205      	movs	r2, #5
 8004ef8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004efc:	484e      	ldr	r0, [pc, #312]	@ (8005038 <_svfiprintf_r+0x1e4>)
 8004efe:	f7fb f987 	bl	8000210 <memchr>
 8004f02:	9a04      	ldr	r2, [sp, #16]
 8004f04:	b9d8      	cbnz	r0, 8004f3e <_svfiprintf_r+0xea>
 8004f06:	06d0      	lsls	r0, r2, #27
 8004f08:	bf44      	itt	mi
 8004f0a:	2320      	movmi	r3, #32
 8004f0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004f10:	0711      	lsls	r1, r2, #28
 8004f12:	bf44      	itt	mi
 8004f14:	232b      	movmi	r3, #43	@ 0x2b
 8004f16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004f1a:	f89a 3000 	ldrb.w	r3, [sl]
 8004f1e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f20:	d015      	beq.n	8004f4e <_svfiprintf_r+0xfa>
 8004f22:	9a07      	ldr	r2, [sp, #28]
 8004f24:	4654      	mov	r4, sl
 8004f26:	2000      	movs	r0, #0
 8004f28:	f04f 0c0a 	mov.w	ip, #10
 8004f2c:	4621      	mov	r1, r4
 8004f2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f32:	3b30      	subs	r3, #48	@ 0x30
 8004f34:	2b09      	cmp	r3, #9
 8004f36:	d94b      	bls.n	8004fd0 <_svfiprintf_r+0x17c>
 8004f38:	b1b0      	cbz	r0, 8004f68 <_svfiprintf_r+0x114>
 8004f3a:	9207      	str	r2, [sp, #28]
 8004f3c:	e014      	b.n	8004f68 <_svfiprintf_r+0x114>
 8004f3e:	eba0 0308 	sub.w	r3, r0, r8
 8004f42:	fa09 f303 	lsl.w	r3, r9, r3
 8004f46:	4313      	orrs	r3, r2
 8004f48:	9304      	str	r3, [sp, #16]
 8004f4a:	46a2      	mov	sl, r4
 8004f4c:	e7d2      	b.n	8004ef4 <_svfiprintf_r+0xa0>
 8004f4e:	9b03      	ldr	r3, [sp, #12]
 8004f50:	1d19      	adds	r1, r3, #4
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	9103      	str	r1, [sp, #12]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	bfbb      	ittet	lt
 8004f5a:	425b      	neglt	r3, r3
 8004f5c:	f042 0202 	orrlt.w	r2, r2, #2
 8004f60:	9307      	strge	r3, [sp, #28]
 8004f62:	9307      	strlt	r3, [sp, #28]
 8004f64:	bfb8      	it	lt
 8004f66:	9204      	strlt	r2, [sp, #16]
 8004f68:	7823      	ldrb	r3, [r4, #0]
 8004f6a:	2b2e      	cmp	r3, #46	@ 0x2e
 8004f6c:	d10a      	bne.n	8004f84 <_svfiprintf_r+0x130>
 8004f6e:	7863      	ldrb	r3, [r4, #1]
 8004f70:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f72:	d132      	bne.n	8004fda <_svfiprintf_r+0x186>
 8004f74:	9b03      	ldr	r3, [sp, #12]
 8004f76:	1d1a      	adds	r2, r3, #4
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	9203      	str	r2, [sp, #12]
 8004f7c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004f80:	3402      	adds	r4, #2
 8004f82:	9305      	str	r3, [sp, #20]
 8004f84:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005048 <_svfiprintf_r+0x1f4>
 8004f88:	7821      	ldrb	r1, [r4, #0]
 8004f8a:	2203      	movs	r2, #3
 8004f8c:	4650      	mov	r0, sl
 8004f8e:	f7fb f93f 	bl	8000210 <memchr>
 8004f92:	b138      	cbz	r0, 8004fa4 <_svfiprintf_r+0x150>
 8004f94:	9b04      	ldr	r3, [sp, #16]
 8004f96:	eba0 000a 	sub.w	r0, r0, sl
 8004f9a:	2240      	movs	r2, #64	@ 0x40
 8004f9c:	4082      	lsls	r2, r0
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	3401      	adds	r4, #1
 8004fa2:	9304      	str	r3, [sp, #16]
 8004fa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fa8:	4824      	ldr	r0, [pc, #144]	@ (800503c <_svfiprintf_r+0x1e8>)
 8004faa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004fae:	2206      	movs	r2, #6
 8004fb0:	f7fb f92e 	bl	8000210 <memchr>
 8004fb4:	2800      	cmp	r0, #0
 8004fb6:	d036      	beq.n	8005026 <_svfiprintf_r+0x1d2>
 8004fb8:	4b21      	ldr	r3, [pc, #132]	@ (8005040 <_svfiprintf_r+0x1ec>)
 8004fba:	bb1b      	cbnz	r3, 8005004 <_svfiprintf_r+0x1b0>
 8004fbc:	9b03      	ldr	r3, [sp, #12]
 8004fbe:	3307      	adds	r3, #7
 8004fc0:	f023 0307 	bic.w	r3, r3, #7
 8004fc4:	3308      	adds	r3, #8
 8004fc6:	9303      	str	r3, [sp, #12]
 8004fc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004fca:	4433      	add	r3, r6
 8004fcc:	9309      	str	r3, [sp, #36]	@ 0x24
 8004fce:	e76a      	b.n	8004ea6 <_svfiprintf_r+0x52>
 8004fd0:	fb0c 3202 	mla	r2, ip, r2, r3
 8004fd4:	460c      	mov	r4, r1
 8004fd6:	2001      	movs	r0, #1
 8004fd8:	e7a8      	b.n	8004f2c <_svfiprintf_r+0xd8>
 8004fda:	2300      	movs	r3, #0
 8004fdc:	3401      	adds	r4, #1
 8004fde:	9305      	str	r3, [sp, #20]
 8004fe0:	4619      	mov	r1, r3
 8004fe2:	f04f 0c0a 	mov.w	ip, #10
 8004fe6:	4620      	mov	r0, r4
 8004fe8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004fec:	3a30      	subs	r2, #48	@ 0x30
 8004fee:	2a09      	cmp	r2, #9
 8004ff0:	d903      	bls.n	8004ffa <_svfiprintf_r+0x1a6>
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d0c6      	beq.n	8004f84 <_svfiprintf_r+0x130>
 8004ff6:	9105      	str	r1, [sp, #20]
 8004ff8:	e7c4      	b.n	8004f84 <_svfiprintf_r+0x130>
 8004ffa:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ffe:	4604      	mov	r4, r0
 8005000:	2301      	movs	r3, #1
 8005002:	e7f0      	b.n	8004fe6 <_svfiprintf_r+0x192>
 8005004:	ab03      	add	r3, sp, #12
 8005006:	9300      	str	r3, [sp, #0]
 8005008:	462a      	mov	r2, r5
 800500a:	4b0e      	ldr	r3, [pc, #56]	@ (8005044 <_svfiprintf_r+0x1f0>)
 800500c:	a904      	add	r1, sp, #16
 800500e:	4638      	mov	r0, r7
 8005010:	f3af 8000 	nop.w
 8005014:	1c42      	adds	r2, r0, #1
 8005016:	4606      	mov	r6, r0
 8005018:	d1d6      	bne.n	8004fc8 <_svfiprintf_r+0x174>
 800501a:	89ab      	ldrh	r3, [r5, #12]
 800501c:	065b      	lsls	r3, r3, #25
 800501e:	f53f af2d 	bmi.w	8004e7c <_svfiprintf_r+0x28>
 8005022:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005024:	e72c      	b.n	8004e80 <_svfiprintf_r+0x2c>
 8005026:	ab03      	add	r3, sp, #12
 8005028:	9300      	str	r3, [sp, #0]
 800502a:	462a      	mov	r2, r5
 800502c:	4b05      	ldr	r3, [pc, #20]	@ (8005044 <_svfiprintf_r+0x1f0>)
 800502e:	a904      	add	r1, sp, #16
 8005030:	4638      	mov	r0, r7
 8005032:	f000 f879 	bl	8005128 <_printf_i>
 8005036:	e7ed      	b.n	8005014 <_svfiprintf_r+0x1c0>
 8005038:	08005528 	.word	0x08005528
 800503c:	08005532 	.word	0x08005532
 8005040:	00000000 	.word	0x00000000
 8005044:	08004d9d 	.word	0x08004d9d
 8005048:	0800552e 	.word	0x0800552e

0800504c <_printf_common>:
 800504c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005050:	4616      	mov	r6, r2
 8005052:	4698      	mov	r8, r3
 8005054:	688a      	ldr	r2, [r1, #8]
 8005056:	690b      	ldr	r3, [r1, #16]
 8005058:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800505c:	4293      	cmp	r3, r2
 800505e:	bfb8      	it	lt
 8005060:	4613      	movlt	r3, r2
 8005062:	6033      	str	r3, [r6, #0]
 8005064:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005068:	4607      	mov	r7, r0
 800506a:	460c      	mov	r4, r1
 800506c:	b10a      	cbz	r2, 8005072 <_printf_common+0x26>
 800506e:	3301      	adds	r3, #1
 8005070:	6033      	str	r3, [r6, #0]
 8005072:	6823      	ldr	r3, [r4, #0]
 8005074:	0699      	lsls	r1, r3, #26
 8005076:	bf42      	ittt	mi
 8005078:	6833      	ldrmi	r3, [r6, #0]
 800507a:	3302      	addmi	r3, #2
 800507c:	6033      	strmi	r3, [r6, #0]
 800507e:	6825      	ldr	r5, [r4, #0]
 8005080:	f015 0506 	ands.w	r5, r5, #6
 8005084:	d106      	bne.n	8005094 <_printf_common+0x48>
 8005086:	f104 0a19 	add.w	sl, r4, #25
 800508a:	68e3      	ldr	r3, [r4, #12]
 800508c:	6832      	ldr	r2, [r6, #0]
 800508e:	1a9b      	subs	r3, r3, r2
 8005090:	42ab      	cmp	r3, r5
 8005092:	dc26      	bgt.n	80050e2 <_printf_common+0x96>
 8005094:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005098:	6822      	ldr	r2, [r4, #0]
 800509a:	3b00      	subs	r3, #0
 800509c:	bf18      	it	ne
 800509e:	2301      	movne	r3, #1
 80050a0:	0692      	lsls	r2, r2, #26
 80050a2:	d42b      	bmi.n	80050fc <_printf_common+0xb0>
 80050a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80050a8:	4641      	mov	r1, r8
 80050aa:	4638      	mov	r0, r7
 80050ac:	47c8      	blx	r9
 80050ae:	3001      	adds	r0, #1
 80050b0:	d01e      	beq.n	80050f0 <_printf_common+0xa4>
 80050b2:	6823      	ldr	r3, [r4, #0]
 80050b4:	6922      	ldr	r2, [r4, #16]
 80050b6:	f003 0306 	and.w	r3, r3, #6
 80050ba:	2b04      	cmp	r3, #4
 80050bc:	bf02      	ittt	eq
 80050be:	68e5      	ldreq	r5, [r4, #12]
 80050c0:	6833      	ldreq	r3, [r6, #0]
 80050c2:	1aed      	subeq	r5, r5, r3
 80050c4:	68a3      	ldr	r3, [r4, #8]
 80050c6:	bf0c      	ite	eq
 80050c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050cc:	2500      	movne	r5, #0
 80050ce:	4293      	cmp	r3, r2
 80050d0:	bfc4      	itt	gt
 80050d2:	1a9b      	subgt	r3, r3, r2
 80050d4:	18ed      	addgt	r5, r5, r3
 80050d6:	2600      	movs	r6, #0
 80050d8:	341a      	adds	r4, #26
 80050da:	42b5      	cmp	r5, r6
 80050dc:	d11a      	bne.n	8005114 <_printf_common+0xc8>
 80050de:	2000      	movs	r0, #0
 80050e0:	e008      	b.n	80050f4 <_printf_common+0xa8>
 80050e2:	2301      	movs	r3, #1
 80050e4:	4652      	mov	r2, sl
 80050e6:	4641      	mov	r1, r8
 80050e8:	4638      	mov	r0, r7
 80050ea:	47c8      	blx	r9
 80050ec:	3001      	adds	r0, #1
 80050ee:	d103      	bne.n	80050f8 <_printf_common+0xac>
 80050f0:	f04f 30ff 	mov.w	r0, #4294967295
 80050f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050f8:	3501      	adds	r5, #1
 80050fa:	e7c6      	b.n	800508a <_printf_common+0x3e>
 80050fc:	18e1      	adds	r1, r4, r3
 80050fe:	1c5a      	adds	r2, r3, #1
 8005100:	2030      	movs	r0, #48	@ 0x30
 8005102:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005106:	4422      	add	r2, r4
 8005108:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800510c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005110:	3302      	adds	r3, #2
 8005112:	e7c7      	b.n	80050a4 <_printf_common+0x58>
 8005114:	2301      	movs	r3, #1
 8005116:	4622      	mov	r2, r4
 8005118:	4641      	mov	r1, r8
 800511a:	4638      	mov	r0, r7
 800511c:	47c8      	blx	r9
 800511e:	3001      	adds	r0, #1
 8005120:	d0e6      	beq.n	80050f0 <_printf_common+0xa4>
 8005122:	3601      	adds	r6, #1
 8005124:	e7d9      	b.n	80050da <_printf_common+0x8e>
	...

08005128 <_printf_i>:
 8005128:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800512c:	7e0f      	ldrb	r7, [r1, #24]
 800512e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005130:	2f78      	cmp	r7, #120	@ 0x78
 8005132:	4691      	mov	r9, r2
 8005134:	4680      	mov	r8, r0
 8005136:	460c      	mov	r4, r1
 8005138:	469a      	mov	sl, r3
 800513a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800513e:	d807      	bhi.n	8005150 <_printf_i+0x28>
 8005140:	2f62      	cmp	r7, #98	@ 0x62
 8005142:	d80a      	bhi.n	800515a <_printf_i+0x32>
 8005144:	2f00      	cmp	r7, #0
 8005146:	f000 80d1 	beq.w	80052ec <_printf_i+0x1c4>
 800514a:	2f58      	cmp	r7, #88	@ 0x58
 800514c:	f000 80b8 	beq.w	80052c0 <_printf_i+0x198>
 8005150:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005154:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005158:	e03a      	b.n	80051d0 <_printf_i+0xa8>
 800515a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800515e:	2b15      	cmp	r3, #21
 8005160:	d8f6      	bhi.n	8005150 <_printf_i+0x28>
 8005162:	a101      	add	r1, pc, #4	@ (adr r1, 8005168 <_printf_i+0x40>)
 8005164:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005168:	080051c1 	.word	0x080051c1
 800516c:	080051d5 	.word	0x080051d5
 8005170:	08005151 	.word	0x08005151
 8005174:	08005151 	.word	0x08005151
 8005178:	08005151 	.word	0x08005151
 800517c:	08005151 	.word	0x08005151
 8005180:	080051d5 	.word	0x080051d5
 8005184:	08005151 	.word	0x08005151
 8005188:	08005151 	.word	0x08005151
 800518c:	08005151 	.word	0x08005151
 8005190:	08005151 	.word	0x08005151
 8005194:	080052d3 	.word	0x080052d3
 8005198:	080051ff 	.word	0x080051ff
 800519c:	0800528d 	.word	0x0800528d
 80051a0:	08005151 	.word	0x08005151
 80051a4:	08005151 	.word	0x08005151
 80051a8:	080052f5 	.word	0x080052f5
 80051ac:	08005151 	.word	0x08005151
 80051b0:	080051ff 	.word	0x080051ff
 80051b4:	08005151 	.word	0x08005151
 80051b8:	08005151 	.word	0x08005151
 80051bc:	08005295 	.word	0x08005295
 80051c0:	6833      	ldr	r3, [r6, #0]
 80051c2:	1d1a      	adds	r2, r3, #4
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	6032      	str	r2, [r6, #0]
 80051c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80051cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80051d0:	2301      	movs	r3, #1
 80051d2:	e09c      	b.n	800530e <_printf_i+0x1e6>
 80051d4:	6833      	ldr	r3, [r6, #0]
 80051d6:	6820      	ldr	r0, [r4, #0]
 80051d8:	1d19      	adds	r1, r3, #4
 80051da:	6031      	str	r1, [r6, #0]
 80051dc:	0606      	lsls	r6, r0, #24
 80051de:	d501      	bpl.n	80051e4 <_printf_i+0xbc>
 80051e0:	681d      	ldr	r5, [r3, #0]
 80051e2:	e003      	b.n	80051ec <_printf_i+0xc4>
 80051e4:	0645      	lsls	r5, r0, #25
 80051e6:	d5fb      	bpl.n	80051e0 <_printf_i+0xb8>
 80051e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80051ec:	2d00      	cmp	r5, #0
 80051ee:	da03      	bge.n	80051f8 <_printf_i+0xd0>
 80051f0:	232d      	movs	r3, #45	@ 0x2d
 80051f2:	426d      	negs	r5, r5
 80051f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80051f8:	4858      	ldr	r0, [pc, #352]	@ (800535c <_printf_i+0x234>)
 80051fa:	230a      	movs	r3, #10
 80051fc:	e011      	b.n	8005222 <_printf_i+0xfa>
 80051fe:	6821      	ldr	r1, [r4, #0]
 8005200:	6833      	ldr	r3, [r6, #0]
 8005202:	0608      	lsls	r0, r1, #24
 8005204:	f853 5b04 	ldr.w	r5, [r3], #4
 8005208:	d402      	bmi.n	8005210 <_printf_i+0xe8>
 800520a:	0649      	lsls	r1, r1, #25
 800520c:	bf48      	it	mi
 800520e:	b2ad      	uxthmi	r5, r5
 8005210:	2f6f      	cmp	r7, #111	@ 0x6f
 8005212:	4852      	ldr	r0, [pc, #328]	@ (800535c <_printf_i+0x234>)
 8005214:	6033      	str	r3, [r6, #0]
 8005216:	bf14      	ite	ne
 8005218:	230a      	movne	r3, #10
 800521a:	2308      	moveq	r3, #8
 800521c:	2100      	movs	r1, #0
 800521e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005222:	6866      	ldr	r6, [r4, #4]
 8005224:	60a6      	str	r6, [r4, #8]
 8005226:	2e00      	cmp	r6, #0
 8005228:	db05      	blt.n	8005236 <_printf_i+0x10e>
 800522a:	6821      	ldr	r1, [r4, #0]
 800522c:	432e      	orrs	r6, r5
 800522e:	f021 0104 	bic.w	r1, r1, #4
 8005232:	6021      	str	r1, [r4, #0]
 8005234:	d04b      	beq.n	80052ce <_printf_i+0x1a6>
 8005236:	4616      	mov	r6, r2
 8005238:	fbb5 f1f3 	udiv	r1, r5, r3
 800523c:	fb03 5711 	mls	r7, r3, r1, r5
 8005240:	5dc7      	ldrb	r7, [r0, r7]
 8005242:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005246:	462f      	mov	r7, r5
 8005248:	42bb      	cmp	r3, r7
 800524a:	460d      	mov	r5, r1
 800524c:	d9f4      	bls.n	8005238 <_printf_i+0x110>
 800524e:	2b08      	cmp	r3, #8
 8005250:	d10b      	bne.n	800526a <_printf_i+0x142>
 8005252:	6823      	ldr	r3, [r4, #0]
 8005254:	07df      	lsls	r7, r3, #31
 8005256:	d508      	bpl.n	800526a <_printf_i+0x142>
 8005258:	6923      	ldr	r3, [r4, #16]
 800525a:	6861      	ldr	r1, [r4, #4]
 800525c:	4299      	cmp	r1, r3
 800525e:	bfde      	ittt	le
 8005260:	2330      	movle	r3, #48	@ 0x30
 8005262:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005266:	f106 36ff 	addle.w	r6, r6, #4294967295
 800526a:	1b92      	subs	r2, r2, r6
 800526c:	6122      	str	r2, [r4, #16]
 800526e:	f8cd a000 	str.w	sl, [sp]
 8005272:	464b      	mov	r3, r9
 8005274:	aa03      	add	r2, sp, #12
 8005276:	4621      	mov	r1, r4
 8005278:	4640      	mov	r0, r8
 800527a:	f7ff fee7 	bl	800504c <_printf_common>
 800527e:	3001      	adds	r0, #1
 8005280:	d14a      	bne.n	8005318 <_printf_i+0x1f0>
 8005282:	f04f 30ff 	mov.w	r0, #4294967295
 8005286:	b004      	add	sp, #16
 8005288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800528c:	6823      	ldr	r3, [r4, #0]
 800528e:	f043 0320 	orr.w	r3, r3, #32
 8005292:	6023      	str	r3, [r4, #0]
 8005294:	4832      	ldr	r0, [pc, #200]	@ (8005360 <_printf_i+0x238>)
 8005296:	2778      	movs	r7, #120	@ 0x78
 8005298:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800529c:	6823      	ldr	r3, [r4, #0]
 800529e:	6831      	ldr	r1, [r6, #0]
 80052a0:	061f      	lsls	r7, r3, #24
 80052a2:	f851 5b04 	ldr.w	r5, [r1], #4
 80052a6:	d402      	bmi.n	80052ae <_printf_i+0x186>
 80052a8:	065f      	lsls	r7, r3, #25
 80052aa:	bf48      	it	mi
 80052ac:	b2ad      	uxthmi	r5, r5
 80052ae:	6031      	str	r1, [r6, #0]
 80052b0:	07d9      	lsls	r1, r3, #31
 80052b2:	bf44      	itt	mi
 80052b4:	f043 0320 	orrmi.w	r3, r3, #32
 80052b8:	6023      	strmi	r3, [r4, #0]
 80052ba:	b11d      	cbz	r5, 80052c4 <_printf_i+0x19c>
 80052bc:	2310      	movs	r3, #16
 80052be:	e7ad      	b.n	800521c <_printf_i+0xf4>
 80052c0:	4826      	ldr	r0, [pc, #152]	@ (800535c <_printf_i+0x234>)
 80052c2:	e7e9      	b.n	8005298 <_printf_i+0x170>
 80052c4:	6823      	ldr	r3, [r4, #0]
 80052c6:	f023 0320 	bic.w	r3, r3, #32
 80052ca:	6023      	str	r3, [r4, #0]
 80052cc:	e7f6      	b.n	80052bc <_printf_i+0x194>
 80052ce:	4616      	mov	r6, r2
 80052d0:	e7bd      	b.n	800524e <_printf_i+0x126>
 80052d2:	6833      	ldr	r3, [r6, #0]
 80052d4:	6825      	ldr	r5, [r4, #0]
 80052d6:	6961      	ldr	r1, [r4, #20]
 80052d8:	1d18      	adds	r0, r3, #4
 80052da:	6030      	str	r0, [r6, #0]
 80052dc:	062e      	lsls	r6, r5, #24
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	d501      	bpl.n	80052e6 <_printf_i+0x1be>
 80052e2:	6019      	str	r1, [r3, #0]
 80052e4:	e002      	b.n	80052ec <_printf_i+0x1c4>
 80052e6:	0668      	lsls	r0, r5, #25
 80052e8:	d5fb      	bpl.n	80052e2 <_printf_i+0x1ba>
 80052ea:	8019      	strh	r1, [r3, #0]
 80052ec:	2300      	movs	r3, #0
 80052ee:	6123      	str	r3, [r4, #16]
 80052f0:	4616      	mov	r6, r2
 80052f2:	e7bc      	b.n	800526e <_printf_i+0x146>
 80052f4:	6833      	ldr	r3, [r6, #0]
 80052f6:	1d1a      	adds	r2, r3, #4
 80052f8:	6032      	str	r2, [r6, #0]
 80052fa:	681e      	ldr	r6, [r3, #0]
 80052fc:	6862      	ldr	r2, [r4, #4]
 80052fe:	2100      	movs	r1, #0
 8005300:	4630      	mov	r0, r6
 8005302:	f7fa ff85 	bl	8000210 <memchr>
 8005306:	b108      	cbz	r0, 800530c <_printf_i+0x1e4>
 8005308:	1b80      	subs	r0, r0, r6
 800530a:	6060      	str	r0, [r4, #4]
 800530c:	6863      	ldr	r3, [r4, #4]
 800530e:	6123      	str	r3, [r4, #16]
 8005310:	2300      	movs	r3, #0
 8005312:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005316:	e7aa      	b.n	800526e <_printf_i+0x146>
 8005318:	6923      	ldr	r3, [r4, #16]
 800531a:	4632      	mov	r2, r6
 800531c:	4649      	mov	r1, r9
 800531e:	4640      	mov	r0, r8
 8005320:	47d0      	blx	sl
 8005322:	3001      	adds	r0, #1
 8005324:	d0ad      	beq.n	8005282 <_printf_i+0x15a>
 8005326:	6823      	ldr	r3, [r4, #0]
 8005328:	079b      	lsls	r3, r3, #30
 800532a:	d413      	bmi.n	8005354 <_printf_i+0x22c>
 800532c:	68e0      	ldr	r0, [r4, #12]
 800532e:	9b03      	ldr	r3, [sp, #12]
 8005330:	4298      	cmp	r0, r3
 8005332:	bfb8      	it	lt
 8005334:	4618      	movlt	r0, r3
 8005336:	e7a6      	b.n	8005286 <_printf_i+0x15e>
 8005338:	2301      	movs	r3, #1
 800533a:	4632      	mov	r2, r6
 800533c:	4649      	mov	r1, r9
 800533e:	4640      	mov	r0, r8
 8005340:	47d0      	blx	sl
 8005342:	3001      	adds	r0, #1
 8005344:	d09d      	beq.n	8005282 <_printf_i+0x15a>
 8005346:	3501      	adds	r5, #1
 8005348:	68e3      	ldr	r3, [r4, #12]
 800534a:	9903      	ldr	r1, [sp, #12]
 800534c:	1a5b      	subs	r3, r3, r1
 800534e:	42ab      	cmp	r3, r5
 8005350:	dcf2      	bgt.n	8005338 <_printf_i+0x210>
 8005352:	e7eb      	b.n	800532c <_printf_i+0x204>
 8005354:	2500      	movs	r5, #0
 8005356:	f104 0619 	add.w	r6, r4, #25
 800535a:	e7f5      	b.n	8005348 <_printf_i+0x220>
 800535c:	08005539 	.word	0x08005539
 8005360:	0800554a 	.word	0x0800554a

08005364 <memmove>:
 8005364:	4288      	cmp	r0, r1
 8005366:	b510      	push	{r4, lr}
 8005368:	eb01 0402 	add.w	r4, r1, r2
 800536c:	d902      	bls.n	8005374 <memmove+0x10>
 800536e:	4284      	cmp	r4, r0
 8005370:	4623      	mov	r3, r4
 8005372:	d807      	bhi.n	8005384 <memmove+0x20>
 8005374:	1e43      	subs	r3, r0, #1
 8005376:	42a1      	cmp	r1, r4
 8005378:	d008      	beq.n	800538c <memmove+0x28>
 800537a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800537e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005382:	e7f8      	b.n	8005376 <memmove+0x12>
 8005384:	4402      	add	r2, r0
 8005386:	4601      	mov	r1, r0
 8005388:	428a      	cmp	r2, r1
 800538a:	d100      	bne.n	800538e <memmove+0x2a>
 800538c:	bd10      	pop	{r4, pc}
 800538e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005392:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005396:	e7f7      	b.n	8005388 <memmove+0x24>

08005398 <_sbrk_r>:
 8005398:	b538      	push	{r3, r4, r5, lr}
 800539a:	4d06      	ldr	r5, [pc, #24]	@ (80053b4 <_sbrk_r+0x1c>)
 800539c:	2300      	movs	r3, #0
 800539e:	4604      	mov	r4, r0
 80053a0:	4608      	mov	r0, r1
 80053a2:	602b      	str	r3, [r5, #0]
 80053a4:	f7fc faee 	bl	8001984 <_sbrk>
 80053a8:	1c43      	adds	r3, r0, #1
 80053aa:	d102      	bne.n	80053b2 <_sbrk_r+0x1a>
 80053ac:	682b      	ldr	r3, [r5, #0]
 80053ae:	b103      	cbz	r3, 80053b2 <_sbrk_r+0x1a>
 80053b0:	6023      	str	r3, [r4, #0]
 80053b2:	bd38      	pop	{r3, r4, r5, pc}
 80053b4:	20000b18 	.word	0x20000b18

080053b8 <memcpy>:
 80053b8:	440a      	add	r2, r1
 80053ba:	4291      	cmp	r1, r2
 80053bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80053c0:	d100      	bne.n	80053c4 <memcpy+0xc>
 80053c2:	4770      	bx	lr
 80053c4:	b510      	push	{r4, lr}
 80053c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80053ce:	4291      	cmp	r1, r2
 80053d0:	d1f9      	bne.n	80053c6 <memcpy+0xe>
 80053d2:	bd10      	pop	{r4, pc}

080053d4 <_realloc_r>:
 80053d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053d8:	4607      	mov	r7, r0
 80053da:	4614      	mov	r4, r2
 80053dc:	460d      	mov	r5, r1
 80053de:	b921      	cbnz	r1, 80053ea <_realloc_r+0x16>
 80053e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80053e4:	4611      	mov	r1, r2
 80053e6:	f7ff bc4d 	b.w	8004c84 <_malloc_r>
 80053ea:	b92a      	cbnz	r2, 80053f8 <_realloc_r+0x24>
 80053ec:	f7ff fbde 	bl	8004bac <_free_r>
 80053f0:	4625      	mov	r5, r4
 80053f2:	4628      	mov	r0, r5
 80053f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053f8:	f000 f81a 	bl	8005430 <_malloc_usable_size_r>
 80053fc:	4284      	cmp	r4, r0
 80053fe:	4606      	mov	r6, r0
 8005400:	d802      	bhi.n	8005408 <_realloc_r+0x34>
 8005402:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005406:	d8f4      	bhi.n	80053f2 <_realloc_r+0x1e>
 8005408:	4621      	mov	r1, r4
 800540a:	4638      	mov	r0, r7
 800540c:	f7ff fc3a 	bl	8004c84 <_malloc_r>
 8005410:	4680      	mov	r8, r0
 8005412:	b908      	cbnz	r0, 8005418 <_realloc_r+0x44>
 8005414:	4645      	mov	r5, r8
 8005416:	e7ec      	b.n	80053f2 <_realloc_r+0x1e>
 8005418:	42b4      	cmp	r4, r6
 800541a:	4622      	mov	r2, r4
 800541c:	4629      	mov	r1, r5
 800541e:	bf28      	it	cs
 8005420:	4632      	movcs	r2, r6
 8005422:	f7ff ffc9 	bl	80053b8 <memcpy>
 8005426:	4629      	mov	r1, r5
 8005428:	4638      	mov	r0, r7
 800542a:	f7ff fbbf 	bl	8004bac <_free_r>
 800542e:	e7f1      	b.n	8005414 <_realloc_r+0x40>

08005430 <_malloc_usable_size_r>:
 8005430:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005434:	1f18      	subs	r0, r3, #4
 8005436:	2b00      	cmp	r3, #0
 8005438:	bfbc      	itt	lt
 800543a:	580b      	ldrlt	r3, [r1, r0]
 800543c:	18c0      	addlt	r0, r0, r3
 800543e:	4770      	bx	lr

08005440 <_init>:
 8005440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005442:	bf00      	nop
 8005444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005446:	bc08      	pop	{r3}
 8005448:	469e      	mov	lr, r3
 800544a:	4770      	bx	lr

0800544c <_fini>:
 800544c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800544e:	bf00      	nop
 8005450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005452:	bc08      	pop	{r3}
 8005454:	469e      	mov	lr, r3
 8005456:	4770      	bx	lr
